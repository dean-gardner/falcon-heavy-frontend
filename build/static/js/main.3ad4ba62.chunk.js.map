{"version":3,"sources":["ColorModeSwitcher.tsx","config/index.js","hooks/useBeacon.ts","components/ContractAddressInput.tsx","hooks/usePendingPromise.ts","components/Preloader.tsx","components/ContractStorageInfo.tsx","utils.ts","components/ContractBalanceInfo.tsx","components/ContractTransferForm.tsx","components/Dashboard.tsx","components/Bonds/hooks.ts","components/Bonds/BuyBond.tsx","components/Layout/Layout.tsx","App.tsx","reportWebVitals.ts","serviceWorker.ts","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","aria-label","NETWORK_ADDRESS","Tezos","TezosToolkit","wallet","BeaconWallet","name","useBeacon","useState","pkh","setUserPkh","connect","useCallback","a","requestPermissions","scopes","PermissionScope","OPERATION_REQUEST","SIGN","THRESHOLD","getPKH","_pkh","disconnect","client","removeAllAccounts","setWalletProvider","ContractAddressInput","w","align","marginBottom","children","AtSign","usePendingPromise","fetcher","transformer","fetching","setFetching","error","setError","data","setStorage","useEffect","isUnmounted","undefined","result","toString","Preloader","thickness","speed","emptyColor","alignSelf","ContractStorageInfo","contractAddress","contract","at","storage","JSON","stringify","readOnly","defaultValue","isInvalid","validateContractAddress","addr","validateAddress","validateTezosAddress","startsWith","ContractBalanceInfo","views","getBalance","read","catch","balance","ContractTransferForm","amount","setAmount","to","setTo","handleClick","methods","transfer","Number","send","op","confirmation","alert","console","mx","d","placeholder","value","onChange","e","target","width","type","AccountInfo","Dashboard","setContractAddress","contractValid","setContractValid","className","options","network","BuyBond","buyBond","myAddress","bondPrice","LpToken","LpTokenAmount","Slippage","getActiveAccount","log","then","order","from","useBonds","href","Layout","rel","integrity","src","height","alt","id","path","element","App","theme","minH","p","justifySelf","spacing","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3ad4ba62.chunk.js","sourcesContent":["import * as React from \"react\"\r\nimport {\r\n  useColorMode,\r\n  useColorModeValue,\r\n  IconButton,\r\n  IconButtonProps,\r\n} from \"@chakra-ui/react\"\r\nimport { FaMoon, FaSun } from \"react-icons/fa\"\r\n\r\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\r\n\r\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\r\n  const { toggleColorMode } = useColorMode()\r\n  const text = useColorModeValue(\"dark\", \"light\")\r\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\r\n\r\n  return (\r\n    <IconButton\r\n      size=\"md\"\r\n      fontSize=\"lg\"\r\n      variant=\"ghost\"\r\n      color=\"current\"\r\n      marginLeft=\"2\"\r\n      onClick={toggleColorMode}\r\n      icon={<SwitchIcon />}\r\n      aria-label={`Switch to ${text} mode`}\r\n      {...props}\r\n    />\r\n  )\r\n}\r\n","// const {\r\n//   NETWORK_ADDRESS,\r\n// } = process.env;\r\n\r\n// https://mainnet-tezos.giganode.io\r\n//https://delphinet-tezos.giganode.io\r\n//https://hangzhounet.api.tez.ie\r\n//https://testnet-tezos.giganode.io\r\nconst NETWORK_ADDRESS = 'https://hangzhounet.api.tez.ie/';\r\n\r\n\r\n//'mainnet' | 'granadanet' | 'hangzhounet' | 'custom'\r\nconst NETWORK_TYPE = 'hangzhounet';\r\n\r\nconst BOND_CONTRACT_ADDRESS = 'KT1V9gTAvhuXgb7egVjn6BtCfU4BMtjfvWfR';\r\nconst LP_TOKEN_CONTRACT_ADDRESS =  \"KT1GgNMoJhfeWUoqh1RJaFXE1H66tja7L1eU\";\r\nconst TREASURY_CONTRACT_ADDRESS =  \"KT1VX4MV7RXzBq1bpnxfSG8V2sTtpT5N2TCh\";\r\nconst REWARD_TOKEN_CONTRACT_ADDRESS =  \"KT1GxEuEZyPe2ba4aVVxPWQDzqEhi62ZruxU\";\r\nconst LP_TOKEN = \"KT1GgNMoJhfeWUoqh1RJaFXE1H66tja7L1eU\";\r\n\r\nexport {\r\n  NETWORK_ADDRESS,\r\n  BOND_CONTRACT_ADDRESS,\r\n  NETWORK_TYPE,\r\n  LP_TOKEN_CONTRACT_ADDRESS,\r\n  TREASURY_CONTRACT_ADDRESS,\r\n  REWARD_TOKEN_CONTRACT_ADDRESS,\r\n  LP_TOKEN\r\n}; ","import { useCallback, useState } from \"react\";\r\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\r\n\r\nimport { TezosToolkit } from \"@taquito/taquito\";\r\nimport { NetworkType, PermissionScope } from \"@airgap/beacon-sdk\";\r\n\r\nimport {NETWORK_ADDRESS, BOND_CONTRACT_ADDRESS, NETWORK_TYPE} from '../config/index';\r\n\r\nconst options = {\r\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\r\n  // iconUrl: \"https://tezostaquito.io/img/favicon.png\",\r\n  // eventHandlers: {\r\n  //   PERMISSION_REQUEST_SUCCESS: {\r\n  //     handler: async (data: any) => {\r\n  //       console.log(\"permission data\", data);\r\n  //     },\r\n  //   },\r\n  // },\r\n};\r\n\r\nclass LambdaViewSigner {\r\n  async publicKeyHash() {\r\n    return \"tz1fVQangAfb9J1hRRMP2bSB6LvASD6KpY8A\";\r\n  }\r\n\r\n  async publicKey() {\r\n    return \"edpkvWbk81uh1DEvdWKR4g1bjyTGhdu1mDvznPUFE2zDwNsLXrEb9K\";\r\n  }\r\n\r\n  async secretKey(): Promise<string> {\r\n    throw new Error(\"Secret key cannot be exposed\");\r\n  }\r\n\r\n  async sign(): Promise<{\r\n    bytes: string;\r\n    sig: string;\r\n    prefixSig: string;\r\n    sbytes: string;\r\n  }> {\r\n    throw new Error(\"Cannot sign\");\r\n  }\r\n}\r\n\r\nconst Tezos = new TezosToolkit(NETWORK_ADDRESS);\r\n\r\nconst wallet = new BeaconWallet(options);\r\n\r\n\r\nTezos.setWalletProvider(wallet);\r\n//Tezos.setSignerProvider(new LambdaViewSigner());\r\n\r\nexport default function useBeacon() {\r\n  const [pkh, setUserPkh] = useState<string>();\r\n\r\n  const connect = useCallback(async () => {\r\n    await wallet.requestPermissions({\r\n      scopes: [\r\n             PermissionScope.OPERATION_REQUEST,\r\n             PermissionScope.SIGN,\r\n             PermissionScope.THRESHOLD,\r\n           ]\r\n    });\r\n\r\n    // {\r\n    //   network: { type: NetworkType.DELPHINET },\r\n    //   scopes: [\r\n    //     PermissionScope.OPERATION_REQUEST,\r\n    //     PermissionScope.SIGN,\r\n    //     PermissionScope.THRESHOLD,\r\n    //   ],\r\n    // }\r\n\r\n    const _pkh = await wallet.getPKH();\r\n    setUserPkh(_pkh);\r\n  }, []);\r\n\r\n const disconnect = useCallback(async() => {\r\n    await wallet.client.removeAllAccounts();\r\n }, []);\r\n\r\n\r\n  return { connect, disconnect, pkh, Tezos };\r\n}\r\n","import { InputProps, Box, Text, InputGroup, InputLeftElement, Input } from '@chakra-ui/react';\r\nimport { AtSignIcon } from '@chakra-ui/icons';\r\nimport React from 'react';\r\n\r\nexport const ContractAddressInput: React.FC<InputProps> = (props) => (\r\n  <Box w=\"full\">\r\n    <Text size=\"sm\" align=\"left\" marginBottom=\"2\">Contract address:</Text>\r\n    <InputGroup>\r\n      <InputLeftElement children={<AtSignIcon />} />\r\n      <Input {...props} />\r\n    </InputGroup>\r\n  </Box>\r\n)","import { useState, useEffect } from \"react\";\r\n\r\nexport const usePendingPromise = <T extends unknown>(\r\n  fetcher: () => Promise<T>,\r\n  transformer?: (result: T) => any\r\n) => {\r\n  const [fetching, setFetching] = useState<boolean>();\r\n  const [error, setError] = useState<string>();\r\n  const [data, setStorage] = useState<string>();\r\n\r\n  useEffect(() => {\r\n    let isUnmounted = false;\r\n    (async () => {\r\n      try {\r\n        setFetching(true);\r\n        setError(undefined);\r\n\r\n        const result = await fetcher();\r\n        !isUnmounted && setStorage(transformer ? transformer(result) : result);\r\n      } catch (e) {\r\n        !isUnmounted &&\r\n          setError(\r\n            \"Something went wrong while fetching storage: \" + e.toString()\r\n          );\r\n      } finally {\r\n        !isUnmounted && setFetching(false);\r\n      }\r\n    })();\r\n\r\n    return () => {\r\n      isUnmounted = true;\r\n    };\r\n  }, [fetcher, transformer]);\r\n\r\n  return { fetching, error, data };\r\n};\r\n","import React from \"react\";\r\nimport { Spinner, SpinnerProps } from \"@chakra-ui/react\";\r\n\r\nexport const Preloader: React.FC<SpinnerProps> = (props) => (\r\n  <Spinner\r\n    thickness=\"4px\"\r\n    speed=\"0.65s\"\r\n    emptyColor=\"gray.200\"\r\n    color=\"blue.500\"\r\n    size=\"xl\"\r\n    alignSelf=\"center\"\r\n    {...props}\r\n  />\r\n);\r\n","import React, { useCallback } from \"react\";\r\nimport { Box, Textarea, Text } from \"@chakra-ui/react\";\r\nimport useBeacon from \"../hooks/useBeacon\";\r\nimport { usePendingPromise } from \"../hooks/usePendingPromise\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\nexport const ContractStorageInfo: React.FC<{ contractAddress: string }> = ({\r\n  contractAddress,\r\n}) => {\r\n  const { Tezos } = useBeacon();\r\n\r\n  const fetcher = useCallback(\r\n    async () => (await Tezos.contract.at(contractAddress)).storage(),\r\n    [Tezos.contract, contractAddress]\r\n  );\r\n\r\n  const { fetching, data: storage, error } = usePendingPromise(\r\n    fetcher,\r\n    JSON.stringify\r\n  );\r\n\r\n  return !fetching && (storage || error) ? (\r\n    <Box w=\"full\">\r\n      <Text size=\"sm\" align=\"left\" marginBottom=\"2\">\r\n        Contract storage:\r\n      </Text>\r\n      <Textarea readOnly defaultValue={error || storage} isInvalid={!!error} />\r\n    </Box>\r\n  ) : (\r\n    <Preloader />\r\n  );\r\n};\r\n","import { validateAddress } from \"@taquito/utils\";\r\n\r\nexport const validateTezosAddress = (addr: string) =>\r\n  validateAddress(addr) === 3;\r\n\r\nexport const validateContractAddress = (addr: string) =>\r\n  validateTezosAddress(addr) && addr.startsWith(\"KT1\");\r\n","import { Box, Textarea, Text } from \"@chakra-ui/react\";\r\nimport React, { useCallback } from \"react\";\r\nimport useBeacon from \"../hooks/useBeacon\";\r\nimport { usePendingPromise } from \"../hooks/usePendingPromise\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\nexport const ContractBalanceInfo: React.FC<{\r\n  contractAddress: string;\r\n  pkh: string;\r\n}> = ({ contractAddress, pkh }) => {\r\n  const { Tezos } = useBeacon();\r\n  const fetcher = useCallback(async () => {\r\n    const contract = await Tezos.contract.at(contractAddress);\r\n    return contract.views\r\n      .getBalance(pkh)\r\n      .read()\r\n      .catch(() => 0);\r\n  }, [contractAddress, pkh, Tezos.contract]);\r\n\r\n  const { fetching, data: balance, error } = usePendingPromise(fetcher);\r\n  return !fetching && (balance || error) ? (\r\n    <Box w=\"full\">\r\n      <Text size=\"sm\" align=\"left\" marginBottom=\"2\">\r\n        Balance for your account:\r\n      </Text>\r\n      <Textarea readOnly defaultValue={error || balance} isInvalid={!!error} />\r\n    </Box>\r\n  ) : (\r\n    <Preloader />\r\n  );\r\n};\r\n","import {\r\n  Box,\r\n  Button,\r\n  Input,\r\n  InputGroup,\r\n  InputRightElement,\r\n  Text,\r\n} from \"@chakra-ui/react\";\r\nimport React, { useCallback, useState } from \"react\";\r\nimport useBeacon from \"../hooks/useBeacon\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\nexport const ContractTransferForm: React.FC<{\r\n  contractAddress: string;\r\n  pkh: string;\r\n}> = ({ contractAddress, pkh }) => {\r\n  const { Tezos } = useBeacon();\r\n  const [amount, setAmount] = useState(\"10\");\r\n  const [to, setTo] = useState(\"\");\r\n  const [fetching, setFetching] = useState(false);\r\n\r\n  const handleClick = useCallback(async () => {\r\n    setFetching(true);\r\n    try {\r\n      const contract = await Tezos.wallet.at(contractAddress);\r\n      const op = await contract.methods\r\n        .transfer(pkh, to, Number(amount))\r\n        .send();\r\n\r\n      await op.confirmation(1);\r\n\r\n      alert(\"One confirmation has been received from the network!\");\r\n    } catch (e) {\r\n      console.error(e);\r\n    } finally {\r\n      setFetching(false);\r\n    }\r\n  }, [contractAddress, pkh, amount, to, setFetching, Tezos.wallet]);\r\n\r\n  return (\r\n    <Box w=\"full\">\r\n      <Text size=\"sm\" align=\"left\" marginBottom=\"2\">\r\n        Transfer:\r\n      </Text>\r\n      {!fetching ? (\r\n        <>\r\n          <Input\r\n            placeholder=\"tz1QLY8gCFzrezkqkQpHAHBRPvgtV9Z1KuML\"\r\n            value={to}\r\n            onChange={(e) => setTo(e.target.value)}\r\n            marginBottom=\"4\"\r\n          />\r\n          <InputGroup>\r\n            <InputRightElement\r\n              width=\"7rem\"\r\n              children={\r\n                <Button size=\"sm\" onClick={handleClick}>\r\n                  Transfer\r\n                </Button>\r\n              }\r\n            />\r\n            <Input\r\n              type=\"number\"\r\n              onChange={(e) => setAmount(e.target.value)}\r\n              value={amount}\r\n            />\r\n          </InputGroup>\r\n        </>\r\n      ) : (\r\n        <Preloader mx=\"auto\" d=\"block\" />\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, VStack, Text, Code, Divider } from \"@chakra-ui/react\";\r\n\r\nimport useBeacon from \"../hooks/useBeacon\";\r\nimport { ContractAddressInput } from \"./ContractAddressInput\";\r\nimport { ContractStorageInfo } from \"./ContractStorageInfo\";\r\nimport { validateContractAddress } from \"../utils\";\r\nimport { ContractBalanceInfo } from \"./ContractBalanceInfo\";\r\nimport { ContractTransferForm } from \"./ContractTransferForm\";\r\n\r\nconst AccountInfo: React.FC<{\r\n  pkh: string;\r\n}> = ({ pkh }) => (\r\n  <Text>\r\n    Your account: <Code>{pkh}</Code>\r\n  </Text>\r\n);\r\n\r\nexport function Dashboard() {\r\n  const { connect, pkh, disconnect } = useBeacon();\r\n  const [contractAddress, setContractAddress] = useState<string>(\r\n    \"KT19psPK1PZNMkaq8TuU1D77u7ipyFVQ3BmE\"\r\n  );\r\n  const [contractValid, setContractValid] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    setContractValid(validateContractAddress(contractAddress));\r\n  }, [contractAddress]);\r\n\r\n  \r\n  return (\r\n    <div className=\"text-center\">\r\n      {!pkh ? (\r\n        <Button className=\"btn btn-primary submit-btn\" onClick={connect}>\r\n          Connect wallet\r\n        </Button>\r\n      ) : (\r\n        <>\r\n          <Button className=\"btn btn-primary submit-btn\" variant=\"outline\" onClick={disconnect}>\r\n            Disconnect wallet\r\n          </Button>\r\n\r\n          <AccountInfo pkh={pkh} />\r\n          <Divider />\r\n          <ContractAddressInput\r\n            value={contractAddress}\r\n            onChange={(e) => setContractAddress(e.target.value)}\r\n            isInvalid={!contractValid}\r\n          />\r\n          {contractValid && contractAddress && (\r\n            <>\r\n              <ContractStorageInfo contractAddress={contractAddress} />\r\n              <ContractBalanceInfo contractAddress={contractAddress} pkh={pkh} />\r\n              <ContractTransferForm contractAddress={contractAddress} pkh={pkh} />\r\n            </>\r\n          )}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import { useCallback, useState } from \"react\";\r\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\r\n\r\nimport { TezosToolkit } from \"@taquito/taquito\";\r\nimport { NetworkType, PermissionScope } from \"@airgap/beacon-sdk\";\r\n  \r\n  import {NETWORK_ADDRESS, TREASURY_CONTRACT_ADDRESS, BOND_CONTRACT_ADDRESS, NETWORK_TYPE, LP_TOKEN_CONTRACT_ADDRESS, LP_TOKEN}\r\n   from '../../config/index';\r\n\r\nconst options = {\r\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\r\n  network: {\r\n    type: NETWORK_TYPE,\r\n  }\r\n};\r\n\r\nexport default function useBonds() {\r\n  let myAddress: string | undefined;\r\n\r\n  const buyBond = useCallback(async () => {\r\n      // alert('Waiting for back-end');\r\n      \r\n      const bondPrice = 1;\r\n      const LpToken = LP_TOKEN;\r\n      const LpTokenAmount = 1000;\r\n      const Slippage = 0.5;\r\n\r\n      const Tezos = new TezosToolkit(NETWORK_ADDRESS);\r\n      const wallet = new BeaconWallet(options);\r\n\r\n      const activeAccount = await wallet.client.getActiveAccount();\r\n      if (activeAccount && false) {\r\n\r\n        console.log(\"Already connected:\", activeAccount.address);\r\n        myAddress = activeAccount.address;\r\n        //const permissions = await wallet.client.requestPermissions(options);\r\n\r\n      } else {\r\n        await wallet.requestPermissions(options);\r\n        myAddress = await wallet.getPKH();\r\n        console.log(\"New connection:\", myAddress);\r\n      }\r\n\r\n      Tezos.setWalletProvider(wallet);\r\n\r\n      // Tezos.wallet.at(LP_TOKEN_CONTRACT_ADDRESS).then(contract => {\r\n      //   return contract.methods.approve(TREASURY_CONTRACT_ADDRESS, LpTokenAmount).send({from: myAddress});\r\n      // } );\r\n\r\n      Tezos.wallet.at(BOND_CONTRACT_ADDRESS).then(contract => {\r\n        // bond_price_requested_in_usd: bondPrice, lp_token : LpToken, \r\n        //   lp_token_amount: LpTokenAmount, slippage: Slippage\r\n        return contract.methods.order(bondPrice, LpTokenAmount, LpToken, Slippage).send({from: myAddress});\r\n          } );\r\n\r\n\r\n      // const batch = await Tezos.wallet.batch()\r\n      //   .withContractCall(contract.methods.interact('defaul'))\r\n      //   .withContractCall(contract.methods.wait([['unit']]));\r\n\r\n      // const batchOp = await batch.send();\r\n      // console.log('Operation hash:', batchOp.hash);\r\n      // await batchOp.confirmation();\r\n  }, []);\r\n\r\n\r\n\r\n  return { buyBond };\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Button, Link, VStack, Text, Code, Divider } from \"@chakra-ui/react\";\r\nimport './BuyBond.css';\r\nimport useBonds from './hooks';\r\n\r\nexport function BuyBond() {\r\n  const { buyBond } = useBonds();\r\n\r\n  return (\r\n    <>\r\n       <div className=\"content\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-lg-12\">\r\n\t\t\t\t\t\t<div className=\"crypto-exchange buy-form\">\r\n\t\t\t\t\t\t\t<div className=\"\">\r\n\t\t\t\t\t\t\t\t<div className=\"card-title text-center\">\r\n\t\t\t\t\t\t\t\t\t<h4 className=\"text-primary\">Bond: PLENTY-QUIPU LP</h4>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n                <div>\r\n                <div className=\"row\">\r\n                      <div className=\"col-lg-6 text-center card-title\">\r\n                        <h4  className=\"text-primary\">Bond Price</h4>\r\n                        <h2 className=\"text-primary\">$3.03</h2>\r\n                      </div>\r\n                      <div className=\"col-lg-6 text-center card-title\">\r\n                        <h4  className=\"text-primary\">Market Price</h4>\r\n                        <h2 className=\"text-primary\">$3.01</h2>\r\n                      </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n\t\t\t\t\t\t\t\t<div className=\"row\">\r\n               \r\n\r\n\r\n\t\t\t\t\t\t\t\t\t<div className=\"col-lg-12 \">\r\n\t\t\t\t\t\t\t\t\t\t<div className=\"exchange-form\">\r\n\t\t\t\t\t\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"form-row \">\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t<div className=\"col-lg-6 col-md-12 offset-lg-3\">\r\n                          <Button className=\"btn btn-primary btn-lg btn-block\" onClick={buyBond}>\r\n                            Buy\r\n                          </Button>\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t\t\t</form>\r\n\t\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t</div>\r\n\r\n              <div className=\"row\">\r\n              <div className=\"col-lg-12 details-contatiner\">\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-6 \">Your Balance</div>\r\n                      <div className=\"col-lg-6 text-right\">0 PLENTY-QUIPU LP\r\n                        <div><a href='https://www.plentydefi.com/liquidity?tokenB=QUIPU' target=\"_blank\" className='gray-link'>Buy PLENTY-QUIPU LP token</a></div>\r\n                      </div>\r\n\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-6 \">Duration</div>\r\n                      <div className=\"col-lg-6 text-right\">5 days</div>\r\n                    </div>\r\n                    <div className=\"row\">\r\n                      <div className=\"col-lg-6 \">ROI</div>\r\n                      <div className=\"col-lg-6 text-right\">3%</div>\r\n                    </div>\r\n                    \r\n                  </div>\r\n              </div>\r\n\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Dashboard } from \"../Dashboard\";\r\nimport {BuyBond} from \"../Bonds/BuyBond\";\r\n\r\nimport {\r\n  BrowserRouter as Router,\r\n  Routes ,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './Layout.css';\r\n\r\n\r\nexport function Layout() {\r\n\r\n  \r\n  return (\r\n    <>\r\n    <Router>\r\n       <link\r\n  rel=\"stylesheet\"\r\n  href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\"\r\n  integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\"\r\n/>\r\n\r\n    <div className=\"main-wrapper\">\r\n      {/* Header */}\r\n      <div className=\"header\">\r\n        <div className=\"header-left\">\r\n          <a href=\"index.html\" className=\"logo\">\r\n            <img src=\"assets/img/logo.png\" width={35} height={35} alt=\"\" />{\" \"}\r\n            <span>Falcon Heavy</span>\r\n          </a>\r\n        </div>\r\n      </div>\r\n      {/* /Header */}\r\n\r\n      {/* Sidebar */}\r\n      <div className=\"sidebar\" id=\"sidebar\">\r\n        <div className=\"sidebar-inner slimscroll\">\r\n          <div id=\"sidebar-menu\" className=\"sidebar-menu\">\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/\">Dashboard</Link>\r\n              </li>\r\n              <li >\r\n                <Link to=\"/buy-bond\">Buy bond</Link>\r\n              </li>\r\n          \r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* /Sidebar */}\r\n\r\n      {/* Content */}\r\n      <div className=\"page-wrapper exchange-wrapper bg-wrapper\">\r\n        <div className=\"content\">\r\n          <div className=\"row\">\r\n            <div className=\"col-lg-12\">\r\n            <Routes >\r\n                <Route path=\"/buy-bond\"  element={<BuyBond/>}>\r\n                </Route>\r\n                <Route path=\"/users\">\r\n                  <>users</>\r\n\r\n                </Route>\r\n                <Route path=\"/\" element={<Dashboard/>}>\r\n                </Route>\r\n           </Routes >\r\n            \r\n            </div>\r\n          </div>\r\n        </div>\r\n     \r\n      </div>\r\n    </div>\r\n    </Router>\r\n  </>\r\n );\r\n}\r\n","import * as React from \"react\";\r\nimport { ChakraProvider, Box, VStack, Grid, theme } from \"@chakra-ui/react\";\r\nimport { ColorModeSwitcher } from \"./ColorModeSwitcher\";\r\nimport { Layout } from \"./components/Layout/Layout\";\r\n\r\nimport { Logo } from \"./Logo\";\r\n\r\nexport const App = () => (\r\n  <ChakraProvider theme={theme}>\r\n    <Box fontSize=\"xl\">\r\n      <Grid minH=\"100vh\" p={3}>\r\n        <ColorModeSwitcher justifySelf=\"flex-end\" />\r\n        <VStack spacing={8}>\r\n          <Layout />\r\n        </VStack>\r\n      </Grid>\r\n    </Box>\r\n  </ChakraProvider>\r\n);\r\n","import { ReportHandler } from \"web-vitals\"\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry)\r\n      getFID(onPerfEntry)\r\n      getFCP(onPerfEntry)\r\n      getLCP(onPerfEntry)\r\n      getTTFB(onPerfEntry)\r\n    })\r\n  }\r\n}\r\n\r\nexport default reportWebVitals\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\r\n    ),\r\n)\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\r\n}\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config)\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://cra.link/PWA\",\r\n          )\r\n        })\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing\r\n        if (installingWorker == null) {\r\n          return\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://cra.link/PWA.\",\r\n              )\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration)\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It is the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\")\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error)\r\n    })\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\")\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload()\r\n          })\r\n        })\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config)\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\",\r\n      )\r\n    })\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister()\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message)\r\n      })\r\n  }\r\n}\r\n","import { ColorModeScript } from \"@chakra-ui/react\"\r\nimport * as React from \"react\"\r\nimport ReactDOM from \"react-dom\"\r\nimport { App } from \"./App\"\r\nimport reportWebVitals from \"./reportWebVitals\"\r\nimport * as serviceWorker from \"./serviceWorker\"\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <ColorModeScript />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\"),\r\n)\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorker.unregister()\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals()\r\n"],"sourceRoot":""}