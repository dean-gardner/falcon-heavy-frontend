{"ast":null,"code":"import * as React from \"react\";\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\";\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\n\nexport function useDimensions(ref, observe) {\n  var [dimensions, setDimensions] = React.useState(null);\n  var rafId = React.useRef();\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined;\n    var node = ref.current;\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        var boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n\n    measure();\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [ref, observe]);\n  return dimensions;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,MAAT,QAAuB,kBAAvB;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,OAA5B,EAAqC;AAC1C,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BP,KAAK,CAACQ,QAAN,CAAe,IAAf,CAAlC;AACA,MAAIC,KAAK,GAAGT,KAAK,CAACU,MAAN,EAAZ;AACAR,qBAAmB,CAAC,MAAM;AACxB,QAAI,CAACE,GAAG,CAACO,OAAT,EAAkB,OAAOC,SAAP;AAClB,QAAIC,IAAI,GAAGT,GAAG,CAACO,OAAf;;AAEA,aAASG,OAAT,GAAmB;AACjBL,WAAK,CAACE,OAAN,GAAgBI,qBAAqB,CAAC,MAAM;AAC1C,YAAIC,QAAQ,GAAGf,MAAM,CAACY,IAAD,CAArB;AACAN,qBAAa,CAACS,QAAD,CAAb;AACD,OAHoC,CAArC;AAID;;AAEDF,WAAO;;AAEP,QAAIT,OAAJ,EAAa;AACXY,YAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,OAAlC;AACAG,YAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCJ,OAAlC;AACD;;AAED,WAAO,MAAM;AACX,UAAIT,OAAJ,EAAa;AACXY,cAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCL,OAArC;AACAG,cAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCL,OAArC;AACD;;AAED,UAAIL,KAAK,CAACE,OAAV,EAAmB;AACjBS,4BAAoB,CAACX,KAAK,CAACE,OAAP,CAApB;AACD;AACF,KATD;AAUD,GA5BkB,EA4BhB,CAACP,GAAD,EAAMC,OAAN,CA5BgB,CAAnB;AA6BA,SAAOC,UAAP;AACD","names":["React","getBox","useSafeLayoutEffect","useDimensions","ref","observe","dimensions","setDimensions","useState","rafId","useRef","current","undefined","node","measure","requestAnimationFrame","boxModel","window","addEventListener","removeEventListener","cancelAnimationFrame"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-dimensions.js"],"sourcesContent":["import * as React from \"react\";\nimport { getBox } from \"@chakra-ui/utils\";\nimport { useSafeLayoutEffect } from \"./use-safe-layout-effect\";\n/**\n * Reack hook to measure a component's dimensions\n *\n * @param ref ref of the component to measure\n * @param observe if `true`, resize and scroll observers will be turned on\n */\n\nexport function useDimensions(ref, observe) {\n  var [dimensions, setDimensions] = React.useState(null);\n  var rafId = React.useRef();\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return undefined;\n    var node = ref.current;\n\n    function measure() {\n      rafId.current = requestAnimationFrame(() => {\n        var boxModel = getBox(node);\n        setDimensions(boxModel);\n      });\n    }\n\n    measure();\n\n    if (observe) {\n      window.addEventListener(\"resize\", measure);\n      window.addEventListener(\"scroll\", measure);\n    }\n\n    return () => {\n      if (observe) {\n        window.removeEventListener(\"resize\", measure);\n        window.removeEventListener(\"scroll\", measure);\n      }\n\n      if (rafId.current) {\n        cancelAnimationFrame(rafId.current);\n      }\n    };\n  }, [ref, observe]);\n  return dimensions;\n}\n//# sourceMappingURL=use-dimensions.js.map"]},"metadata":{},"sourceType":"module"}