{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useState, useCallback } from \"react\";\nimport { useControllableProp } from \"@chakra-ui/hooks\";\nimport { isInputEvent, addItem, removeItem } from \"@chakra-ui/utils\";\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\n\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n    isNative\n  } = props;\n  var [valueState, setValue] = useState(defaultValue || []);\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var updateValue = useCallback(nextState => {\n    if (!isControlled) {\n      setValue(nextState);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(nextState);\n  }, [isControlled, onChangeProp]);\n  var onChange = useCallback(eventOrValue => {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    updateValue(nextValue);\n  }, [updateValue, value]);\n  return {\n    value,\n    onChange,\n    setValue: updateValue,\n    getCheckboxProps: function getCheckboxProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      var checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return _extends({}, props, {\n        [checkedKey]: value.includes(props.value),\n        onChange\n      });\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","useState","useCallback","useControllableProp","isInputEvent","addItem","removeItem","useCheckboxGroup","props","defaultValue","value","valueProp","onChange","onChangeProp","isNative","valueState","setValue","isControlled","updateValue","nextState","eventOrValue","isChecked","checked","includes","selectedValue","nextValue","getCheckboxProps","checkedKey"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/checkbox/dist/esm/use-checkbox-group.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useState, useCallback } from \"react\";\nimport { useControllableProp } from \"@chakra-ui/hooks\";\nimport { isInputEvent, addItem, removeItem } from \"@chakra-ui/utils\";\n\n/**\n * React hook that provides all the state management logic\n * for a group of checkboxes.\n *\n * It is consumed by the `CheckboxGroup` component\n */\nexport function useCheckboxGroup(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultValue,\n    value: valueProp,\n    onChange: onChangeProp,\n    isNative\n  } = props;\n  var [valueState, setValue] = useState(defaultValue || []);\n  var [isControlled, value] = useControllableProp(valueProp, valueState);\n  var updateValue = useCallback(nextState => {\n    if (!isControlled) {\n      setValue(nextState);\n    }\n\n    onChangeProp == null ? void 0 : onChangeProp(nextState);\n  }, [isControlled, onChangeProp]);\n  var onChange = useCallback(eventOrValue => {\n    if (!value) return;\n    var isChecked = isInputEvent(eventOrValue) ? eventOrValue.target.checked : !value.includes(eventOrValue);\n    var selectedValue = isInputEvent(eventOrValue) ? eventOrValue.target.value : eventOrValue;\n    var nextValue = isChecked ? addItem(value, selectedValue) : removeItem(value, selectedValue);\n    updateValue(nextValue);\n  }, [updateValue, value]);\n  return {\n    value,\n    onChange,\n    setValue: updateValue,\n    getCheckboxProps: function getCheckboxProps(props) {\n      if (props === void 0) {\n        props = {};\n      }\n\n      var checkedKey = isNative ? \"checked\" : \"isChecked\";\n      return _extends({}, props, {\n        [checkedKey]: value.includes(props.value),\n        onChange\n      });\n    }\n  };\n}\n//# sourceMappingURL=use-checkbox-group.js.map"]},"metadata":{},"sourceType":"module"}