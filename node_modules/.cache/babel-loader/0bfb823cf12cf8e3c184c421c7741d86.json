{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlContext } from \"./form-control\";\nexport function useFieldLabel(props) {\n  var _props$id, _props$htmlFor;\n\n  var field = useFormControlContext();\n  return _extends({}, props, {\n    \"data-focus\": dataAttr(field == null ? void 0 : field.isFocused),\n    \"data-disabled\": dataAttr(field == null ? void 0 : field.isDisabled),\n    \"data-invalid\": dataAttr(field == null ? void 0 : field.isInvalid),\n    \"data-loading\": dataAttr(field == null ? void 0 : field.isLoading),\n    \"data-readonly\": dataAttr(field == null ? void 0 : field.isReadOnly),\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.labelId,\n    htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : field == null ? void 0 : field.id\n  });\n}\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\n\nexport var FormLabel = /*#__PURE__*/forwardRef(function FormLabel(passedProps, ref) {\n  var styles = useStyleConfig(\"FormLabel\", passedProps);\n  var props = omitThemingProps(passedProps);\n\n  var {\n    children,\n    requiredIndicator = /*#__PURE__*/React.createElement(RequiredIndicator, null)\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"requiredIndicator\"]);\n\n  var ownProps = useFieldLabel(rest);\n  var field = useFormControlContext();\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    ref: ref,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"left\"\n    }, styles)\n  }, ownProps), children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : null);\n});\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\n\n\nexport var RequiredIndicator = /*#__PURE__*/forwardRef(function RequiredIndicator(props, ref) {\n  var {\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n\n  var _className = cx(\"chakra-form__required-indicator\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    ref: ref\n  }, rest, {\n    __css: styles.requiredIndicator,\n    className: _className\n  }), children || \"*\");\n});\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}","map":{"version":3,"mappings":"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","names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","chakra","forwardRef","omitThemingProps","useStyleConfig","useStyles","cx","dataAttr","__DEV__","React","useFormControlContext","useFieldLabel","props","_props$id","_props$htmlFor","field","isFocused","isDisabled","isInvalid","isLoading","isReadOnly","id","labelId","htmlFor","FormLabel","passedProps","ref","styles","children","requiredIndicator","createElement","RequiredIndicator","rest","ownProps","label","className","__css","display","textAlign","isRequired","displayName","_className","span","role"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/form-control/dist/esm/form-label.js"],"sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { cx, dataAttr, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useFormControlContext } from \"./form-control\";\nexport function useFieldLabel(props) {\n  var _props$id, _props$htmlFor;\n\n  var field = useFormControlContext();\n  return _extends({}, props, {\n    \"data-focus\": dataAttr(field == null ? void 0 : field.isFocused),\n    \"data-disabled\": dataAttr(field == null ? void 0 : field.isDisabled),\n    \"data-invalid\": dataAttr(field == null ? void 0 : field.isInvalid),\n    \"data-loading\": dataAttr(field == null ? void 0 : field.isLoading),\n    \"data-readonly\": dataAttr(field == null ? void 0 : field.isReadOnly),\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.labelId,\n    htmlFor: (_props$htmlFor = props.htmlFor) != null ? _props$htmlFor : field == null ? void 0 : field.id\n  });\n}\n\n/**\n * Used to enhance the usability of form controls.\n *\n * It is used to inform users as to what information\n * is requested for a form field.\n *\n * ♿️ Accessibility: Every form field should have a form label.\n */\nexport var FormLabel = /*#__PURE__*/forwardRef(function FormLabel(passedProps, ref) {\n  var styles = useStyleConfig(\"FormLabel\", passedProps);\n  var props = omitThemingProps(passedProps);\n\n  var {\n    children,\n    requiredIndicator = /*#__PURE__*/React.createElement(RequiredIndicator, null)\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\", \"requiredIndicator\"]);\n\n  var ownProps = useFieldLabel(rest);\n  var field = useFormControlContext();\n  return /*#__PURE__*/React.createElement(chakra.label, _extends({\n    ref: ref,\n    className: cx(\"chakra-form__label\", props.className),\n    __css: _extends({\n      display: \"block\",\n      textAlign: \"left\"\n    }, styles)\n  }, ownProps), children, (field == null ? void 0 : field.isRequired) ? requiredIndicator : null);\n});\n\nif (__DEV__) {\n  FormLabel.displayName = \"FormLabel\";\n}\n\n/**\n * Used to show a \"required\" text or an asterisks (*) to indicate that\n * a field is required.\n */\nexport var RequiredIndicator = /*#__PURE__*/forwardRef(function RequiredIndicator(props, ref) {\n  var {\n    children,\n    className\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"children\", \"className\"]);\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  if (!(field == null ? void 0 : field.isRequired)) return null;\n\n  var _className = cx(\"chakra-form__required-indicator\", className);\n\n  return /*#__PURE__*/React.createElement(chakra.span, _extends({\n    role: \"presentation\",\n    \"aria-hidden\": true,\n    ref: ref\n  }, rest, {\n    __css: styles.requiredIndicator,\n    className: _className\n  }), children || \"*\");\n});\n\nif (__DEV__) {\n  RequiredIndicator.displayName = \"RequiredIndicator\";\n}\n//# sourceMappingURL=form-label.js.map"]},"metadata":{},"sourceType":"module"}