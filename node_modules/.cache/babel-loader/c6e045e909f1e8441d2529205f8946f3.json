{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\";\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { useTooltip } from \"./use-tooltip\";\nvar StyledTooltip = chakra(motion.div);\nvar scaleVariants = {\n  exit: {\n    scale: 0.85,\n    opacity: 0,\n    transition: {\n      opacity: {\n        duration: 0.15,\n        easings: \"easeInOut\"\n      },\n      scale: {\n        duration: 0.2,\n        easings: \"easeInOut\"\n      }\n    }\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      opacity: {\n        easings: \"easeOut\",\n        duration: 0.2\n      },\n      scale: {\n        duration: 0.2,\n        ease: [0.175, 0.885, 0.4, 1.1]\n      }\n    }\n  }\n};\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\n\nexport var Tooltip = /*#__PURE__*/forwardRef(function Tooltip(props, ref) {\n  var styles = useStyleConfig(\"Tooltip\", props);\n  var ownProps = omitThemingProps(props);\n\n  var {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg\n  } = ownProps,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"children\", \"label\", \"shouldWrapChildren\", \"aria-label\", \"hasArrow\", \"bg\"]);\n\n  if (bg) {\n    styles.bg = bg;\n  }\n\n  var tooltip = useTooltip(rest);\n  var shouldWrap = isString(children) || shouldWrapChildren;\n  var trigger;\n\n  if (shouldWrap) {\n    trigger = /*#__PURE__*/React.createElement(chakra.span, _extends({\n      tabIndex: 0\n    }, tooltip.getTriggerProps()), children);\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    var child = React.Children.only(children);\n    trigger = /*#__PURE__*/React.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));\n  }\n\n  var hasAriaLabel = !!ariaLabel;\n\n  var _tooltipProps = tooltip.getTooltipProps({}, ref);\n\n  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  var hiddenProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n\n  if (!label) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, trigger, /*#__PURE__*/React.createElement(AnimatePresence, null, tooltip.isOpen && /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(chakra.div, _extends({}, tooltip.getTooltipPositionerProps(), {\n    __css: {\n      zIndex: styles.zIndex\n    }\n  }), /*#__PURE__*/React.createElement(StyledTooltip, _extends({\n    variants: scaleVariants\n  }, tooltipProps, {\n    initial: \"exit\",\n    animate: \"enter\",\n    exit: \"exit\",\n    __css: styles\n  }), label, hasAriaLabel && /*#__PURE__*/React.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow-wrapper\"\n  }, tooltip.getArrowWrapperProps()), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow\"\n  }, tooltip.getArrowProps(), {\n    __css: {\n      bg: styles.bg\n    }\n  }))))))));\n});\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\";\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","Portal","chakra","forwardRef","omitThemingProps","useStyleConfig","isString","omit","pick","__DEV__","VisuallyHidden","AnimatePresence","motion","React","useTooltip","StyledTooltip","div","scaleVariants","exit","scale","opacity","transition","duration","easings","enter","ease","Tooltip","props","ref","styles","ownProps","children","label","shouldWrapChildren","ariaLabel","hasArrow","bg","rest","tooltip","shouldWrap","trigger","createElement","span","tabIndex","getTriggerProps","child","Children","only","cloneElement","hasAriaLabel","_tooltipProps","getTooltipProps","tooltipProps","hiddenProps","Fragment","isOpen","getTooltipPositionerProps","__css","zIndex","variants","initial","animate","className","getArrowWrapperProps","getArrowProps","displayName"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/tooltip/dist/esm/tooltip.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { Portal } from \"@chakra-ui/portal\";\nimport { chakra, forwardRef, omitThemingProps, useStyleConfig } from \"@chakra-ui/system\";\nimport { isString, omit, pick, __DEV__ } from \"@chakra-ui/utils\";\nimport { VisuallyHidden } from \"@chakra-ui/visually-hidden\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport * as React from \"react\";\nimport { useTooltip } from \"./use-tooltip\";\nvar StyledTooltip = chakra(motion.div);\nvar scaleVariants = {\n  exit: {\n    scale: 0.85,\n    opacity: 0,\n    transition: {\n      opacity: {\n        duration: 0.15,\n        easings: \"easeInOut\"\n      },\n      scale: {\n        duration: 0.2,\n        easings: \"easeInOut\"\n      }\n    }\n  },\n  enter: {\n    scale: 1,\n    opacity: 1,\n    transition: {\n      opacity: {\n        easings: \"easeOut\",\n        duration: 0.2\n      },\n      scale: {\n        duration: 0.2,\n        ease: [0.175, 0.885, 0.4, 1.1]\n      }\n    }\n  }\n};\n/**\n * Tooltips display informative text when users hover, focus on, or tap an element.\n *\n * @see Docs     https://chakra-ui.com/components/tooltip\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices/#tooltip\n */\n\nexport var Tooltip = /*#__PURE__*/forwardRef(function Tooltip(props, ref) {\n  var styles = useStyleConfig(\"Tooltip\", props);\n  var ownProps = omitThemingProps(props);\n\n  var {\n    children,\n    label,\n    shouldWrapChildren,\n    \"aria-label\": ariaLabel,\n    hasArrow,\n    bg\n  } = ownProps,\n      rest = _objectWithoutPropertiesLoose(ownProps, [\"children\", \"label\", \"shouldWrapChildren\", \"aria-label\", \"hasArrow\", \"bg\"]);\n\n  if (bg) {\n    styles.bg = bg;\n  }\n\n  var tooltip = useTooltip(rest);\n  var shouldWrap = isString(children) || shouldWrapChildren;\n  var trigger;\n\n  if (shouldWrap) {\n    trigger = /*#__PURE__*/React.createElement(chakra.span, _extends({\n      tabIndex: 0\n    }, tooltip.getTriggerProps()), children);\n  } else {\n    /**\n     * Ensure tooltip has only one child node\n     */\n    var child = React.Children.only(children);\n    trigger = /*#__PURE__*/React.cloneElement(child, tooltip.getTriggerProps(child.props, child.ref));\n  }\n\n  var hasAriaLabel = !!ariaLabel;\n\n  var _tooltipProps = tooltip.getTooltipProps({}, ref);\n\n  var tooltipProps = hasAriaLabel ? omit(_tooltipProps, [\"role\", \"id\"]) : _tooltipProps;\n  var hiddenProps = pick(_tooltipProps, [\"role\", \"id\"]);\n  /**\n   * If the `label` is empty, there's no\n   * point showing the tooltip. Let's simply return back the children\n   */\n\n  if (!label) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, children);\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, trigger, /*#__PURE__*/React.createElement(AnimatePresence, null, tooltip.isOpen && /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(chakra.div, _extends({}, tooltip.getTooltipPositionerProps(), {\n    __css: {\n      zIndex: styles.zIndex\n    }\n  }), /*#__PURE__*/React.createElement(StyledTooltip, _extends({\n    variants: scaleVariants\n  }, tooltipProps, {\n    initial: \"exit\",\n    animate: \"enter\",\n    exit: \"exit\",\n    __css: styles\n  }), label, hasAriaLabel && /*#__PURE__*/React.createElement(VisuallyHidden, hiddenProps, ariaLabel), hasArrow && /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow-wrapper\"\n  }, tooltip.getArrowWrapperProps()), /*#__PURE__*/React.createElement(chakra.div, _extends({\n    className: \"chakra-tooltip__arrow\"\n  }, tooltip.getArrowProps(), {\n    __css: {\n      bg: styles.bg\n    }\n  }))))))));\n});\n\nif (__DEV__) {\n  Tooltip.displayName = \"Tooltip\";\n}\n//# sourceMappingURL=tooltip.js.map"]},"metadata":{},"sourceType":"module"}