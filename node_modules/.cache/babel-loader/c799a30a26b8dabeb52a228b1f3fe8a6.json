{"ast":null,"code":"import qrcode from 'qrcode-generator';\nexport const getQrData = (payload, type) => {\n  const typeNumber = 0;\n  const errorCorrectionLevel = 'L';\n  const qr = qrcode(typeNumber, errorCorrectionLevel);\n\n  try {\n    qr.addData(payload);\n    qr.make();\n\n    if (type === 'svg') {\n      return qr.createSvgTag();\n    } else if (type === 'ascii') {\n      const length = qr.getModuleCount();\n      const black = '\\x1B[40m  \\x1B[0m';\n      const white = '\\x1B[47m  \\x1B[0m';\n      const whiteLine = new Array(length + 3).join(white);\n      const blackLine = new Array(length + 3).join(black);\n      let ascii = '';\n      ascii += `${blackLine}\\n`;\n      ascii += `${whiteLine}\\n`;\n\n      for (let x = 0; x < length; x++) {\n        ascii += white;\n\n        for (let y = 0; y < length; y++) {\n          ascii += qr.isDark(x, y) ? black : white;\n        }\n\n        ascii += `${white}\\n`;\n      }\n\n      ascii += whiteLine;\n      ascii += blackLine;\n      return ascii;\n    } else {\n      return qr.createDataURL();\n    }\n  } catch (qrError) {\n    console.error('error', qrError);\n    throw qrError;\n  }\n};","map":{"version":3,"mappings":"AAAA,OAAOA,MAAP,MAAmB,kBAAnB;AACA,OAAO,MAAMC,SAAS,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACxC,QAAMC,UAAU,GAAG,CAAnB;AACA,QAAMC,oBAAoB,GAAG,GAA7B;AACA,QAAMC,EAAE,GAAGN,MAAM,CAACI,UAAD,EAAaC,oBAAb,CAAjB;;AACA,MAAI;AACAC,MAAE,CAACC,OAAH,CAAWL,OAAX;AACAI,MAAE,CAACE,IAAH;;AACA,QAAIL,IAAI,KAAK,KAAb,EAAoB;AAChB,aAAOG,EAAE,CAACG,YAAH,EAAP;AACH,KAFD,MAGK,IAAIN,IAAI,KAAK,OAAb,EAAsB;AACvB,YAAMO,MAAM,GAAGJ,EAAE,CAACK,cAAH,EAAf;AACA,YAAMC,KAAK,GAAG,mBAAd;AACA,YAAMC,KAAK,GAAG,mBAAd;AACA,YAAMC,SAAS,GAAG,IAAIC,KAAJ,CAAUL,MAAM,GAAG,CAAnB,EAAsBM,IAAtB,CAA2BH,KAA3B,CAAlB;AACA,YAAMI,SAAS,GAAG,IAAIF,KAAJ,CAAUL,MAAM,GAAG,CAAnB,EAAsBM,IAAtB,CAA2BJ,KAA3B,CAAlB;AACA,UAAIM,KAAK,GAAG,EAAZ;AACAA,WAAK,IAAK,GAAED,SAAU,IAAtB;AACAC,WAAK,IAAK,GAAEJ,SAAU,IAAtB;;AACA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAApB,EAA4BS,CAAC,EAA7B,EAAiC;AAC7BD,aAAK,IAAIL,KAAT;;AACA,aAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAApB,EAA4BU,CAAC,EAA7B,EAAiC;AAC7BF,eAAK,IAAIZ,EAAE,CAACe,MAAH,CAAUF,CAAV,EAAaC,CAAb,IAAkBR,KAAlB,GAA0BC,KAAnC;AACH;;AACDK,aAAK,IAAK,GAAEL,KAAM,IAAlB;AACH;;AACDK,WAAK,IAAIJ,SAAT;AACAI,WAAK,IAAID,SAAT;AACA,aAAOC,KAAP;AACH,KAnBI,MAoBA;AACD,aAAOZ,EAAE,CAACgB,aAAH,EAAP;AACH;AACJ,GA7BD,CA8BA,OAAOC,OAAP,EAAgB;AACZC,WAAO,CAACC,KAAR,CAAc,OAAd,EAAuBF,OAAvB;AACA,UAAMA,OAAN;AACH;AACJ,CAtCM","names":["qrcode","getQrData","payload","type","typeNumber","errorCorrectionLevel","qr","addData","make","createSvgTag","length","getModuleCount","black","white","whiteLine","Array","join","blackLine","ascii","x","y","isDark","createDataURL","qrError","console","error"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/utils/qr.js"],"sourcesContent":["import qrcode from 'qrcode-generator';\nexport const getQrData = (payload, type) => {\n    const typeNumber = 0;\n    const errorCorrectionLevel = 'L';\n    const qr = qrcode(typeNumber, errorCorrectionLevel);\n    try {\n        qr.addData(payload);\n        qr.make();\n        if (type === 'svg') {\n            return qr.createSvgTag();\n        }\n        else if (type === 'ascii') {\n            const length = qr.getModuleCount();\n            const black = '\\x1B[40m  \\x1B[0m';\n            const white = '\\x1B[47m  \\x1B[0m';\n            const whiteLine = new Array(length + 3).join(white);\n            const blackLine = new Array(length + 3).join(black);\n            let ascii = '';\n            ascii += `${blackLine}\\n`;\n            ascii += `${whiteLine}\\n`;\n            for (let x = 0; x < length; x++) {\n                ascii += white;\n                for (let y = 0; y < length; y++) {\n                    ascii += qr.isDark(x, y) ? black : white;\n                }\n                ascii += `${white}\\n`;\n            }\n            ascii += whiteLine;\n            ascii += blackLine;\n            return ascii;\n        }\n        else {\n            return qr.createDataURL();\n        }\n    }\n    catch (qrError) {\n        console.error('error', qrError);\n        throw qrError;\n    }\n};\n//# sourceMappingURL=qr.js.map"]},"metadata":{},"sourceType":"module"}