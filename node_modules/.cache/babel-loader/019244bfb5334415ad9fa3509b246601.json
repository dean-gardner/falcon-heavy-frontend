{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\n\nvar Toast = props => {\n  var {\n    status,\n    variant,\n    id,\n    title,\n    isClosable,\n    onClose,\n    description\n  } = props;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingRight: 8,\n    textAlign: \"left\",\n    width: \"auto\"\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    right: 1,\n    top: 1\n  }));\n};\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions\n  } = _temp === void 0 ? defaultStandaloneParam : _temp;\n\n  var renderWithProviders = (props, options) => /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: {\n      colorMode,\n      setColorMode,\n      toggleColorMode\n    }\n  }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n\n  var toastImpl = options => {\n    var opts = _extends({}, defaultOptions, options);\n\n    var Message = props => renderWithProviders(props, opts);\n\n    return toast.notify(Message, opts);\n  };\n\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = (id, options) => {\n    if (!id) return;\n\n    var opts = _extends({}, defaultOptions, options);\n\n    toast.update(id, _extends({}, opts, {\n      message: props => renderWithProviders(props, opts)\n    }));\n  };\n\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var {\n    theme,\n    setColorMode,\n    toggleColorMode,\n    colorMode\n  } = useChakra();\n  return React.useMemo(() => createStandaloneToast({\n    theme,\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    defaultOptions: options\n  }), [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","Alert","AlertDescription","AlertIcon","AlertTitle","CloseButton","chakra","ColorModeContext","ThemeProvider","useChakra","defaultTheme","isFunction","noop","React","toast","Toast","props","status","variant","id","title","isClosable","onClose","description","createElement","alignItems","borderRadius","boxShadow","paddingRight","textAlign","width","div","flex","display","size","onClick","position","right","top","defaults","duration","defaultStandaloneParam","theme","colorMode","toggleColorMode","setColorMode","defaultOptions","createStandaloneToast","_temp","renderWithProviders","options","Provider","value","render","toastImpl","opts","Message","notify","close","closeAll","update","message","isActive","useToast","useMemo"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/toast/dist/esm/use-toast.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { Alert, AlertDescription, AlertIcon, AlertTitle } from \"@chakra-ui/alert\";\nimport { CloseButton } from \"@chakra-ui/close-button\";\nimport { chakra, ColorModeContext, ThemeProvider, useChakra } from \"@chakra-ui/system\";\nimport defaultTheme from \"@chakra-ui/theme\";\nimport { isFunction, noop } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { toast } from \"./toast.class\";\n\nvar Toast = props => {\n  var {\n    status,\n    variant,\n    id,\n    title,\n    isClosable,\n    onClose,\n    description\n  } = props;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: id,\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingRight: 8,\n    textAlign: \"left\",\n    width: \"auto\"\n  }, /*#__PURE__*/React.createElement(AlertIcon, null), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, null, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    right: 1,\n    top: 1\n  }));\n};\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nexport var defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast from outside of React Components\n */\n\nexport function createStandaloneToast(_temp) {\n  var {\n    theme = defaultStandaloneParam.theme,\n    colorMode = defaultStandaloneParam.colorMode,\n    toggleColorMode = defaultStandaloneParam.toggleColorMode,\n    setColorMode = defaultStandaloneParam.setColorMode,\n    defaultOptions = defaultStandaloneParam.defaultOptions\n  } = _temp === void 0 ? defaultStandaloneParam : _temp;\n\n  var renderWithProviders = (props, options) => /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: theme\n  }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: {\n      colorMode,\n      setColorMode,\n      toggleColorMode\n    }\n  }, isFunction(options.render) ? options.render(props) : /*#__PURE__*/React.createElement(Toast, _extends({}, props, options))));\n\n  var toastImpl = options => {\n    var opts = _extends({}, defaultOptions, options);\n\n    var Message = props => renderWithProviders(props, opts);\n\n    return toast.notify(Message, opts);\n  };\n\n  toastImpl.close = toast.close;\n  toastImpl.closeAll = toast.closeAll; // toasts can only be updated if they have a valid id\n\n  toastImpl.update = (id, options) => {\n    if (!id) return;\n\n    var opts = _extends({}, defaultOptions, options);\n\n    toast.update(id, _extends({}, opts, {\n      message: props => renderWithProviders(props, opts)\n    }));\n  };\n\n  toastImpl.isActive = toast.isActive;\n  return toastImpl;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\nexport function useToast(options) {\n  var {\n    theme,\n    setColorMode,\n    toggleColorMode,\n    colorMode\n  } = useChakra();\n  return React.useMemo(() => createStandaloneToast({\n    theme,\n    colorMode,\n    setColorMode,\n    toggleColorMode,\n    defaultOptions: options\n  }), [theme, setColorMode, toggleColorMode, colorMode, options]);\n}\nexport default useToast;\n//# sourceMappingURL=use-toast.js.map"]},"metadata":{},"sourceType":"module"}