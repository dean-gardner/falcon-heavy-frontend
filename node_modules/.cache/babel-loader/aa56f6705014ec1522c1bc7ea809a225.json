{"ast":null,"code":"import { isNumber, isCustomBreakpoint } from \"@chakra-ui/utils\";\n\nfunction createMediaQueries(breakpoints) {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  var keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse();\n  /**\n   * create a min-max media query string\n   */\n\n  return keys.map((breakpoint, index) => {\n    var minWidth = breakpoints[breakpoint];\n    var next = keys[index - 1];\n    var maxWidth = next ? breakpoints[next] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = (value, modifier) => {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, match => \"\" + (parseFloat(match) + modifier));\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nexport default createMediaQueries;","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,kBAAnB,QAA6C,kBAA7C;;AAEA,SAASC,kBAAT,CAA4BC,WAA5B,EAAyC;AACvC;AACF;AACA;AACA;AACA;AACE,MAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,WAAZ,EAAyBG,MAAzB,CAAgCL,kBAAhC,EAAoDM,OAApD,EAAX;AACA;AACF;AACA;;AAEE,SAAOH,IAAI,CAACI,GAAL,CAAS,CAACC,UAAD,EAAaC,KAAb,KAAuB;AACrC,QAAIC,QAAQ,GAAGR,WAAW,CAACM,UAAD,CAA1B;AACA,QAAIG,IAAI,GAAGR,IAAI,CAACM,KAAK,GAAG,CAAT,CAAf;AACA,QAAIG,QAAQ,GAAGD,IAAI,GAAGT,WAAW,CAACS,IAAD,CAAd,GAAuBE,SAA1C;AACA,QAAIC,KAAK,GAAGC,sBAAsB,CAACL,QAAD,EAAWE,QAAX,CAAlC;AACA,WAAO;AACLJ,gBADK;AAELI,cAFK;AAGLF,cAHK;AAILI;AAJK,KAAP;AAMD,GAXM,CAAP;AAYD;AACD;AACA;AACA;AACA;;;AAGA,SAASC,sBAAT,CAAgCL,QAAhC,EAA0CE,QAA1C,EAAoD;AAClD,MAAII,WAAW,GAAGC,QAAQ,CAACP,QAAD,EAAW,EAAX,CAAR,IAA0B,CAA5C;;AAEA,MAAI,CAACM,WAAD,IAAgB,CAACJ,QAArB,EAA+B;AAC7B,WAAO,EAAP;AACD;;AAED,MAAIE,KAAK,GAAG,iBAAiBI,aAAa,CAACR,QAAD,CAA9B,GAA2C,GAAvD;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,WAAOE,KAAP;AACD;;AAED,MAAIA,KAAJ,EAAW;AACTA,SAAK,IAAI,OAAT;AACD;;AAEDA,OAAK,IAAI,iBAAiBI,aAAa,CAACC,QAAQ,CAACP,QAAD,CAAT,CAA9B,GAAqD,GAA9D;AACA,SAAOE,KAAP;AACD;;AAED,IAAIM,gBAAgB,GAAG,mBAAvB;;AAEA,IAAIC,oBAAoB,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC9C,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAO,MAAMA,KAAK,GAAGC,QAAd,CAAP;AACD;;AAED,SAAOD,KAAK,CAACE,OAAN,CAAcJ,gBAAd,EAAgCK,KAAK,IAAI,MAAMC,UAAU,CAACD,KAAD,CAAV,GAAoBF,QAA1B,CAAzC,CAAP;AACD,CAND;AAOA;AACA;AACA;AACA;AACA;;;AAGA,SAASJ,QAAT,CAAkBG,KAAlB,EAAyB;AACvB,SAAOD,oBAAoB,CAACC,KAAD,EAAQA,KAAK,CAACK,QAAN,CAAe,IAAf,IAAuB,CAAC,CAAxB,GAA4B,CAAC,IAArC,CAA3B;AACD;AACD;AACA;AACA;;;AAGA,SAAST,aAAT,CAAuBI,KAAvB,EAA8B;AAC5B,SAAOvB,QAAQ,CAACuB,KAAD,CAAR,GAAkBA,KAAK,GAAG,IAA1B,GAAiCA,KAAxC;AACD;;AAED,eAAerB,kBAAf","names":["isNumber","isCustomBreakpoint","createMediaQueries","breakpoints","keys","Object","filter","reverse","map","breakpoint","index","minWidth","next","maxWidth","undefined","query","createMediaQueryString","hasMinWidth","parseInt","toMediaString","subtract","measurementRegex","calculateMeasurement","value","modifier","replace","match","parseFloat","endsWith"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/media-query/dist/esm/create-media-query.js"],"sourcesContent":["import { isNumber, isCustomBreakpoint } from \"@chakra-ui/utils\";\n\nfunction createMediaQueries(breakpoints) {\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   *\n   * reverse to begin with the largest\n   */\n  var keys = Object.keys(breakpoints).filter(isCustomBreakpoint).reverse();\n  /**\n   * create a min-max media query string\n   */\n\n  return keys.map((breakpoint, index) => {\n    var minWidth = breakpoints[breakpoint];\n    var next = keys[index - 1];\n    var maxWidth = next ? breakpoints[next] : undefined;\n    var query = createMediaQueryString(minWidth, maxWidth);\n    return {\n      breakpoint,\n      maxWidth,\n      minWidth,\n      query\n    };\n  });\n}\n/**\n * Create a media query string from the breakpoints,\n * using a combination of `min-width` and `max-width`.\n */\n\n\nfunction createMediaQueryString(minWidth, maxWidth) {\n  var hasMinWidth = parseInt(minWidth, 10) >= 0;\n\n  if (!hasMinWidth && !maxWidth) {\n    return \"\";\n  }\n\n  var query = \"(min-width: \" + toMediaString(minWidth) + \")\";\n\n  if (!maxWidth) {\n    return query;\n  }\n\n  if (query) {\n    query += \" and \";\n  }\n\n  query += \"(max-width: \" + toMediaString(subtract(maxWidth)) + \")\";\n  return query;\n}\n\nvar measurementRegex = /([0-9]+\\.?[0-9]*)/;\n\nvar calculateMeasurement = (value, modifier) => {\n  if (typeof value === \"number\") {\n    return \"\" + (value + modifier);\n  }\n\n  return value.replace(measurementRegex, match => \"\" + (parseFloat(match) + modifier));\n};\n/**\n * 0.01 and 0.1 are too small of a difference for `px` breakpoint values\n *\n * @see https://github.com/chakra-ui/chakra-ui/issues/2188#issuecomment-712774785\n */\n\n\nfunction subtract(value) {\n  return calculateMeasurement(value, value.endsWith(\"px\") ? -1 : -0.01);\n}\n/**\n * Convert media query value to string\n */\n\n\nfunction toMediaString(value) {\n  return isNumber(value) ? value + \"px\" : value;\n}\n\nexport default createMediaQueries;\n//# sourceMappingURL=create-media-query.js.map"]},"metadata":{},"sourceType":"module"}