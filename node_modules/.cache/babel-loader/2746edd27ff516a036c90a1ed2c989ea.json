{"ast":null,"code":"import { isString, isNumber } from \"@chakra-ui/utils\";\nimport unit from \"css-get-unit\";\n\nvar startsWith = (string, target) => string.slice(0, 0 + target.length) === target;\n\nexport function positiveOrNegative(value, scale) {\n  if (!scale || value == null) return value;\n  var result;\n  var valueString = value.toString();\n\n  if (startsWith(valueString, \"-\")) {\n    var raw = scale[valueString.slice(1)];\n\n    if (isString(raw)) {\n      result = \"-\" + raw;\n    } else if (isNumber(raw)) {\n      result = raw * -1;\n    } else {\n      result = value;\n    }\n  } else {\n    var _scale$value;\n\n    result = (_scale$value = scale[value]) != null ? _scale$value : value;\n  }\n\n  var computedValue = result || value;\n  var hasUnit = unit(computedValue);\n\n  if (!hasUnit && !Number.isNaN(Number(computedValue))) {\n    computedValue = Number(computedValue);\n  }\n\n  return computedValue;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,QAAnB,QAAmC,kBAAnC;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAEA,IAAIC,UAAU,GAAG,CAACC,MAAD,EAASC,MAAT,KAAoBD,MAAM,CAACE,KAAP,CAAa,CAAb,EAAgB,IAAID,MAAM,CAACE,MAA3B,MAAuCF,MAA5E;;AAEA,OAAO,SAASG,kBAAT,CAA4BC,KAA5B,EAAmCC,KAAnC,EAA0C;AAC/C,MAAI,CAACA,KAAD,IAAUD,KAAK,IAAI,IAAvB,EAA6B,OAAOA,KAAP;AAC7B,MAAIE,MAAJ;AACA,MAAIC,WAAW,GAAGH,KAAK,CAACI,QAAN,EAAlB;;AAEA,MAAIV,UAAU,CAACS,WAAD,EAAc,GAAd,CAAd,EAAkC;AAChC,QAAIE,GAAG,GAAGJ,KAAK,CAACE,WAAW,CAACN,KAAZ,CAAkB,CAAlB,CAAD,CAAf;;AAEA,QAAIN,QAAQ,CAACc,GAAD,CAAZ,EAAmB;AACjBH,YAAM,GAAG,MAAMG,GAAf;AACD,KAFD,MAEO,IAAIb,QAAQ,CAACa,GAAD,CAAZ,EAAmB;AACxBH,YAAM,GAAGG,GAAG,GAAG,CAAC,CAAhB;AACD,KAFM,MAEA;AACLH,YAAM,GAAGF,KAAT;AACD;AACF,GAVD,MAUO;AACL,QAAIM,YAAJ;;AAEAJ,UAAM,GAAG,CAACI,YAAY,GAAGL,KAAK,CAACD,KAAD,CAArB,KAAiC,IAAjC,GAAwCM,YAAxC,GAAuDN,KAAhE;AACD;;AAED,MAAIO,aAAa,GAAGL,MAAM,IAAIF,KAA9B;AACA,MAAIQ,OAAO,GAAGf,IAAI,CAACc,aAAD,CAAlB;;AAEA,MAAI,CAACC,OAAD,IAAY,CAACC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACF,aAAD,CAAnB,CAAjB,EAAsD;AACpDA,iBAAa,GAAGE,MAAM,CAACF,aAAD,CAAtB;AACD;;AAED,SAAOA,aAAP;AACD","names":["isString","isNumber","unit","startsWith","string","target","slice","length","positiveOrNegative","value","scale","result","valueString","toString","raw","_scale$value","computedValue","hasUnit","Number","isNaN"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/react/node_modules/@chakra-ui/styled-system/dist/esm/utils/positive-or-negative.js"],"sourcesContent":["import { isString, isNumber } from \"@chakra-ui/utils\";\nimport unit from \"css-get-unit\";\n\nvar startsWith = (string, target) => string.slice(0, 0 + target.length) === target;\n\nexport function positiveOrNegative(value, scale) {\n  if (!scale || value == null) return value;\n  var result;\n  var valueString = value.toString();\n\n  if (startsWith(valueString, \"-\")) {\n    var raw = scale[valueString.slice(1)];\n\n    if (isString(raw)) {\n      result = \"-\" + raw;\n    } else if (isNumber(raw)) {\n      result = raw * -1;\n    } else {\n      result = value;\n    }\n  } else {\n    var _scale$value;\n\n    result = (_scale$value = scale[value]) != null ? _scale$value : value;\n  }\n\n  var computedValue = result || value;\n  var hasUnit = unit(computedValue);\n\n  if (!hasUnit && !Number.isNaN(Number(computedValue))) {\n    computedValue = Number(computedValue);\n  }\n\n  return computedValue;\n}\n//# sourceMappingURL=positive-or-negative.js.map"]},"metadata":{},"sourceType":"module"}