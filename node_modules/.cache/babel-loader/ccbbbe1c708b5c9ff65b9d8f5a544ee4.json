{"ast":null,"code":"// eslint-disable-next-line spaced-comment\n/// <reference types=\"chrome\"/>\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { ExtensionMessageTarget, Transport, TransportType, Origin } from '..';\nconst logger = new Logger('ChromeMessageTransport');\nexport class ChromeMessageTransport extends Transport {\n  constructor(name) {\n    super(name);\n    this.type = TransportType.CHROME_MESSAGE;\n    this.init().catch(error => console.error(error));\n  }\n\n  static isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      const isAvailable = !!(window.chrome && chrome.runtime && chrome.runtime.id);\n      return Promise.resolve(isAvailable);\n    });\n  }\n\n  send(payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const message = {\n        target: ExtensionMessageTarget.PAGE,\n        payload\n      };\n      chrome.runtime.sendMessage(message, data => {\n        logger.log('send', 'got response', data);\n      });\n    });\n  }\n\n  init() {\n    return __awaiter(this, void 0, void 0, function* () {\n      chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n        logger.log('init', 'receiving chrome message', message, sender);\n        const connectionContext = {\n          origin: Origin.WEBSITE,\n          id: sender.url ? sender.url : '',\n          extras: {\n            sender,\n            sendResponse\n          }\n        };\n        this.notifyListeners(message, connectionContext).catch(error => logger.error(error)); // return true from the event listener to indicate you wish to send a response asynchronously\n        // (this will keep the message channel open to the other end until sendResponse is called).\n\n        return true;\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Logger","ExtensionMessageTarget","Transport","TransportType","Origin","logger","ChromeMessageTransport","constructor","name","type","CHROME_MESSAGE","init","catch","error","console","isAvailable","window","chrome","runtime","id","send","payload","message","target","PAGE","sendMessage","data","log","onMessage","addListener","sender","sendResponse","connectionContext","origin","WEBSITE","url","extras","notifyListeners"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/transports/ChromeMessageTransport.js"],"sourcesContent":["// eslint-disable-next-line spaced-comment\n/// <reference types=\"chrome\"/>\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from '../utils/Logger';\nimport { ExtensionMessageTarget, Transport, TransportType, Origin } from '..';\nconst logger = new Logger('ChromeMessageTransport');\nexport class ChromeMessageTransport extends Transport {\n    constructor(name) {\n        super(name);\n        this.type = TransportType.CHROME_MESSAGE;\n        this.init().catch((error) => console.error(error));\n    }\n    static isAvailable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const isAvailable = !!(window.chrome && chrome.runtime && chrome.runtime.id);\n            return Promise.resolve(isAvailable);\n        });\n    }\n    send(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = {\n                target: ExtensionMessageTarget.PAGE,\n                payload\n            };\n            chrome.runtime.sendMessage(message, (data) => {\n                logger.log('send', 'got response', data);\n            });\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {\n                logger.log('init', 'receiving chrome message', message, sender);\n                const connectionContext = {\n                    origin: Origin.WEBSITE,\n                    id: sender.url ? sender.url : '',\n                    extras: { sender, sendResponse }\n                };\n                this.notifyListeners(message, connectionContext).catch((error) => logger.error(error));\n                // return true from the event listener to indicate you wish to send a response asynchronously\n                // (this will keep the message channel open to the other end until sendResponse is called).\n                return true;\n            });\n        });\n    }\n}\n//# sourceMappingURL=ChromeMessageTransport.js.map"]},"metadata":{},"sourceType":"module"}