{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Number.POSITIVE_INFINITY;\n  }\n\n  if (typeof resultSelector === 'function') {\n    return function (source) {\n      return source.pipe(mergeMap(function (a, i) {\n        return from(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }, concurrent));\n    };\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return function (source) {\n    return source.lift(new MergeMapOperator(project, concurrent));\n  };\n}\n\nvar MergeMapOperator = /*@__PURE__*/function () {\n  function MergeMapOperator(project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    this.project = project;\n    this.concurrent = concurrent;\n  }\n\n  MergeMapOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n  };\n\n  return MergeMapOperator;\n}();\n\nexport { MergeMapOperator };\n\nvar MergeMapSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(MergeMapSubscriber, _super);\n\n  function MergeMapSubscriber(destination, project, concurrent) {\n    if (concurrent === void 0) {\n      concurrent = Number.POSITIVE_INFINITY;\n    }\n\n    var _this = _super.call(this, destination) || this;\n\n    _this.project = project;\n    _this.concurrent = concurrent;\n    _this.hasCompleted = false;\n    _this.buffer = [];\n    _this.active = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  MergeMapSubscriber.prototype._next = function (value) {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  };\n\n  MergeMapSubscriber.prototype._tryNext = function (value) {\n    var result;\n    var index = this.index++;\n\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.active++;\n\n    this._innerSub(result);\n  };\n\n  MergeMapSubscriber.prototype._innerSub = function (ish) {\n    var innerSubscriber = new SimpleInnerSubscriber(this);\n    var destination = this.destination;\n    destination.add(innerSubscriber);\n    var innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  };\n\n  MergeMapSubscriber.prototype._complete = function () {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  };\n\n  MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n    this.destination.next(innerValue);\n  };\n\n  MergeMapSubscriber.prototype.notifyComplete = function () {\n    var buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  };\n\n  return MergeMapSubscriber;\n}(SimpleOuterSubscriber);\n\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;","map":{"version":3,"mappings":"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","names":["tslib_1","map","from","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeMap","project","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","pipe","a","i","b","ii","lift","MergeMapOperator","prototype","call","observer","subscribe","MergeMapSubscriber","_super","__extends","destination","_this","hasCompleted","buffer","active","index","_next","value","_tryNext","push","result","err","error","_innerSub","ish","innerSubscriber","add","innerSubscription","_complete","length","complete","unsubscribe","notifyNext","innerValue","next","notifyComplete","shift","flatMap"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/mergeMap.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_map,_observable_from,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { map } from './map';\nimport { from } from '../observable/from';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    if (typeof resultSelector === 'function') {\n        return function (source) { return source.pipe(mergeMap(function (a, i) { return from(project(a, i)).pipe(map(function (b, ii) { return resultSelector(a, b, i, ii); })); }, concurrent)); };\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return function (source) { return source.lift(new MergeMapOperator(project, concurrent)); };\n}\nvar MergeMapOperator = /*@__PURE__*/ (function () {\n    function MergeMapOperator(project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\nexport { MergeMapOperator };\nvar MergeMapSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        var _this = _super.call(this, destination) || this;\n        _this.project = project;\n        _this.concurrent = concurrent;\n        _this.hasCompleted = false;\n        _this.buffer = [];\n        _this.active = 0;\n        _this.index = 0;\n        return _this;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish) {\n        var innerSubscriber = new SimpleInnerSubscriber(this);\n        var destination = this.destination;\n        destination.add(innerSubscriber);\n        var innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (innerValue) {\n        this.destination.next(innerValue);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function () {\n        var buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(SimpleOuterSubscriber));\nexport { MergeMapSubscriber };\nexport var flatMap = mergeMap;\n//# sourceMappingURL=mergeMap.js.map\n"]},"metadata":{},"sourceType":"module"}