{"ast":null,"code":"/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\nexport function combineLatest() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  var project = null;\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  }\n\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n\n  return function (source) {\n    return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project));\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,OAAT,QAAwB,iBAAxB;AACA,SAASC,qBAAT,QAAsC,6BAAtC;AACA,SAASC,IAAT,QAAqB,oBAArB;AACA,IAAIC,IAAI,GAAG,EAAX;AACA,OAAO,SAASC,aAAT,GAAyB;AAC5B,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,eAAW,CAACC,EAAD,CAAX,GAAkBC,SAAS,CAACD,EAAD,CAA3B;AACH;;AACD,MAAIG,OAAO,GAAG,IAAd;;AACA,MAAI,OAAOJ,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAlB,KAA+C,UAAnD,EAA+D;AAC3DC,WAAO,GAAGJ,WAAW,CAACK,GAAZ,EAAV;AACH;;AACD,MAAIL,WAAW,CAACG,MAAZ,KAAuB,CAAvB,IAA4BR,OAAO,CAACK,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACrDA,eAAW,GAAGA,WAAW,CAAC,CAAD,CAAX,CAAeM,KAAf,EAAd;AACH;;AACD,SAAO,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiBZ,IAAI,CAAC,CAACU,MAAD,EAASG,MAAT,CAAgBV,WAAhB,CAAD,CAArB,EAAqD,IAAIJ,qBAAJ,CAA0BQ,OAA1B,CAArD,CAAP;AAAkG,GAA7H;AACH","names":["isArray","CombineLatestOperator","from","none","combineLatest","observables","_i","arguments","length","project","pop","slice","source","lift","call","concat"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/combineLatest.js"],"sourcesContent":["/** PURE_IMPORTS_START _util_isArray,_observable_combineLatest,_observable_from PURE_IMPORTS_END */\nimport { isArray } from '../util/isArray';\nimport { CombineLatestOperator } from '../observable/combineLatest';\nimport { from } from '../observable/from';\nvar none = {};\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(from([source].concat(observables)), new CombineLatestOperator(project)); };\n}\n//# sourceMappingURL=combineLatest.js.map\n"]},"metadata":{},"sourceType":"module"}