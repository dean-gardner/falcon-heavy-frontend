{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useFocusEffect, useIds, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { addItem, callAllHandlers, createContext, getNextIndex, getPrevIndex, isArray, isUndefined, mergeRefs, normalizeEventKey, removeItem, warn } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\n\nexport function useAccordion(props) {\n  var {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"defaultIndex\", \"index\", \"allowMultiple\", \"allowToggle\"]); // validate the props and `warn` if used incorrectly\n\n\n  allowMultipleWarning(props);\n  allowMultipleAndAllowToggleWarning(props);\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n\n  var domContext = useDescendants();\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n\n  var [focusedIndex, setFocusedIndex] = useState(-1);\n  /**\n   * Reset focused index when accordion unmounts\n   * or descendants change\n   */\n\n  useUnmountEffect(() => {\n    setFocusedIndex(-1);\n  }, [domContext.descendants]);\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n\n  var [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) return defaultIndex != null ? defaultIndex : [];\n      return defaultIndex != null ? defaultIndex : -1;\n    },\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n      onChange: \"onChange\"\n    }\n  });\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n\n  var getAccordionItemProps = idx => {\n    var isOpen = false;\n\n    if (idx !== null) {\n      isOpen = isArray(index) ? index.includes(idx) : index === idx;\n    }\n\n    var onChange = isOpen => {\n      if (idx === null) return;\n\n      if (allowMultiple && isArray(index)) {\n        var nextState = isOpen ? addItem(index, idx) : removeItem(index, idx);\n        setIndex(nextState);\n      } else if (isOpen) {\n        setIndex(idx);\n      } else if (allowToggle) {\n        setIndex(-1);\n      }\n    };\n\n    return {\n      isOpen,\n      onChange\n    };\n  };\n\n  return {\n    index,\n    setIndex,\n    htmlProps,\n    getAccordionItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext\n  };\n}\nvar [AccordionProvider, useAccordionContext] = createContext({\n  name: \"AccordionContext\",\n  errorMessage: \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\"\n});\nexport { AccordionProvider, useAccordionContext };\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and its children\n */\n\nexport function useAccordionItem(props) {\n  var {\n    isDisabled,\n    isFocusable,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\", \"id\"]);\n\n  var {\n    getAccordionItemProps,\n    domContext,\n    focusedIndex,\n    setFocusedIndex\n  } = useAccordionContext();\n  var {\n    descendants\n  } = domContext;\n  var buttonRef = useRef(null);\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n\n  var [buttonId, panelId] = useIds(id, \"accordion-button\", \"accordion-panel\");\n  focusableNotDisabledWarning(props);\n  /**\n   * Think of this as a way to register this accordion item\n   * with its parent `useAccordion`\n   */\n\n  var index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var {\n    isOpen,\n    onChange\n  } = getAccordionItemProps(index === -1 ? null : index);\n\n  var onOpen = () => {\n    onChange == null ? void 0 : onChange(true);\n  };\n\n  var onClose = () => {\n    onChange == null ? void 0 : onChange(false);\n  };\n\n  var shouldFocus = index === focusedIndex;\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n\n  useFocusEffect(buttonRef, {\n    shouldFocus\n  });\n  /**\n   * Toggle the visibility of the accordion item\n   */\n\n  var onClick = useCallback(() => {\n    onChange == null ? void 0 : onChange(!isOpen);\n    setFocusedIndex(index);\n  }, [index, isOpen, onChange, setFocusedIndex]);\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowDown: () => {\n        var _nextAccordion$elemen;\n\n        var nextIndex = getNextIndex(index, descendants.length);\n        var nextAccordion = descendants[nextIndex];\n        nextAccordion == null ? void 0 : (_nextAccordion$elemen = nextAccordion.element) == null ? void 0 : _nextAccordion$elemen.focus();\n      },\n      ArrowUp: () => {\n        var _prevAccordion$elemen;\n\n        var prevIndex = getPrevIndex(index, descendants.length);\n        var prevAccordion = descendants[prevIndex];\n        prevAccordion == null ? void 0 : (_prevAccordion$elemen = prevAccordion.element) == null ? void 0 : _prevAccordion$elemen.focus();\n      },\n      Home: () => {\n        var _firstAccordion$eleme;\n\n        var firstAccordion = descendants[0];\n        firstAccordion == null ? void 0 : (_firstAccordion$eleme = firstAccordion.element) == null ? void 0 : _firstAccordion$eleme.focus();\n      },\n      End: () => {\n        var _lastAccordion$elemen;\n\n        var lastAccordion = descendants[descendants.length - 1];\n        lastAccordion == null ? void 0 : (_lastAccordion$elemen = lastAccordion.element) == null ? void 0 : _lastAccordion$elemen.focus();\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, index]);\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n\n  var onFocus = useCallback(() => setFocusedIndex(index), [index, setFocusedIndex]);\n  var getButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      type: \"button\",\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  }, [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId]);\n  var getPanelProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen\n    });\n  }, [buttonId, isOpen, panelId]);\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps\n  };\n}\n\nfunction allowMultipleWarning(props) {\n  var index = props.index || props.defaultIndex;\n  var condition = !isUndefined(index) && !isArray(index) && props.allowMultiple;\n  warn({\n    condition: !!condition,\n    message: \"If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: \" + typeof index + \",\"\n  });\n}\n\nfunction allowMultipleAndAllowToggleWarning(props) {\n  warn({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: \"If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not\"\n  });\n}\n\nfunction focusableNotDisabledWarning(props) {\n  warn({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: \"Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\\n    \"\n  });\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useDescendant","useDescendants","useControllableState","useFocusEffect","useIds","useUnmountEffect","addItem","callAllHandlers","createContext","getNextIndex","getPrevIndex","isArray","isUndefined","mergeRefs","normalizeEventKey","removeItem","warn","useCallback","useRef","useState","useAccordion","props","onChange","defaultIndex","index","indexProp","allowMultiple","allowToggle","htmlProps","allowMultipleWarning","allowMultipleAndAllowToggleWarning","domContext","focusedIndex","setFocusedIndex","descendants","setIndex","value","defaultValue","propsMap","getAccordionItemProps","idx","isOpen","includes","nextState","AccordionProvider","useAccordionContext","name","errorMessage","useAccordionItem","isDisabled","isFocusable","id","buttonRef","buttonId","panelId","focusableNotDisabledWarning","element","current","context","disabled","focusable","onOpen","onClose","shouldFocus","onClick","onKeyDown","event","eventKey","keyMap","ArrowDown","_nextAccordion$elemen","nextIndex","nextAccordion","focus","ArrowUp","_prevAccordion$elemen","prevIndex","prevAccordion","Home","_firstAccordion$eleme","firstAccordion","End","_lastAccordion$elemen","lastAccordion","action","preventDefault","onFocus","getButtonProps","ref","type","getPanelProps","role","hidden","condition","message"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/accordion/dist/esm/use-accordion.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useDescendant, useDescendants } from \"@chakra-ui/descendant\";\nimport { useControllableState, useFocusEffect, useIds, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { addItem, callAllHandlers, createContext, getNextIndex, getPrevIndex, isArray, isUndefined, mergeRefs, normalizeEventKey, removeItem, warn } from \"@chakra-ui/utils\";\nimport { useCallback, useRef, useState } from \"react\";\n\n/**\n * useAccordion hook provides all the state and focus management logic\n * for accordion items.\n */\nexport function useAccordion(props) {\n  var {\n    onChange,\n    defaultIndex,\n    index: indexProp,\n    allowMultiple,\n    allowToggle\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"onChange\", \"defaultIndex\", \"index\", \"allowMultiple\", \"allowToggle\"]); // validate the props and `warn` if used incorrectly\n\n\n  allowMultipleWarning(props);\n  allowMultipleAndAllowToggleWarning(props);\n  /**\n   * Think of this as the register to each accordion item.\n   * We used to manage focus between accordion item buttons.\n   *\n   * Every accordion item, registers their button refs in this context\n   */\n\n  var domContext = useDescendants();\n  /**\n   * This state is used to track the index focused accordion\n   * button when click on the button, tab on the button, or\n   * use the down/up arrow to navigate.\n   */\n\n  var [focusedIndex, setFocusedIndex] = useState(-1);\n  /**\n   * Reset focused index when accordion unmounts\n   * or descendants change\n   */\n\n  useUnmountEffect(() => {\n    setFocusedIndex(-1);\n  }, [domContext.descendants]);\n  /**\n   * Hook that manages the controlled and un-controlled state\n   * for the accordion.\n   */\n\n  var [index, setIndex] = useControllableState({\n    value: indexProp,\n    defaultValue: () => {\n      if (allowMultiple) return defaultIndex != null ? defaultIndex : [];\n      return defaultIndex != null ? defaultIndex : -1;\n    },\n    onChange,\n    propsMap: {\n      value: \"index\",\n      defaultValue: \"defaultIndex\",\n      onChange: \"onChange\"\n    }\n  });\n  /**\n   * Gets the `isOpen` and `onChange` props for a child accordion item based on\n   * the child's index.\n   *\n   * @param idx {number} The index of the child accordion item\n   */\n\n  var getAccordionItemProps = idx => {\n    var isOpen = false;\n\n    if (idx !== null) {\n      isOpen = isArray(index) ? index.includes(idx) : index === idx;\n    }\n\n    var onChange = isOpen => {\n      if (idx === null) return;\n\n      if (allowMultiple && isArray(index)) {\n        var nextState = isOpen ? addItem(index, idx) : removeItem(index, idx);\n        setIndex(nextState);\n      } else if (isOpen) {\n        setIndex(idx);\n      } else if (allowToggle) {\n        setIndex(-1);\n      }\n    };\n\n    return {\n      isOpen,\n      onChange\n    };\n  };\n\n  return {\n    index,\n    setIndex,\n    htmlProps,\n    getAccordionItemProps,\n    focusedIndex,\n    setFocusedIndex,\n    domContext\n  };\n}\nvar [AccordionProvider, useAccordionContext] = createContext({\n  name: \"AccordionContext\",\n  errorMessage: \"useAccordionContext: `context` is undefined. Seems you forgot to wrap the accordion components in `<Accordion />`\"\n});\nexport { AccordionProvider, useAccordionContext };\n\n/**\n * useAccordionItem\n *\n * React hook that provides the open/close functionality\n * for an accordion item and its children\n */\nexport function useAccordionItem(props) {\n  var {\n    isDisabled,\n    isFocusable,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"isDisabled\", \"isFocusable\", \"id\"]);\n\n  var {\n    getAccordionItemProps,\n    domContext,\n    focusedIndex,\n    setFocusedIndex\n  } = useAccordionContext();\n  var {\n    descendants\n  } = domContext;\n  var buttonRef = useRef(null);\n  /**\n   * Generate unique ids for all accordion item components (button and panel)\n   */\n\n  var [buttonId, panelId] = useIds(id, \"accordion-button\", \"accordion-panel\");\n  focusableNotDisabledWarning(props);\n  /**\n   * Think of this as a way to register this accordion item\n   * with its parent `useAccordion`\n   */\n\n  var index = useDescendant({\n    element: buttonRef.current,\n    context: domContext,\n    disabled: isDisabled,\n    focusable: isFocusable\n  });\n  var {\n    isOpen,\n    onChange\n  } = getAccordionItemProps(index === -1 ? null : index);\n\n  var onOpen = () => {\n    onChange == null ? void 0 : onChange(true);\n  };\n\n  var onClose = () => {\n    onChange == null ? void 0 : onChange(false);\n  };\n\n  var shouldFocus = index === focusedIndex;\n  /**\n   * Autofocus the accordion button when\n   * the active index matched the accordion item's index\n   */\n\n  useFocusEffect(buttonRef, {\n    shouldFocus\n  });\n  /**\n   * Toggle the visibility of the accordion item\n   */\n\n  var onClick = useCallback(() => {\n    onChange == null ? void 0 : onChange(!isOpen);\n    setFocusedIndex(index);\n  }, [index, isOpen, onChange, setFocusedIndex]);\n  /**\n   * Manage keyboard navigation between accordion items.\n   */\n\n  var onKeyDown = useCallback(event => {\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowDown: () => {\n        var _nextAccordion$elemen;\n\n        var nextIndex = getNextIndex(index, descendants.length);\n        var nextAccordion = descendants[nextIndex];\n        nextAccordion == null ? void 0 : (_nextAccordion$elemen = nextAccordion.element) == null ? void 0 : _nextAccordion$elemen.focus();\n      },\n      ArrowUp: () => {\n        var _prevAccordion$elemen;\n\n        var prevIndex = getPrevIndex(index, descendants.length);\n        var prevAccordion = descendants[prevIndex];\n        prevAccordion == null ? void 0 : (_prevAccordion$elemen = prevAccordion.element) == null ? void 0 : _prevAccordion$elemen.focus();\n      },\n      Home: () => {\n        var _firstAccordion$eleme;\n\n        var firstAccordion = descendants[0];\n        firstAccordion == null ? void 0 : (_firstAccordion$eleme = firstAccordion.element) == null ? void 0 : _firstAccordion$eleme.focus();\n      },\n      End: () => {\n        var _lastAccordion$elemen;\n\n        var lastAccordion = descendants[descendants.length - 1];\n        lastAccordion == null ? void 0 : (_lastAccordion$elemen = lastAccordion.element) == null ? void 0 : _lastAccordion$elemen.focus();\n      }\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [descendants, index]);\n  /**\n   * Since each accordion item's button still remains tabbable, let's\n   * update the focusedIndex when it receives focus\n   */\n\n  var onFocus = useCallback(() => setFocusedIndex(index), [index, setFocusedIndex]);\n  var getButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      type: \"button\",\n      ref: mergeRefs(buttonRef, ref),\n      id: buttonId,\n      disabled: !!isDisabled,\n      \"aria-expanded\": !!isOpen,\n      \"aria-controls\": panelId,\n      onClick: callAllHandlers(props.onClick, onClick),\n      onFocus: callAllHandlers(props.onFocus, onFocus),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown)\n    });\n  }, [buttonId, isDisabled, isOpen, onClick, onFocus, onKeyDown, panelId]);\n  var getPanelProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref,\n      role: \"region\",\n      id: panelId,\n      \"aria-labelledby\": buttonId,\n      hidden: !isOpen\n    });\n  }, [buttonId, isOpen, panelId]);\n  return {\n    isOpen,\n    isDisabled,\n    isFocusable,\n    onOpen,\n    onClose,\n    getButtonProps,\n    getPanelProps,\n    htmlProps\n  };\n}\n\nfunction allowMultipleWarning(props) {\n  var index = props.index || props.defaultIndex;\n  var condition = !isUndefined(index) && !isArray(index) && props.allowMultiple;\n  warn({\n    condition: !!condition,\n    message: \"If 'allowMultiple' is passed, then 'index' or 'defaultIndex' must be an array. You passed: \" + typeof index + \",\"\n  });\n}\n\nfunction allowMultipleAndAllowToggleWarning(props) {\n  warn({\n    condition: !!(props.allowMultiple && props.allowToggle),\n    message: \"If 'allowMultiple' is passed, 'allowToggle' will be ignored. Either remove 'allowToggle' or 'allowMultiple' depending on whether you want multiple accordions visible or not\"\n  });\n}\n\nfunction focusableNotDisabledWarning(props) {\n  warn({\n    condition: !!(props.isFocusable && !props.isDisabled),\n    message: \"Using only 'isFocusable', this prop is reserved for situations where you pass 'isDisabled' but you still want the element to receive focus (A11y). Either remove it or pass 'isDisabled' as well.\\n    \"\n  });\n}\n//# sourceMappingURL=use-accordion.js.map"]},"metadata":{},"sourceType":"module"}