{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return function (source) {\n    return source.lift(new CountOperator(predicate, source));\n  };\n}\n\nvar CountOperator = /*@__PURE__*/function () {\n  function CountOperator(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  CountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  };\n\n  return CountOperator;\n}();\n\nvar CountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(CountSubscriber, _super);\n\n  function CountSubscriber(destination, predicate, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.source = source;\n    _this.count = 0;\n    _this.index = 0;\n    return _this;\n  }\n\n  CountSubscriber.prototype._next = function (value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._tryPredicate = function (value) {\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  };\n\n  CountSubscriber.prototype._complete = function () {\n    this.destination.next(this.count);\n    this.destination.complete();\n  };\n\n  return CountSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,KAAT,CAAeC,SAAf,EAA0B;AAC7B,SAAO,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,aAAJ,CAAkBH,SAAlB,EAA6BC,MAA7B,CAAZ,CAAP;AAA2D,GAAtF;AACH;;AACD,IAAIE,aAAa,GAAG,aAAe,YAAY;AAC3C,WAASA,aAAT,CAAuBH,SAAvB,EAAkCC,MAAlC,EAA0C;AACtC,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDE,eAAa,CAACC,SAAd,CAAwBC,IAAxB,GAA+B,UAAUC,UAAV,EAAsBL,MAAtB,EAA8B;AACzD,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,eAAJ,CAAoBF,UAApB,EAAgC,KAAKN,SAArC,EAAgD,KAAKC,MAArD,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOE,aAAP;AACH,CATkC,EAAnC;;AAUA,IAAIK,eAAe,GAAG,aAAe,UAAUC,MAAV,EAAkB;AACnDZ,SAAO,CAACa,SAAR,CAAkBF,eAAlB,EAAmCC,MAAnC;;AACA,WAASD,eAAT,CAAyBG,WAAzB,EAAsCX,SAAtC,EAAiDC,MAAjD,EAAyD;AACrD,QAAIW,KAAK,GAAGH,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBM,WAAlB,KAAkC,IAA9C;;AACAC,SAAK,CAACZ,SAAN,GAAkBA,SAAlB;AACAY,SAAK,CAACX,MAAN,GAAeA,MAAf;AACAW,SAAK,CAACb,KAAN,GAAc,CAAd;AACAa,SAAK,CAACC,KAAN,GAAc,CAAd;AACA,WAAOD,KAAP;AACH;;AACDJ,iBAAe,CAACJ,SAAhB,CAA0BU,KAA1B,GAAkC,UAAUC,KAAV,EAAiB;AAC/C,QAAI,KAAKf,SAAT,EAAoB;AAChB,WAAKgB,aAAL,CAAmBD,KAAnB;AACH,KAFD,MAGK;AACD,WAAKhB,KAAL;AACH;AACJ,GAPD;;AAQAS,iBAAe,CAACJ,SAAhB,CAA0BY,aAA1B,GAA0C,UAAUD,KAAV,EAAiB;AACvD,QAAIE,MAAJ;;AACA,QAAI;AACAA,YAAM,GAAG,KAAKjB,SAAL,CAAee,KAAf,EAAsB,KAAKF,KAAL,EAAtB,EAAoC,KAAKZ,MAAzC,CAAT;AACH,KAFD,CAGA,OAAOiB,GAAP,EAAY;AACR,WAAKP,WAAL,CAAiBQ,KAAjB,CAAuBD,GAAvB;AACA;AACH;;AACD,QAAID,MAAJ,EAAY;AACR,WAAKlB,KAAL;AACH;AACJ,GAZD;;AAaAS,iBAAe,CAACJ,SAAhB,CAA0BgB,SAA1B,GAAsC,YAAY;AAC9C,SAAKT,WAAL,CAAiBU,IAAjB,CAAsB,KAAKtB,KAA3B;AACA,SAAKY,WAAL,CAAiBW,QAAjB;AACH,GAHD;;AAIA,SAAOd,eAAP;AACH,CApCoC,CAoCnCV,UApCmC,CAArC","names":["tslib_1","Subscriber","count","predicate","source","lift","CountOperator","prototype","call","subscriber","subscribe","CountSubscriber","_super","__extends","destination","_this","index","_next","value","_tryPredicate","result","err","error","_complete","next","complete"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/count.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return function (source) { return source.lift(new CountOperator(predicate, source)); };\n}\nvar CountOperator = /*@__PURE__*/ (function () {\n    function CountOperator(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    CountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    };\n    return CountOperator;\n}());\nvar CountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(CountSubscriber, _super);\n    function CountSubscriber(destination, predicate, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.source = source;\n        _this.count = 0;\n        _this.index = 0;\n        return _this;\n    }\n    CountSubscriber.prototype._next = function (value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._tryPredicate = function (value) {\n        var result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    };\n    CountSubscriber.prototype._complete = function () {\n        this.destination.next(this.count);\n        this.destination.complete();\n    };\n    return CountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=count.js.map\n"]},"metadata":{},"sourceType":"module"}