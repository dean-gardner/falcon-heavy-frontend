{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return function (source) {\n    return source.lift(new RetryWhenOperator(notifier, source));\n  };\n}\n\nvar RetryWhenOperator = /*@__PURE__*/function () {\n  function RetryWhenOperator(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  RetryWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  };\n\n  return RetryWhenOperator;\n}();\n\nvar RetryWhenSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RetryWhenSubscriber, _super);\n\n  function RetryWhenSubscriber(destination, notifier, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.notifier = notifier;\n    _this.source = source;\n    return _this;\n  }\n\n  RetryWhenSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var errors = this.errors;\n      var retries = this.retries;\n      var retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n\n        try {\n          var notifier = this.notifier;\n          retries = notifier(errors);\n        } catch (e) {\n          return _super.prototype.error.call(this, e);\n        }\n\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  };\n\n  RetryWhenSubscriber.prototype._unsubscribe = function () {\n    var _a = this,\n        errors = _a.errors,\n        retriesSubscription = _a.retriesSubscription;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  };\n\n  RetryWhenSubscriber.prototype.notifyNext = function () {\n    var _unsubscribe = this._unsubscribe;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  };\n\n  return RetryWhenSubscriber;\n}(SimpleOuterSubscriber);","map":{"version":3,"mappings":"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","names":["tslib_1","Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","retryWhen","notifier","source","lift","RetryWhenOperator","prototype","call","subscriber","subscribe","RetryWhenSubscriber","_super","__extends","destination","_this","error","err","isStopped","errors","retries","retriesSubscription","e","undefined","_unsubscribeAndRecycle","next","_unsubscribe","_a","unsubscribe","notifyNext"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/retryWhen.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_innerSubscribe PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return function (source) { return source.lift(new RetryWhenOperator(notifier, source)); };\n}\nvar RetryWhenOperator = /*@__PURE__*/ (function () {\n    function RetryWhenOperator(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    RetryWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    };\n    return RetryWhenOperator;\n}());\nvar RetryWhenSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RetryWhenSubscriber, _super);\n    function RetryWhenSubscriber(destination, notifier, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.notifier = notifier;\n        _this.source = source;\n        return _this;\n    }\n    RetryWhenSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var errors = this.errors;\n            var retries = this.retries;\n            var retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    var notifier = this.notifier;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return _super.prototype.error.call(this, e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    };\n    RetryWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, errors = _a.errors, retriesSubscription = _a.retriesSubscription;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    };\n    RetryWhenSubscriber.prototype.notifyNext = function () {\n        var _unsubscribe = this._unsubscribe;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    };\n    return RetryWhenSubscriber;\n}(SimpleOuterSubscriber));\n//# sourceMappingURL=retryWhen.js.map\n"]},"metadata":{},"sourceType":"module"}