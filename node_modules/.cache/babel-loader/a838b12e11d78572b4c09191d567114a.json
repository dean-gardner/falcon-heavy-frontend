{"ast":null,"code":"import { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css } from \"@chakra-ui/styled-system\";\nimport { createContext, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeContext } from \"@emotion/react\";\nimport * as React from \"react\";\nexport { ThemeProvider } from \"@emotion/react\";\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\");\n  }\n\n  return theme;\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = () => {\n  var {\n    colorMode\n  } = useColorMode();\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: theme => {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,uBAA7B;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,SAASC,aAAT,EAAwBC,WAAW,IAAIC,GAAvC,EAA4CC,OAA5C,QAA2D,kBAA3D;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,gBAArC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,OAAO,SAASC,QAAT,GAAoB;AACzB,MAAIC,KAAK,GAAGH,KAAK,CAACI,UAAN,CAAiBL,YAAjB,CAAZ;;AAEA,MAAI,CAACI,KAAL,EAAY;AACV,UAAME,KAAK,CAAC,2FAAD,CAAX;AACD;;AAED,SAAOF,KAAP;AACD;AACD,IAAI,CAACG,cAAD,EAAiBC,SAAjB,IAA8Bb,aAAa,CAAC;AAC9Cc,MAAI,EAAE,eADwC;AAE9CC,cAAY,EAAE;AAFgC,CAAD,CAA/C;AAIA,SAASH,cAAT,EAAyBC,SAAzB;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIG,WAAW,GAAG,MAAM;AAC7B,MAAI;AACFC;AADE,MAEAnB,YAAY,EAFhB;AAGA,SAAO,aAAaQ,KAAK,CAACY,aAAN,CAAoBd,MAApB,EAA4B;AAC9Ce,UAAM,EAAEV,KAAK,IAAI;AACf,UAAIW,eAAe,GAAGlB,GAAG,CAACO,KAAD,EAAQ,eAAR,CAAzB;AACA,UAAIY,YAAY,GAAGlB,OAAO,CAACiB,eAAD,EAAkB;AAC1CX,aAD0C;AAE1CQ;AAF0C,OAAlB,CAA1B;AAIA,UAAI,CAACI,YAAL,EAAmB,OAAOC,SAAP;AACnB,UAAIH,MAAM,GAAGpB,GAAG,CAACsB,YAAD,CAAH,CAAkBZ,KAAlB,CAAb;AACA,aAAOU,MAAP;AACD;AAV6C,GAA5B,CAApB;AAYD,CAhBM","names":["useColorMode","css","createContext","memoizedGet","get","runIfFn","Global","ThemeContext","React","ThemeProvider","useTheme","theme","useContext","Error","StylesProvider","useStyles","name","errorMessage","GlobalStyle","colorMode","createElement","styles","styleObjectOrFn","globalStyles","undefined"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/system/dist/esm/providers.js"],"sourcesContent":["import { useColorMode } from \"@chakra-ui/color-mode\";\nimport { css } from \"@chakra-ui/styled-system\";\nimport { createContext, memoizedGet as get, runIfFn } from \"@chakra-ui/utils\";\nimport { Global, ThemeContext } from \"@emotion/react\";\nimport * as React from \"react\";\nexport { ThemeProvider } from \"@emotion/react\";\nexport function useTheme() {\n  var theme = React.useContext(ThemeContext);\n\n  if (!theme) {\n    throw Error(\"useTheme: `theme` is undefined. Seems you forgot to wrap your app in `<ChakraProvider />`\");\n  }\n\n  return theme;\n}\nvar [StylesProvider, useStyles] = createContext({\n  name: \"StylesContext\",\n  errorMessage: \"useStyles: `styles` is undefined. Seems you forgot to wrap the components in `<StylesProvider />` \"\n});\nexport { StylesProvider, useStyles };\n/**\n * Applies styles defined in `theme.styles.global` globally\n * using emotion's `Global` component\n */\n\nexport var GlobalStyle = () => {\n  var {\n    colorMode\n  } = useColorMode();\n  return /*#__PURE__*/React.createElement(Global, {\n    styles: theme => {\n      var styleObjectOrFn = get(theme, \"styles.global\");\n      var globalStyles = runIfFn(styleObjectOrFn, {\n        theme,\n        colorMode\n      });\n      if (!globalStyles) return undefined;\n      var styles = css(globalStyles)(theme);\n      return styles;\n    }\n  });\n};\n//# sourceMappingURL=providers.js.map"]},"metadata":{},"sourceType":"module"}