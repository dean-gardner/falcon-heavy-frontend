{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { TransportType, TransportStatus } from '..';\nconst logger = new Logger('Transport');\nexport class Transport {\n  constructor(name) {\n    this.type = TransportType.POST_MESSAGE;\n    this._isConnected = TransportStatus.NOT_CONNECTED;\n    this.listeners = [];\n    this.name = name;\n  }\n\n  get connectionStatus() {\n    return this._isConnected;\n  }\n\n  static isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve(false);\n    });\n  }\n\n  connect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('connect');\n      this._isConnected = TransportStatus.CONNECTED;\n      return;\n    });\n  }\n\n  reconnect() {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('reconnect');\n      return;\n    });\n  }\n\n  send(message, recipient) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('send', message, recipient);\n      return;\n    });\n  }\n\n  addListener(listener) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('addListener');\n      this.listeners.push(listener);\n      return;\n    });\n  }\n\n  removeListener(listener) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('removeListener');\n      this.listeners = this.listeners.filter(element => element !== listener);\n      return;\n    });\n  }\n\n  notifyListeners(message, connectionInfo) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('notifyListeners');\n\n      if (this.listeners.length === 0) {\n        logger.warn('notifyListeners', '0 listeners notified!', this);\n      } else {\n        logger.log(`Notifying ${this.listeners.length} listeners`, this);\n      }\n\n      this.listeners.forEach(listener => {\n        listener(message, connectionInfo);\n      });\n      return;\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Logger","TransportType","TransportStatus","logger","Transport","constructor","name","type","POST_MESSAGE","_isConnected","NOT_CONNECTED","listeners","connectionStatus","isAvailable","connect","log","CONNECTED","reconnect","send","message","recipient","addListener","listener","push","removeListener","filter","element","notifyListeners","connectionInfo","length","warn","forEach"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/transports/Transport.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from '../utils/Logger';\nimport { TransportType, TransportStatus } from '..';\nconst logger = new Logger('Transport');\nexport class Transport {\n    constructor(name) {\n        this.type = TransportType.POST_MESSAGE;\n        this._isConnected = TransportStatus.NOT_CONNECTED;\n        this.listeners = [];\n        this.name = name;\n    }\n    get connectionStatus() {\n        return this._isConnected;\n    }\n    static isAvailable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve(false);\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('connect');\n            this._isConnected = TransportStatus.CONNECTED;\n            return;\n        });\n    }\n    reconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('reconnect');\n            return;\n        });\n    }\n    send(message, recipient) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('send', message, recipient);\n            return;\n        });\n    }\n    addListener(listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('addListener');\n            this.listeners.push(listener);\n            return;\n        });\n    }\n    removeListener(listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('removeListener');\n            this.listeners = this.listeners.filter((element) => element !== listener);\n            return;\n        });\n    }\n    notifyListeners(message, connectionInfo) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('notifyListeners');\n            if (this.listeners.length === 0) {\n                logger.warn('notifyListeners', '0 listeners notified!', this);\n            }\n            else {\n                logger.log(`Notifying ${this.listeners.length} listeners`, this);\n            }\n            this.listeners.forEach((listener) => {\n                listener(message, connectionInfo);\n            });\n            return;\n        });\n    }\n}\n//# sourceMappingURL=Transport.js.map"]},"metadata":{},"sourceType":"module"}