{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\nvar ConnectableObservable = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._refCount = 0;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return higherOrderRefCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/function () {\n  var connectableProto = ConnectableObservable.prototype;\n  return {\n    operator: {\n      value: null\n    },\n    _refCount: {\n      value: 0,\n      writable: true\n    },\n    _subject: {\n      value: null,\n      writable: true\n    },\n    _connection: {\n      value: null,\n      writable: true\n    },\n    _subscribe: {\n      value: connectableProto._subscribe\n    },\n    _isComplete: {\n      value: connectableProto._isComplete,\n      writable: true\n    },\n    getSubject: {\n      value: connectableProto.getSubject\n    },\n    connect: {\n      value: connectableProto.connect\n    },\n    refCount: {\n      value: connectableProto.refCount\n    }\n  };\n}();\n\nvar ConnectableSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(ConnectableSubscriber, _super);\n\n  function ConnectableSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n\n    _super.prototype._error.call(this, err);\n  };\n\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    _super.prototype._complete.call(this);\n  };\n\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n\n  return ConnectableSubscriber;\n}(SubjectSubscriber);\n\nvar RefCountOperator = /*@__PURE__*/function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.connectable = connectable;\n    return _this;\n  }\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":"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","names":["tslib_1","SubjectSubscriber","Observable","Subscriber","Subscription","refCount","higherOrderRefCount","ConnectableObservable","_super","__extends","source","subjectFactory","_this","call","_refCount","_isComplete","prototype","_subscribe","subscriber","getSubject","subscribe","subject","_subject","isStopped","connect","connection","_connection","add","ConnectableSubscriber","closed","EMPTY","connectableObservableDescriptor","connectableProto","operator","value","writable","destination","connectable","_error","err","_unsubscribe","_complete","unsubscribe","RefCountOperator","refCounter","RefCountSubscriber","subscription","sharedConnection"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/observable/ConnectableObservable.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subject,_Observable,_Subscriber,_Subscription,_operators_refCount PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nvar ConnectableObservable = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        var _this = _super.call(this) || this;\n        _this.source = source;\n        _this.subjectFactory = subjectFactory;\n        _this._refCount = 0;\n        _this._isComplete = false;\n        return _this;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nexport { ConnectableObservable };\nexport var connectableObservableDescriptor = /*@__PURE__*/ (function () {\n    var connectableProto = ConnectableObservable.prototype;\n    return {\n        operator: { value: null },\n        _refCount: { value: 0, writable: true },\n        _subject: { value: null, writable: true },\n        _connection: { value: null, writable: true },\n        _subscribe: { value: connectableProto._subscribe },\n        _isComplete: { value: connectableProto._isComplete, writable: true },\n        getSubject: { value: connectableProto.getSubject },\n        connect: { value: connectableProto.connect },\n        refCount: { value: connectableProto.refCount }\n    };\n})();\nvar ConnectableSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        var _this = _super.call(this, destination) || this;\n        _this.connectable = connectable;\n        return _this;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n"]},"metadata":{},"sourceType":"module"}