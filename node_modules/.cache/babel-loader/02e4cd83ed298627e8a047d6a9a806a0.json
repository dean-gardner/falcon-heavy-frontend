{"ast":null,"code":"import { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\nimport { useUpdateEffect } from \"./use-update-effect\";\n\nfunction preventReturnFocus(containerRef) {\n  var el = containerRef.current;\n  if (!el) return false;\n  var activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\n\n\nexport function useFocusOnHide(containerRef, options) {\n  var {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  var shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n\n    var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n\n    if (el) {\n      focus(el);\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,gBAA1B,EAA4CC,UAA5C,QAA8D,kBAA9D;AACA,SAASC,eAAT,QAAgC,qBAAhC;;AAEA,SAASC,kBAAT,CAA4BC,YAA5B,EAA0C;AACxC,MAAIC,EAAE,GAAGD,YAAY,CAACE,OAAtB;AACA,MAAI,CAACD,EAAL,EAAS,OAAO,KAAP;AACT,MAAIE,aAAa,GAAGP,gBAAgB,CAACK,EAAD,CAApC;AACA,MAAI,CAACE,aAAL,EAAoB,OAAO,KAAP;AACpB,MAAIT,QAAQ,CAACO,EAAD,EAAKE,aAAL,CAAZ,EAAiC,OAAO,KAAP;AACjC,MAAIN,UAAU,CAACM,aAAD,CAAd,EAA+B,OAAO,IAAP;AAC/B,SAAO,KAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASC,cAAT,CAAwBJ,YAAxB,EAAsCK,OAAtC,EAA+C;AACpD,MAAI;AACFC,eAAW,EAAEC,eADX;AAEFC,WAFE;AAGFC;AAHE,MAIAJ,OAJJ;AAKA,MAAIC,WAAW,GAAGC,eAAe,IAAI,CAACC,OAAtC;AACAV,iBAAe,CAAC,MAAM;AACpB,QAAI,CAACQ,WAAL,EAAkB;;AAElB,QAAIP,kBAAkB,CAACC,YAAD,CAAtB,EAAsC;AACpC;AACD;;AAED,QAAIC,EAAE,GAAG,CAACQ,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACP,OAAtC,KAAkDF,YAAY,CAACE,OAAxE;;AAEA,QAAID,EAAJ,EAAQ;AACNN,WAAK,CAACM,EAAD,CAAL;AACD;AACF,GAZc,EAYZ,CAACK,WAAD,EAAcN,YAAd,EAA4BS,QAA5B,CAZY,CAAf;AAaD","names":["contains","focus","getActiveElement","isTabbable","useUpdateEffect","preventReturnFocus","containerRef","el","current","activeElement","useFocusOnHide","options","shouldFocus","shouldFocusProp","visible","focusRef"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-focus-on-hide.js"],"sourcesContent":["import { contains, focus, getActiveElement, isTabbable } from \"@chakra-ui/utils\";\nimport { useUpdateEffect } from \"./use-update-effect\";\n\nfunction preventReturnFocus(containerRef) {\n  var el = containerRef.current;\n  if (!el) return false;\n  var activeElement = getActiveElement(el);\n  if (!activeElement) return false;\n  if (contains(el, activeElement)) return false;\n  if (isTabbable(activeElement)) return true;\n  return false;\n}\n/**\n * Popover hook to manage the focus when the popover closes or hides.\n *\n * We either want to return focus back to the popover trigger or\n * let focus proceed normally if user moved to another interactive\n * element in the viewport.\n */\n\n\nexport function useFocusOnHide(containerRef, options) {\n  var {\n    shouldFocus: shouldFocusProp,\n    visible,\n    focusRef\n  } = options;\n  var shouldFocus = shouldFocusProp && !visible;\n  useUpdateEffect(() => {\n    if (!shouldFocus) return;\n\n    if (preventReturnFocus(containerRef)) {\n      return;\n    }\n\n    var el = (focusRef == null ? void 0 : focusRef.current) || containerRef.current;\n\n    if (el) {\n      focus(el);\n    }\n  }, [shouldFocus, containerRef, focusRef]);\n}\n//# sourceMappingURL=use-focus-on-hide.js.map"]},"metadata":{},"sourceType":"module"}