{"ast":null,"code":"import Color from \"tinycolor2\";\nimport { memoizedGet as get, isEmptyObject } from \"@chakra-ui/utils\";\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\n\nexport var getColor = (theme, color, fallback) => {\n  var hex = get(theme, \"colors.\" + color, color);\n  var isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var tone = color => theme => {\n  var hex = getColor(theme, color);\n  var isDark = Color(hex).isDark();\n  return isDark ? \"dark\" : \"light\";\n};\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isDark = color => theme => tone(color)(theme) === \"dark\";\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isLight = color => theme => tone(color)(theme) === \"light\";\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add\n */\n\nexport var transparentize = (color, opacity) => theme => {\n  var raw = getColor(theme, color);\n  return Color(raw).setAlpha(opacity).toRgbString();\n};\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-1)\n */\n\nexport var whiten = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return Color.mix(raw, \"#fff\", amount).toHexString();\n};\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-1)\n */\n\nexport var blacken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return Color.mix(raw, \"#000\", amount).toHexString();\n};\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-1)\n */\n\nexport var darken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return Color(raw).darken(amount).toHexString();\n};\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-1)\n */\n\nexport var lighten = (color, amount) => theme => Color(getColor(theme, color)).lighten(amount).toHexString();\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var contrast = (fg, bg) => theme => Color.readability(getColor(theme, bg), getColor(theme, fg));\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var isAccessible = (textColor, bgColor, options) => theme => Color.isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\nexport var complementary = color => theme => Color(getColor(theme, color)).complement().toHexString();\nexport function generateStripe(size, color) {\n  if (size === void 0) {\n    size = \"1rem\";\n  }\n\n  if (color === void 0) {\n    color = \"rgba(255, 255, 255, 0.15)\";\n  }\n\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \" + color + \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \" + color + \" 50%,\\n    \" + color + \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\",\n    backgroundSize: size + \" \" + size\n  };\n}\nexport function randomColor(opts) {\n  var fallback = Color.random().toHexString();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  var color = \"#\";\n\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}","map":{"version":3,"mappings":"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","names":["Color","memoizedGet","get","isEmptyObject","getColor","theme","color","fallback","hex","isValid","tone","isDark","isLight","transparentize","opacity","raw","setAlpha","toRgbString","whiten","amount","mix","toHexString","blacken","darken","lighten","contrast","fg","bg","readability","isAccessible","textColor","bgColor","options","isReadable","complementary","complement","generateStripe","size","backgroundImage","backgroundSize","randomColor","opts","random","string","colors","randomColorFromList","randomColorFromString","randomFromList","str","hash","length","toString","i","charCodeAt","j","value","substr","list","index","Math","floor"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/theme-tools/dist/esm/color.js"],"sourcesContent":["import Color from \"tinycolor2\";\nimport { memoizedGet as get, isEmptyObject } from \"@chakra-ui/utils\";\n/**\n * Get the color raw value from theme\n * @param theme - the theme object\n * @param color - the color path (\"green.200\")\n * @param fallback - the fallback color\n */\n\nexport var getColor = (theme, color, fallback) => {\n  var hex = get(theme, \"colors.\" + color, color);\n  var isValid = Color(hex).isValid();\n  return isValid ? hex : fallback;\n};\n/**\n * Determines if the tone of given color is \"light\" or \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var tone = color => theme => {\n  var hex = getColor(theme, color);\n  var isDark = Color(hex).isDark();\n  return isDark ? \"dark\" : \"light\";\n};\n/**\n * Determines if a color tone is \"dark\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isDark = color => theme => tone(color)(theme) === \"dark\";\n/**\n * Determines if a color tone is \"light\"\n * @param color - the color in hex, rgb, or hsl\n */\n\nexport var isLight = color => theme => tone(color)(theme) === \"light\";\n/**\n * Make a color transparent\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add\n */\n\nexport var transparentize = (color, opacity) => theme => {\n  var raw = getColor(theme, color);\n  return Color(raw).setAlpha(opacity).toRgbString();\n};\n/**\n * Add white to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount white to add (0-1)\n */\n\nexport var whiten = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return Color.mix(raw, \"#fff\", amount).toHexString();\n};\n/**\n * Add black to a color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount black to add (0-1)\n */\n\nexport var blacken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return Color.mix(raw, \"#000\", amount).toHexString();\n};\n/**\n * Darken a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to darken (0-1)\n */\n\nexport var darken = (color, amount) => theme => {\n  var raw = getColor(theme, color);\n  return Color(raw).darken(amount).toHexString();\n};\n/**\n * Lighten a specified color\n * @param color - the color in hex, rgb, or hsl\n * @param amount - the amount to lighten (0-1)\n */\n\nexport var lighten = (color, amount) => theme => Color(getColor(theme, color)).lighten(amount).toHexString();\n/**\n * Checks the contract ratio of between 2 colors,\n * based on the Web Content Accessibility Guidelines (Version 2.0).\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var contrast = (fg, bg) => theme => Color.readability(getColor(theme, bg), getColor(theme, fg));\n/**\n * Checks if a color meets the Web Content Accessibility\n * Guidelines (Version 2.0) for constract ratio.\n *\n * @param fg - the foreground or text color\n * @param bg - the background color\n */\n\nexport var isAccessible = (textColor, bgColor, options) => theme => Color.isReadable(getColor(theme, bgColor), getColor(theme, textColor), options);\nexport var complementary = color => theme => Color(getColor(theme, color)).complement().toHexString();\nexport function generateStripe(size, color) {\n  if (size === void 0) {\n    size = \"1rem\";\n  }\n\n  if (color === void 0) {\n    color = \"rgba(255, 255, 255, 0.15)\";\n  }\n\n  return {\n    backgroundImage: \"linear-gradient(\\n    45deg,\\n    \" + color + \" 25%,\\n    transparent 25%,\\n    transparent 50%,\\n    \" + color + \" 50%,\\n    \" + color + \" 75%,\\n    transparent 75%,\\n    transparent\\n  )\",\n    backgroundSize: size + \" \" + size\n  };\n}\nexport function randomColor(opts) {\n  var fallback = Color.random().toHexString();\n\n  if (!opts || isEmptyObject(opts)) {\n    return fallback;\n  }\n\n  if (opts.string && opts.colors) {\n    return randomColorFromList(opts.string, opts.colors);\n  }\n\n  if (opts.string && !opts.colors) {\n    return randomColorFromString(opts.string);\n  }\n\n  if (opts.colors && !opts.string) {\n    return randomFromList(opts.colors);\n  }\n\n  return fallback;\n}\n\nfunction randomColorFromString(str) {\n  var hash = 0;\n  if (str.length === 0) return hash.toString();\n\n  for (var i = 0; i < str.length; i += 1) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    hash = hash & hash;\n  }\n\n  var color = \"#\";\n\n  for (var j = 0; j < 3; j += 1) {\n    var value = hash >> j * 8 & 255;\n    color += (\"00\" + value.toString(16)).substr(-2);\n  }\n\n  return color;\n}\n\nfunction randomColorFromList(str, list) {\n  var index = 0;\n  if (str.length === 0) return list[0];\n\n  for (var i = 0; i < str.length; i += 1) {\n    index = str.charCodeAt(i) + ((index << 5) - index);\n    index = index & index;\n  }\n\n  index = (index % list.length + list.length) % list.length;\n  return list[index];\n}\n\nfunction randomFromList(list) {\n  return list[Math.floor(Math.random() * list.length)];\n}\n//# sourceMappingURL=color.js.map"]},"metadata":{},"sourceType":"module"}