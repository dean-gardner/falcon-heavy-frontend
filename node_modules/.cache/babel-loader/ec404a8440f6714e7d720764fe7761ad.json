{"ast":null,"code":"import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\n\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\n\nvar CONTINUOUS_CHANGE_DELAY = 300;\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\n\nexport function useSpinner(increment, decrement) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  var [isSpinning, setIsSpinning] = useState(false); // This state keeps track of the action (\"increment\" or \"decrement\")\n\n  var [action, setAction] = useState(null); // To increment the value the first time you mousedown, we call that `runOnce`\n\n  var [runOnce, setRunOnce] = useState(true); // Store the timeout instance id in a ref, so we can clear the timeout later\n\n  var timeoutRef = useRef(null); // Clears the timeout from memory\n\n  var removeTimeout = () => clearTimeout(timeoutRef.current);\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n\n\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null); // Function to activate the spinning and increment the value\n\n  var up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment();\n    } // after a delay, keep incrementing at interval (\"spinning up\")\n\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]); // Function to activate the spinning and increment the value\n\n  var down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement();\n    } // after a delay, keep decrementing at interval (\"spinning down\")\n\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]); // Function to stop spinng (useful for mouseup, keyup handlers)\n\n  var stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n\n  useUnmountEffect(removeTimeout);\n  return {\n    up,\n    down,\n    stop\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,WAAT,EAAsBC,MAAtB,EAA8BC,QAA9B,QAA8C,OAA9C;AACA;AACA;AACA;;AAEA,IAAIC,0BAA0B,GAAG,EAAjC;AACA;AACA;AACA;;AAEA,IAAIC,uBAAuB,GAAG,GAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,SAA/B,EAA0C;AAC/C;AACF;AACA;AACE,MAAI,CAACC,UAAD,EAAaC,aAAb,IAA8BP,QAAQ,CAAC,KAAD,CAA1C,CAJ+C,CAII;;AAEnD,MAAI,CAACQ,MAAD,EAASC,SAAT,IAAsBT,QAAQ,CAAC,IAAD,CAAlC,CAN+C,CAML;;AAE1C,MAAI,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,IAAD,CAApC,CAR+C,CAQH;;AAE5C,MAAIY,UAAU,GAAGb,MAAM,CAAC,IAAD,CAAvB,CAV+C,CAUhB;;AAE/B,MAAIc,aAAa,GAAG,MAAMC,YAAY,CAACF,UAAU,CAACG,OAAZ,CAAtC;AACA;AACF;AACA;AACA;;;AAGEnB,aAAW,CAAC,MAAM;AAChB,QAAIY,MAAM,KAAK,WAAf,EAA4B;AAC1BJ,eAAS;AACV;;AAED,QAAII,MAAM,KAAK,WAAf,EAA4B;AAC1BH,eAAS;AACV;AACF,GARU,EAQRC,UAAU,GAAGL,0BAAH,GAAgC,IARlC,CAAX,CAnB+C,CA2BK;;AAEpD,MAAIe,EAAE,GAAGlB,WAAW,CAAC,MAAM;AACzB;AACA,QAAIY,OAAJ,EAAa;AACXN,eAAS;AACV,KAJwB,CAIvB;;;AAGFQ,cAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,MAAM;AACpCN,gBAAU,CAAC,KAAD,CAAV;AACAJ,mBAAa,CAAC,IAAD,CAAb;AACAE,eAAS,CAAC,WAAD,CAAT;AACD,KAJ8B,EAI5BP,uBAJ4B,CAA/B;AAKD,GAZmB,EAYjB,CAACE,SAAD,EAAYM,OAAZ,CAZiB,CAApB,CA7B+C,CAyCrB;;AAE1B,MAAIQ,IAAI,GAAGpB,WAAW,CAAC,MAAM;AAC3B;AACA,QAAIY,OAAJ,EAAa;AACXL,eAAS;AACV,KAJ0B,CAIzB;;;AAGFO,cAAU,CAACG,OAAX,GAAqBE,UAAU,CAAC,MAAM;AACpCN,gBAAU,CAAC,KAAD,CAAV;AACAJ,mBAAa,CAAC,IAAD,CAAb;AACAE,eAAS,CAAC,WAAD,CAAT;AACD,KAJ8B,EAI5BP,uBAJ4B,CAA/B;AAKD,GAZqB,EAYnB,CAACG,SAAD,EAAYK,OAAZ,CAZmB,CAAtB,CA3C+C,CAuDrB;;AAE1B,MAAIS,IAAI,GAAGrB,WAAW,CAAC,MAAM;AAC3Ba,cAAU,CAAC,IAAD,CAAV;AACAJ,iBAAa,CAAC,KAAD,CAAb;AACAM,iBAAa;AACd,GAJqB,EAInB,EAJmB,CAAtB;AAKA;AACF;AACA;AACA;;AAEEhB,kBAAgB,CAACgB,aAAD,CAAhB;AACA,SAAO;AACLG,MADK;AAELE,QAFK;AAGLC;AAHK,GAAP;AAKD","names":["useInterval","useUnmountEffect","useCallback","useRef","useState","CONTINUOUS_CHANGE_INTERVAL","CONTINUOUS_CHANGE_DELAY","useSpinner","increment","decrement","isSpinning","setIsSpinning","action","setAction","runOnce","setRunOnce","timeoutRef","removeTimeout","clearTimeout","current","up","setTimeout","down","stop"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/number-input/dist/esm/use-spinner.js"],"sourcesContent":["import { useInterval, useUnmountEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * When click and hold on a button - the speed of auto changing the value.\n */\n\nvar CONTINUOUS_CHANGE_INTERVAL = 50;\n/**\n * When click and hold on a button - the delay before auto changing the value.\n */\n\nvar CONTINUOUS_CHANGE_DELAY = 300;\n\n/**\n * React hook used in the number input to spin its\n * value on long press of the spin buttons\n *\n * @param increment the function to increment\n * @param decrement the function to decrement\n */\nexport function useSpinner(increment, decrement) {\n  /**\n   * To keep incrementing/decrementing on press, we call that `spinning`\n   */\n  var [isSpinning, setIsSpinning] = useState(false); // This state keeps track of the action (\"increment\" or \"decrement\")\n\n  var [action, setAction] = useState(null); // To increment the value the first time you mousedown, we call that `runOnce`\n\n  var [runOnce, setRunOnce] = useState(true); // Store the timeout instance id in a ref, so we can clear the timeout later\n\n  var timeoutRef = useRef(null); // Clears the timeout from memory\n\n  var removeTimeout = () => clearTimeout(timeoutRef.current);\n  /**\n   * useInterval hook provides a performant way to\n   * update the state value at specific interval\n   */\n\n\n  useInterval(() => {\n    if (action === \"increment\") {\n      increment();\n    }\n\n    if (action === \"decrement\") {\n      decrement();\n    }\n  }, isSpinning ? CONTINUOUS_CHANGE_INTERVAL : null); // Function to activate the spinning and increment the value\n\n  var up = useCallback(() => {\n    // increment the first fime\n    if (runOnce) {\n      increment();\n    } // after a delay, keep incrementing at interval (\"spinning up\")\n\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"increment\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [increment, runOnce]); // Function to activate the spinning and increment the value\n\n  var down = useCallback(() => {\n    // decrement the first fime\n    if (runOnce) {\n      decrement();\n    } // after a delay, keep decrementing at interval (\"spinning down\")\n\n\n    timeoutRef.current = setTimeout(() => {\n      setRunOnce(false);\n      setIsSpinning(true);\n      setAction(\"decrement\");\n    }, CONTINUOUS_CHANGE_DELAY);\n  }, [decrement, runOnce]); // Function to stop spinng (useful for mouseup, keyup handlers)\n\n  var stop = useCallback(() => {\n    setRunOnce(true);\n    setIsSpinning(false);\n    removeTimeout();\n  }, []);\n  /**\n   * If the component unmounts while spinning,\n   * let's clear the timeout as well\n   */\n\n  useUnmountEffect(removeTimeout);\n  return {\n    up,\n    down,\n    stop\n  };\n}\n//# sourceMappingURL=use-spinner.js.map"]},"metadata":{},"sourceType":"module"}