{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, dataAttr, mergeRefs } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/components/useCheckbox\n */\n\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovered] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [checkedState, setCheckedState] = useState(!!defaultIsChecked);\n  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChange]);\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    var notInSync = ref.current.checked && !isChecked || !ref.current.checked && isChecked;\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked);\n    }\n  }, [ref.current]);\n\n  var getCheckboxProps = function getCheckboxProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = event => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  };\n\n  var getLabelProps = function getLabelProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useBoolean","useControllableProp","useSafeLayoutEffect","callAllHandlers","dataAttr","mergeRefs","visuallyHiddenStyle","useCallback","useRef","useState","useCheckbox","props","defaultIsChecked","isChecked","checkedProp","isFocusable","isDisabled","isReadOnly","isRequired","onChange","isIndeterminate","isInvalid","name","value","id","htmlProps","isFocused","setFocused","isHovered","setHovered","isActive","setActive","ref","checkedState","setCheckedState","isControlled","handleChange","event","preventDefault","checked","current","indeterminate","Boolean","trulyDisabled","onKeyDown","on","onKeyUp","off","notInSync","getCheckboxProps","forwardedRef","onPressDown","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","getInputProps","type","onBlur","onFocus","required","disabled","readOnly","style","getLabelProps","stopEvent","onTouchStart","state","stopPropagation"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/checkbox/dist/esm/use-checkbox.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useBoolean, useControllableProp, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, dataAttr, mergeRefs } from \"@chakra-ui/utils\";\nimport { visuallyHiddenStyle } from \"@chakra-ui/visually-hidden\";\nimport { useCallback, useRef, useState } from \"react\";\n\n/**\n * useCheckbox that provides all the state and focus management logic\n * for a checkbox. It is consumed by the `Checkbox` component\n *\n * @see Docs https://chakra-ui.com/components/useCheckbox\n */\nexport function useCheckbox(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    defaultIsChecked,\n    isChecked: checkedProp,\n    isFocusable,\n    isDisabled,\n    isReadOnly,\n    isRequired,\n    onChange,\n    isIndeterminate,\n    isInvalid,\n    name,\n    value,\n    id\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"defaultIsChecked\", \"isChecked\", \"isFocusable\", \"isDisabled\", \"isReadOnly\", \"isRequired\", \"onChange\", \"isIndeterminate\", \"isInvalid\", \"name\", \"value\", \"id\"]);\n\n  var [isFocused, setFocused] = useBoolean();\n  var [isHovered, setHovered] = useBoolean();\n  var [isActive, setActive] = useBoolean();\n  var ref = useRef(null);\n  var [checkedState, setCheckedState] = useState(!!defaultIsChecked);\n  var [isControlled, isChecked] = useControllableProp(checkedProp, checkedState);\n  var handleChange = useCallback(event => {\n    if (isReadOnly || isDisabled) {\n      event.preventDefault();\n      return;\n    }\n\n    if (!isControlled) {\n      if (isChecked) {\n        setCheckedState(event.target.checked);\n      } else {\n        setCheckedState(isIndeterminate ? true : event.target.checked);\n      }\n    }\n\n    onChange == null ? void 0 : onChange(event);\n  }, [isReadOnly, isDisabled, isChecked, isControlled, isIndeterminate, onChange]);\n  useSafeLayoutEffect(() => {\n    if (ref.current) {\n      ref.current.indeterminate = Boolean(isIndeterminate);\n    }\n  }, [isIndeterminate]);\n  var trulyDisabled = isDisabled && !isFocusable;\n  var onKeyDown = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.on();\n    }\n  }, [setActive]);\n  var onKeyUp = useCallback(event => {\n    if (event.key === \" \") {\n      setActive.off();\n    }\n  }, [setActive]);\n  /**\n   * Sync state with uncontrolled form libraries like `react-hook-form`.\n   *\n   * These libraries set the checked value for input fields\n   * using their refs. For the checkbox, it sets `ref.current.checked = true | false` directly.\n   *\n   * This means the `isChecked` state will get out of sync with `ref.current.checked`,\n   * even though the input validation with work, the UI will not be up to date.\n   *\n   * Let's correct that by checking and syncing the state accordingly.\n   */\n\n  useSafeLayoutEffect(() => {\n    if (!ref.current) return;\n    var notInSync = ref.current.checked && !isChecked || !ref.current.checked && isChecked;\n\n    if (notInSync) {\n      setCheckedState(ref.current.checked);\n    }\n  }, [ref.current]);\n\n  var getCheckboxProps = function getCheckboxProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    var onPressDown = event => {\n      // On mousedown, the input blurs and returns focus to the `body`,\n      // we need to prevent this. Native checkboxes keeps focus on `input`\n      event.preventDefault();\n      setActive.on();\n    };\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      \"data-active\": dataAttr(isActive),\n      \"data-hover\": dataAttr(isHovered),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-focus\": dataAttr(isFocused),\n      \"data-indeterminate\": dataAttr(isIndeterminate),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-invalid\": dataAttr(isInvalid),\n      \"data-readonly\": dataAttr(isReadOnly),\n      \"aria-hidden\": true,\n      onMouseDown: callAllHandlers(props.onMouseDown, onPressDown),\n      onMouseUp: callAllHandlers(props.onMouseUp, setActive.off),\n      onMouseEnter: callAllHandlers(props.onMouseEnter, setHovered.on),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, setHovered.off)\n    });\n  };\n\n  var getInputProps = function getInputProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, forwardedRef),\n      type: \"checkbox\",\n      name,\n      value,\n      id,\n      onChange: callAllHandlers(props.onChange, handleChange),\n      onBlur: callAllHandlers(props.onBlur, setFocused.off),\n      onFocus: callAllHandlers(props.onFocus, setFocused.on),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onKeyUp: callAllHandlers(props.onKeyUp, onKeyUp),\n      required: isRequired,\n      checked: isChecked,\n      disabled: trulyDisabled,\n      readOnly: isReadOnly,\n      \"aria-invalid\": isInvalid,\n      \"aria-disabled\": isDisabled,\n      style: visuallyHiddenStyle\n    });\n  };\n\n  var getLabelProps = function getLabelProps(props, forwardedRef) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (forwardedRef === void 0) {\n      forwardedRef = null;\n    }\n\n    return _extends({}, props, {\n      ref: forwardedRef,\n      onMouseDown: callAllHandlers(props.onMouseDown, stopEvent),\n      onTouchStart: callAllHandlers(props.onTouchStart, stopEvent),\n      \"data-disabled\": dataAttr(isDisabled),\n      \"data-checked\": dataAttr(isChecked),\n      \"data-invalid\": dataAttr(isInvalid)\n    });\n  };\n\n  return {\n    state: {\n      isInvalid,\n      isFocused,\n      isChecked,\n      isActive,\n      isHovered,\n      isIndeterminate,\n      isDisabled,\n      isReadOnly,\n      isRequired\n    },\n    getCheckboxProps,\n    getInputProps,\n    getLabelProps,\n    htmlProps\n  };\n}\n/**\n * Prevent `onBlur` being fired when the checkbox label is touched\n */\n\nfunction stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\n//# sourceMappingURL=use-checkbox.js.map"]},"metadata":{},"sourceType":"module"}