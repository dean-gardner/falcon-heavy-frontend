{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { Transport } from '..';\nconst logger = new Logger('LocalTransport'); // Only used for testing\n\nexport class LocalTransport extends Transport {\n  constructor() {\n    super(...arguments);\n\n    this.transformer = message => Promise.resolve(message);\n  }\n\n  static isAvailable() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return Promise.resolve(false);\n    });\n  }\n\n  send(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      logger.log('send', message);\n      const transformedMessage = this.transformer ? this.transformer(message) : message;\n      yield this.notifyListeners(transformedMessage, {});\n      return;\n    });\n  }\n\n}","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,aAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,YAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,QAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,MAAT,QAAuB,iBAAvB;AACA,SAASC,SAAT,QAA0B,IAA1B;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAW,gBAAX,CAAf,C,CACA;;AACA,OAAO,MAAMG,cAAN,SAA6BF,SAA7B,CAAuC;AAC1CG,aAAW,GAAG;AACV,UAAM,GAAGC,SAAT;;AACA,SAAKC,WAAL,GAAoBC,OAAD,IAAalB,OAAO,CAACD,OAAR,CAAgBmB,OAAhB,CAAhC;AACH;;AACiB,SAAXC,WAAW,GAAG;AACjB,WAAO3B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,aAAOQ,OAAO,CAACD,OAAR,CAAgB,KAAhB,CAAP;AACH,KAFe,CAAhB;AAGH;;AACDqB,MAAI,CAACF,OAAD,EAAU;AACV,WAAO1B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChDqB,YAAM,CAACQ,GAAP,CAAW,MAAX,EAAmBH,OAAnB;AACA,YAAMI,kBAAkB,GAAG,KAAKL,WAAL,GAAmB,KAAKA,WAAL,CAAiBC,OAAjB,CAAnB,GAA+CA,OAA1E;AACA,YAAM,KAAKK,eAAL,CAAqBD,kBAArB,EAAyC,EAAzC,CAAN;AACA;AACH,KALe,CAAhB;AAMH;;AAjByC","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Logger","Transport","logger","LocalTransport","constructor","arguments","transformer","message","isAvailable","send","log","transformedMessage","notifyListeners"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/transports/LocalTransport.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from '../utils/Logger';\nimport { Transport } from '..';\nconst logger = new Logger('LocalTransport');\n// Only used for testing\nexport class LocalTransport extends Transport {\n    constructor() {\n        super(...arguments);\n        this.transformer = (message) => Promise.resolve(message);\n    }\n    static isAvailable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve(false);\n        });\n    }\n    send(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('send', message);\n            const transformedMessage = this.transformer ? this.transformer(message) : message;\n            yield this.notifyListeners(transformedMessage, {});\n            return;\n        });\n    }\n}\n//# sourceMappingURL=LocalTransport.js.map"]},"metadata":{},"sourceType":"module"}