{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n\n  return function (source) {\n    return source.lift(new TakeWhileOperator(predicate, inclusive));\n  };\n}\n\nvar TakeWhileOperator = /*@__PURE__*/function () {\n  function TakeWhileOperator(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  TakeWhileOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  };\n\n  return TakeWhileOperator;\n}();\n\nvar TakeWhileSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(TakeWhileSubscriber, _super);\n\n  function TakeWhileSubscriber(destination, predicate, inclusive) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.inclusive = inclusive;\n    _this.index = 0;\n    return _this;\n  }\n\n  TakeWhileSubscriber.prototype._next = function (value) {\n    var destination = this.destination;\n    var result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  };\n\n  TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n    var destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n\n      destination.complete();\n    }\n  };\n\n  return TakeWhileSubscriber;\n}(Subscriber);","map":{"version":3,"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,SAA9B,EAAyC;AAC5C,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACtBA,aAAS,GAAG,KAAZ;AACH;;AACD,SAAO,UAAUC,MAAV,EAAkB;AACrB,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBJ,SAAtB,EAAiCC,SAAjC,CAAZ,CAAP;AACH,GAFD;AAGH;;AACD,IAAIG,iBAAiB,GAAG,aAAe,YAAY;AAC/C,WAASA,iBAAT,CAA2BJ,SAA3B,EAAsCC,SAAtC,EAAiD;AAC7C,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AACDG,mBAAiB,CAACC,SAAlB,CAA4BC,IAA5B,GAAmC,UAAUC,UAAV,EAAsBL,MAAtB,EAA8B;AAC7D,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKP,SAAzC,EAAoD,KAAKC,SAAzD,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOG,iBAAP;AACH,CATsC,EAAvC;;AAUA,IAAIK,mBAAmB,GAAG,aAAe,UAAUC,MAAV,EAAkB;AACvDb,SAAO,CAACc,SAAR,CAAkBF,mBAAlB,EAAuCC,MAAvC;;AACA,WAASD,mBAAT,CAA6BG,WAA7B,EAA0CZ,SAA1C,EAAqDC,SAArD,EAAgE;AAC5D,QAAIY,KAAK,GAAGH,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBM,WAAlB,KAAkC,IAA9C;;AACAC,SAAK,CAACb,SAAN,GAAkBA,SAAlB;AACAa,SAAK,CAACZ,SAAN,GAAkBA,SAAlB;AACAY,SAAK,CAACC,KAAN,GAAc,CAAd;AACA,WAAOD,KAAP;AACH;;AACDJ,qBAAmB,CAACJ,SAApB,CAA8BU,KAA9B,GAAsC,UAAUC,KAAV,EAAiB;AACnD,QAAIJ,WAAW,GAAG,KAAKA,WAAvB;AACA,QAAIK,MAAJ;;AACA,QAAI;AACAA,YAAM,GAAG,KAAKjB,SAAL,CAAegB,KAAf,EAAsB,KAAKF,KAAL,EAAtB,CAAT;AACH,KAFD,CAGA,OAAOI,GAAP,EAAY;AACRN,iBAAW,CAACO,KAAZ,CAAkBD,GAAlB;AACA;AACH;;AACD,SAAKE,cAAL,CAAoBJ,KAApB,EAA2BC,MAA3B;AACH,GAXD;;AAYAR,qBAAmB,CAACJ,SAApB,CAA8Be,cAA9B,GAA+C,UAAUJ,KAAV,EAAiBK,eAAjB,EAAkC;AAC7E,QAAIT,WAAW,GAAG,KAAKA,WAAvB;;AACA,QAAIU,OAAO,CAACD,eAAD,CAAX,EAA8B;AAC1BT,iBAAW,CAACW,IAAZ,CAAiBP,KAAjB;AACH,KAFD,MAGK;AACD,UAAI,KAAKf,SAAT,EAAoB;AAChBW,mBAAW,CAACW,IAAZ,CAAiBP,KAAjB;AACH;;AACDJ,iBAAW,CAACY,QAAZ;AACH;AACJ,GAXD;;AAYA,SAAOf,mBAAP;AACH,CAlCwC,CAkCvCX,UAlCuC,CAAzC","names":["tslib_1","Subscriber","takeWhile","predicate","inclusive","source","lift","TakeWhileOperator","prototype","call","subscriber","subscribe","TakeWhileSubscriber","_super","__extends","destination","_this","index","_next","value","result","err","error","nextOrComplete","predicateResult","Boolean","next","complete"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/takeWhile.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive) {\n    if (inclusive === void 0) {\n        inclusive = false;\n    }\n    return function (source) {\n        return source.lift(new TakeWhileOperator(predicate, inclusive));\n    };\n}\nvar TakeWhileOperator = /*@__PURE__*/ (function () {\n    function TakeWhileOperator(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    TakeWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    };\n    return TakeWhileOperator;\n}());\nvar TakeWhileSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(TakeWhileSubscriber, _super);\n    function TakeWhileSubscriber(destination, predicate, inclusive) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.inclusive = inclusive;\n        _this.index = 0;\n        return _this;\n    }\n    TakeWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        var result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    };\n    TakeWhileSubscriber.prototype.nextOrComplete = function (value, predicateResult) {\n        var destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    };\n    return TakeWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=takeWhile.js.map\n"]},"metadata":{},"sourceType":"module"}