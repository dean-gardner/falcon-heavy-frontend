{"ast":null,"code":"import * as React from \"react\";\nimport ReactFocusLock from \"react-focus-lock\";\nimport { __DEV__, getAllFocusable, focus } from \"@chakra-ui/utils\";\n/**\n * React component to trap focus within an element or component.\n * Mostly used in Modals, Popovers, etc.\n *\n * @see Docs https://chakra-ui.com/components/focuslock\n */\n\nexport var FocusLock = props => {\n  var {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus\n  } = props;\n  var onActivation = React.useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      var focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        focus(contentRef.current);\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  var onDeactivation = React.useCallback(() => {\n    var _finalFocusRef$curren;\n\n    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();\n  }, [finalFocusRef]);\n  var returnFocus = restoreFocus && !finalFocusRef;\n  return /*#__PURE__*/React.createElement(ReactFocusLock, {\n    persistentFocus: persistentFocus,\n    autoFocus: autoFocus,\n    disabled: isDisabled,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation,\n    returnFocus: returnFocus\n  }, children);\n};\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\";\n}\n\nexport default FocusLock;","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,OAAT,EAAkBC,eAAlB,EAAmCC,KAAnC,QAAgD,kBAAhD;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,SAAS,GAAGC,KAAK,IAAI;AAC9B,MAAI;AACFC,mBADE;AAEFC,iBAFE;AAGFC,cAHE;AAIFC,gBAJE;AAKFC,YALE;AAMFC,cANE;AAOFC,aAPE;AAQFC;AARE,MASAR,KATJ;AAUA,MAAIS,YAAY,GAAGf,KAAK,CAACgB,WAAN,CAAkB,MAAM;AACzC,QAAIT,eAAe,IAAI,IAAnB,GAA0B,KAAK,CAA/B,GAAmCA,eAAe,CAACU,OAAvD,EAAgE;AAC9DV,qBAAe,CAACU,OAAhB,CAAwBb,KAAxB;AACD,KAFD,MAEO,IAAIK,UAAU,IAAI,IAAd,GAAqB,KAAK,CAA1B,GAA8BA,UAAU,CAACQ,OAA7C,EAAsD;AAC3D,UAAIC,UAAU,GAAGf,eAAe,CAACM,UAAU,CAACQ,OAAZ,CAAhC;;AAEA,UAAIC,UAAU,CAACC,MAAX,KAAsB,CAA1B,EAA6B;AAC3Bf,aAAK,CAACK,UAAU,CAACQ,OAAZ,CAAL;AACD;AACF;AACF,GAVkB,EAUhB,CAACV,eAAD,EAAkBE,UAAlB,CAVgB,CAAnB;AAWA,MAAIW,cAAc,GAAGpB,KAAK,CAACgB,WAAN,CAAkB,MAAM;AAC3C,QAAIK,qBAAJ;;AAEAb,iBAAa,IAAI,IAAjB,GAAwB,KAAK,CAA7B,GAAiC,CAACa,qBAAqB,GAAGb,aAAa,CAACS,OAAvC,KAAmD,IAAnD,GAA0D,KAAK,CAA/D,GAAmEI,qBAAqB,CAACjB,KAAtB,EAApG;AACD,GAJoB,EAIlB,CAACI,aAAD,CAJkB,CAArB;AAKA,MAAIc,WAAW,GAAGZ,YAAY,IAAI,CAACF,aAAnC;AACA,SAAO,aAAaR,KAAK,CAACuB,aAAN,CAAoBtB,cAApB,EAAoC;AACtDa,mBAAe,EAAEA,eADqC;AAEtDD,aAAS,EAAEA,SAF2C;AAGtDW,YAAQ,EAAEZ,UAH4C;AAItDG,gBAAY,EAAEA,YAJwC;AAKtDK,kBAAc,EAAEA,cALsC;AAMtDE,eAAW,EAAEA;AANyC,GAApC,EAOjBX,QAPiB,CAApB;AAQD,CApCM;;AAsCP,IAAIT,OAAJ,EAAa;AACXG,WAAS,CAACoB,WAAV,GAAwB,WAAxB;AACD;;AAED,eAAepB,SAAf","names":["React","ReactFocusLock","__DEV__","getAllFocusable","focus","FocusLock","props","initialFocusRef","finalFocusRef","contentRef","restoreFocus","children","isDisabled","autoFocus","persistentFocus","onActivation","useCallback","current","focusables","length","onDeactivation","_finalFocusRef$curren","returnFocus","createElement","disabled","displayName"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/focus-lock/dist/esm/index.js"],"sourcesContent":["import * as React from \"react\";\nimport ReactFocusLock from \"react-focus-lock\";\nimport { __DEV__, getAllFocusable, focus } from \"@chakra-ui/utils\";\n\n/**\n * React component to trap focus within an element or component.\n * Mostly used in Modals, Popovers, etc.\n *\n * @see Docs https://chakra-ui.com/components/focuslock\n */\nexport var FocusLock = props => {\n  var {\n    initialFocusRef,\n    finalFocusRef,\n    contentRef,\n    restoreFocus,\n    children,\n    isDisabled,\n    autoFocus,\n    persistentFocus\n  } = props;\n  var onActivation = React.useCallback(() => {\n    if (initialFocusRef == null ? void 0 : initialFocusRef.current) {\n      initialFocusRef.current.focus();\n    } else if (contentRef == null ? void 0 : contentRef.current) {\n      var focusables = getAllFocusable(contentRef.current);\n\n      if (focusables.length === 0) {\n        focus(contentRef.current);\n      }\n    }\n  }, [initialFocusRef, contentRef]);\n  var onDeactivation = React.useCallback(() => {\n    var _finalFocusRef$curren;\n\n    finalFocusRef == null ? void 0 : (_finalFocusRef$curren = finalFocusRef.current) == null ? void 0 : _finalFocusRef$curren.focus();\n  }, [finalFocusRef]);\n  var returnFocus = restoreFocus && !finalFocusRef;\n  return /*#__PURE__*/React.createElement(ReactFocusLock, {\n    persistentFocus: persistentFocus,\n    autoFocus: autoFocus,\n    disabled: isDisabled,\n    onActivation: onActivation,\n    onDeactivation: onDeactivation,\n    returnFocus: returnFocus\n  }, children);\n};\n\nif (__DEV__) {\n  FocusLock.displayName = \"FocusLock\";\n}\n\nexport default FocusLock;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}