{"ast":null,"code":"import { useTheme } from \"@chakra-ui/system\";\nimport { memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useMediaQuery } from \"./use-media-query\";\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\n\nvar Visibility = props => {\n  var {\n    breakpoint,\n    hide,\n    children\n  } = props;\n  var [show] = useMediaQuery(breakpoint);\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nexport var Hide = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nexport var Show = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = (theme, value) => get(theme, \"breakpoints.\" + value, value);\n\nexport function useQuery(props) {\n  var {\n    breakpoint = \"\",\n    below,\n    above\n  } = props;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,WAAW,IAAIC,GAAxB,EAA6BC,OAA7B,QAA4C,kBAA5C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,UAAU,GAAGC,KAAK,IAAI;AACxB,MAAI;AACFC,cADE;AAEFC,QAFE;AAGFC;AAHE,MAIAH,KAJJ;AAKA,MAAI,CAACI,IAAD,IAASN,aAAa,CAACG,UAAD,CAA1B;AACA,MAAII,SAAS,GAAGH,IAAI,GAAG,CAACE,IAAJ,GAAWA,IAA/B;AACA,MAAIE,QAAQ,GAAGD,SAAS,GAAGF,QAAH,GAAc,IAAtC;AACA,SAAOG,QAAP;AACD,CAVD;;AAYA,OAAO,IAAIC,IAAI,GAAGP,KAAK,IAAI;AACzB,MAAI;AACFG;AADE,MAEAH,KAFJ;AAGA,MAAIQ,KAAK,GAAGC,QAAQ,CAACT,KAAD,CAApB;AACA,SAAO,aAAaH,KAAK,CAACa,aAAN,CAAoBX,UAApB,EAAgC;AAClDE,cAAU,EAAEO,KADsC;AAElDN,QAAI,EAAE;AAF4C,GAAhC,EAGjBC,QAHiB,CAApB;AAID,CATM;;AAWP,IAAIP,OAAJ,EAAa;AACXW,MAAI,CAACI,WAAL,GAAmB,MAAnB;AACD;;AAED,OAAO,IAAIC,IAAI,GAAGZ,KAAK,IAAI;AACzB,MAAI;AACFG;AADE,MAEAH,KAFJ;AAGA,MAAIQ,KAAK,GAAGC,QAAQ,CAACT,KAAD,CAApB;AACA,SAAO,aAAaH,KAAK,CAACa,aAAN,CAAoBX,UAApB,EAAgC;AAClDE,cAAU,EAAEO;AADsC,GAAhC,EAEjBL,QAFiB,CAApB;AAGD,CARM;;AAUP,IAAIP,OAAJ,EAAa;AACXgB,MAAI,CAACD,WAAL,GAAmB,MAAnB;AACD;;AAED,IAAIE,aAAa,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkBpB,GAAG,CAACmB,KAAD,EAAQ,iBAAiBC,KAAzB,EAAgCA,KAAhC,CAAzC;;AAEA,OAAO,SAASN,QAAT,CAAkBT,KAAlB,EAAyB;AAC9B,MAAI;AACFC,cAAU,GAAG,EADX;AAEFe,SAFE;AAGFC;AAHE,MAIAjB,KAJJ;AAKA,MAAIc,KAAK,GAAGrB,QAAQ,EAApB;AACA,MAAIyB,OAAO,GAAGL,aAAa,CAACC,KAAD,EAAQE,KAAR,CAA3B;AACA,MAAIG,OAAO,GAAGN,aAAa,CAACC,KAAD,EAAQG,KAAR,CAA3B;AACA,MAAIT,KAAK,GAAGP,UAAZ;;AAEA,MAAIiB,OAAJ,EAAa;AACXV,SAAK,GAAG,iBAAiBU,OAAjB,GAA2B,GAAnC;AACD,GAFD,MAEO,IAAIC,OAAJ,EAAa;AAClBX,SAAK,GAAG,iBAAiBW,OAAjB,GAA2B,GAAnC;AACD;;AAED,SAAOX,KAAP;AACD","names":["useTheme","memoizedGet","get","__DEV__","React","useMediaQuery","Visibility","props","breakpoint","hide","children","show","isVisible","rendered","Hide","query","useQuery","createElement","displayName","Show","getBreakpoint","theme","value","below","above","bpBelow","bpAbove"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/media-query/dist/esm/media-query.js"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\";\nimport { memoizedGet as get, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useMediaQuery } from \"./use-media-query\";\n\n/**\n * Visibility\n *\n * React component to control the visibility of its\n * children based on the current breakpoint\n */\nvar Visibility = props => {\n  var {\n    breakpoint,\n    hide,\n    children\n  } = props;\n  var [show] = useMediaQuery(breakpoint);\n  var isVisible = hide ? !show : show;\n  var rendered = isVisible ? children : null;\n  return rendered;\n};\n\nexport var Hide = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query,\n    hide: true\n  }, children);\n};\n\nif (__DEV__) {\n  Hide.displayName = \"Hide\";\n}\n\nexport var Show = props => {\n  var {\n    children\n  } = props;\n  var query = useQuery(props);\n  return /*#__PURE__*/React.createElement(Visibility, {\n    breakpoint: query\n  }, children);\n};\n\nif (__DEV__) {\n  Show.displayName = \"Show\";\n}\n\nvar getBreakpoint = (theme, value) => get(theme, \"breakpoints.\" + value, value);\n\nexport function useQuery(props) {\n  var {\n    breakpoint = \"\",\n    below,\n    above\n  } = props;\n  var theme = useTheme();\n  var bpBelow = getBreakpoint(theme, below);\n  var bpAbove = getBreakpoint(theme, above);\n  var query = breakpoint;\n\n  if (bpBelow) {\n    query = \"(max-width: \" + bpBelow + \")\";\n  } else if (bpAbove) {\n    query = \"(min-width: \" + bpAbove + \")\";\n  }\n\n  return query;\n}\n//# sourceMappingURL=media-query.js.map"]},"metadata":{},"sourceType":"module"}