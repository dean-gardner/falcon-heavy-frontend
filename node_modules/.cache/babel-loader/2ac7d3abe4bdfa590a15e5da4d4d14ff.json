{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType } from '..';\nexport class IncomingBeaconMessageInterceptor {\n  static intercept(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        message,\n        connectionInfo,\n        appMetadataManager,\n        interceptorCallback\n      } = config;\n\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n          {\n            yield appMetadataManager.addAppMetadata(message.appMetadata);\n            const request = message;\n            interceptorCallback(request, connectionInfo);\n          }\n          break;\n\n        case BeaconMessageType.OperationRequest:\n          {\n            const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);\n            const request = Object.assign({\n              appMetadata\n            }, message);\n            interceptorCallback(request, connectionInfo);\n          }\n          break;\n\n        case BeaconMessageType.SignPayloadRequest:\n          {\n            const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);\n            const request = Object.assign({\n              appMetadata\n            }, message);\n            interceptorCallback(request, connectionInfo);\n          }\n          break;\n\n        case BeaconMessageType.BroadcastRequest:\n          {\n            const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);\n            const request = Object.assign({\n              appMetadata\n            }, message);\n            interceptorCallback(request, connectionInfo);\n          }\n          break;\n\n        default:\n          console.log('Message not handled');\n      }\n    });\n  }\n\n  static getAppMetadata(appMetadataManager, beaconId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const appMetadata = yield appMetadataManager.getAppMetadata(beaconId);\n\n      if (!appMetadata) {\n        throw new Error('AppMetadata not found');\n      }\n\n      return appMetadata;\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BeaconMessageType","IncomingBeaconMessageInterceptor","intercept","config","message","connectionInfo","appMetadataManager","interceptorCallback","type","PermissionRequest","addAppMetadata","appMetadata","request","OperationRequest","getAppMetadata","beaconId","Object","assign","SignPayloadRequest","BroadcastRequest","console","log","Error"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/interceptors/IncomingBeaconMessageInterceptor.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BeaconMessageType } from '..';\nexport class IncomingBeaconMessageInterceptor {\n    static intercept(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { message, connectionInfo, appMetadataManager, interceptorCallback } = config;\n            switch (message.type) {\n                case BeaconMessageType.PermissionRequest:\n                    {\n                        yield appMetadataManager.addAppMetadata(message.appMetadata);\n                        const request = message;\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                case BeaconMessageType.OperationRequest:\n                    {\n                        const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);\n                        const request = Object.assign({ appMetadata }, message);\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                case BeaconMessageType.SignPayloadRequest:\n                    {\n                        const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);\n                        const request = Object.assign({ appMetadata }, message);\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                case BeaconMessageType.BroadcastRequest:\n                    {\n                        const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);\n                        const request = Object.assign({ appMetadata }, message);\n                        interceptorCallback(request, connectionInfo);\n                    }\n                    break;\n                default:\n                    console.log('Message not handled');\n            }\n        });\n    }\n    static getAppMetadata(appMetadataManager, beaconId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const appMetadata = yield appMetadataManager.getAppMetadata(beaconId);\n            if (!appMetadata) {\n                throw new Error('AppMetadata not found');\n            }\n            return appMetadata;\n        });\n    }\n}\n//# sourceMappingURL=IncomingBeaconMessageInterceptor.js.map"]},"metadata":{},"sourceType":"module"}