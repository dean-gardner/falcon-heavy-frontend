{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\n\nexport function useBreakpoint(defaultBreakpoint) {\n  var {\n    breakpoints\n  } = useTheme();\n  var mediaQueries = React.useMemo(() => createMediaQueries(_extends({\n    base: \"0px\"\n  }, breakpoints)), [breakpoints]);\n  var [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    var mediaQuery = mediaQueries.find(_ref => {\n      var {\n        query,\n        breakpoint\n      } = _ref;\n      if (defaultBreakpoint) return breakpoint === defaultBreakpoint;\n      if (isBrowser) return window.matchMedia(query).matches;\n      return undefined;\n    });\n\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  });\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback((query, breakpoint) => {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(() => {\n    var listeners = new Set();\n    mediaQueries.forEach(_ref2 => {\n      var {\n        query\n      } = _ref2,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n      var mediaQuery = window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = () => {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery,\n        handleChange\n      });\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach(_ref3 => {\n        var {\n          mediaQuery,\n          handleChange\n        } = _ref3;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update]);\n  return current;\n}","map":{"version":3,"mappings":"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","names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","useTheme","isBrowser","React","createMediaQueries","useBreakpoint","defaultBreakpoint","breakpoints","mediaQueries","useMemo","base","currentBreakpoint","setCurrentBreakpoint","useState","mediaQuery","find","_ref","query","breakpoint","window","matchMedia","matches","undefined","current","update","useCallback","useEffect","listeners","Set","forEach","_ref2","handleChange","addListener","add","removeListener","_ref3","clear"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/media-query/dist/esm/use-breakpoint.js"],"sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useTheme } from \"@chakra-ui/system\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport React from \"react\";\nimport createMediaQueries from \"./create-media-query\";\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * @param defaultBreakpoint default breakpoint name\n * (in non-window environments like SSR)\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n */\nexport function useBreakpoint(defaultBreakpoint) {\n  var {\n    breakpoints\n  } = useTheme();\n  var mediaQueries = React.useMemo(() => createMediaQueries(_extends({\n    base: \"0px\"\n  }, breakpoints)), [breakpoints]);\n  var [currentBreakpoint, setCurrentBreakpoint] = React.useState(() => {\n    var mediaQuery = mediaQueries.find((_ref) => {\n      var {\n        query,\n        breakpoint\n      } = _ref;\n      if (defaultBreakpoint) return breakpoint === defaultBreakpoint;\n      if (isBrowser) return window.matchMedia(query).matches;\n      return undefined;\n    });\n\n    if (mediaQuery) {\n      var breakpoint = _objectWithoutPropertiesLoose(mediaQuery, [\"query\"]);\n\n      return breakpoint;\n    }\n\n    return undefined;\n  });\n  var current = currentBreakpoint == null ? void 0 : currentBreakpoint.breakpoint;\n  var update = React.useCallback((query, breakpoint) => {\n    if (query.matches && current !== breakpoint.breakpoint) {\n      setCurrentBreakpoint(breakpoint);\n    }\n  }, [current]);\n  React.useEffect(() => {\n    var listeners = new Set();\n    mediaQueries.forEach((_ref2) => {\n      var {\n        query\n      } = _ref2,\n          breakpoint = _objectWithoutPropertiesLoose(_ref2, [\"query\"]);\n\n      var mediaQuery = window.matchMedia(query); // trigger an initial update to determine media query\n\n      update(mediaQuery, breakpoint);\n\n      var handleChange = () => {\n        update(mediaQuery, breakpoint);\n      }; // add media query-listener\n\n\n      mediaQuery.addListener(handleChange); // push the media query list handleChange\n      // so we can use it to remove Listener\n\n      listeners.add({\n        mediaQuery,\n        handleChange\n      });\n      return () => {\n        // clean up 1\n        mediaQuery.removeListener(handleChange);\n      };\n    });\n    return () => {\n      // clean up 2: for safety\n      listeners.forEach((_ref3) => {\n        var {\n          mediaQuery,\n          handleChange\n        } = _ref3;\n        mediaQuery.removeListener(handleChange);\n      });\n      listeners.clear();\n    };\n  }, [mediaQueries, breakpoints, update]);\n  return current;\n}\n//# sourceMappingURL=use-breakpoint.js.map"]},"metadata":{},"sourceType":"module"}