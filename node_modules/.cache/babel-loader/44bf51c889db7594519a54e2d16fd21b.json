{"ast":null,"code":"import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { usePortalManager } from \"./portal-manager\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/components/portal\n */\n\nexport var Portal = props => {\n  var {\n    onMount,\n    onUnmount,\n    children,\n    getContainer\n  } = props;\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n\n  var [portal] = React.useState(() => {\n    if (isBrowser) {\n      var div = document.createElement(\"div\");\n      div.className = \"chakra-portal\";\n      return div;\n    } // for ssr\n\n\n    return null;\n  });\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n\n  var parentPortal = usePortalContext();\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n\n  var manager = usePortalManager();\n  var append = React.useCallback(container => {\n    // if user specified a mount node, do nothing.\n    if (!portal || !container) return; // else, simply append component to the portal node\n\n    container.appendChild(portal);\n  }, [portal]);\n  useSafeLayoutEffect(() => {\n    var _ref, _ref2; // get the custom container from the container prop\n\n\n    var customContainer = getContainer == null ? void 0 : getContainer();\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it is not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n\n    var container = (_ref = (_ref2 = customContainer != null ? customContainer : parentPortal) != null ? _ref2 : manager == null ? void 0 : manager.node) != null ? _ref : document.body;\n    /**\n     * Append portal node to the computed container\n     */\n\n    append(container);\n    onMount == null ? void 0 : onMount();\n    return () => {\n      onUnmount == null ? void 0 : onUnmount();\n      if (!portal) return;\n\n      if (container == null ? void 0 : container.contains(portal)) {\n        container == null ? void 0 : container.removeChild(portal);\n      }\n    };\n  }, [getContainer, portal, parentPortal, onMount, onUnmount, manager == null ? void 0 : manager.node, append]);\n  var portalChildren = (manager == null ? void 0 : manager.zIndex) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chakra-portal-zIndex\",\n    style: {\n      position: \"absolute\",\n      zIndex: manager.zIndex,\n      width: \"100%\"\n    }\n  }, children) : children;\n\n  if (!portal) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, portalChildren);\n  }\n\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {\n    value: portal\n  }, portalChildren), portal);\n};\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}","map":{"version":3,"mappings":"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","names":["useSafeLayoutEffect","createContext","isBrowser","__DEV__","React","ReactDOM","usePortalManager","PortalContextProvider","usePortalContext","strict","name","Portal","props","onMount","onUnmount","children","getContainer","portal","useState","div","document","createElement","className","parentPortal","manager","append","useCallback","container","appendChild","_ref","_ref2","customContainer","node","body","contains","removeChild","portalChildren","zIndex","style","position","width","Fragment","createPortal","value","displayName"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/portal/dist/esm/portal.js"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { createContext, isBrowser, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { usePortalManager } from \"./portal-manager\";\nvar [PortalContextProvider, usePortalContext] = createContext({\n  strict: false,\n  name: \"PortalContext\"\n});\n\n/**\n * Portal\n *\n * Declarative component used to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n *\n * @see Docs https://chakra-ui.com/components/portal\n */\nexport var Portal = props => {\n  var {\n    onMount,\n    onUnmount,\n    children,\n    getContainer\n  } = props;\n  /**\n   * Generate the portal's dom node. We'll wrap the children\n   * in this dom node before mounting it.\n   */\n\n  var [portal] = React.useState(() => {\n    if (isBrowser) {\n      var div = document.createElement(\"div\");\n      div.className = \"chakra-portal\";\n      return div;\n    } // for ssr\n\n\n    return null;\n  });\n  /**\n   * This portal might be nested in another portal.\n   * Let's read from the portal context to check this.\n   */\n\n  var parentPortal = usePortalContext();\n  /**\n   * If there's a PortalManager rendered, let's read from it.\n   * We use the portal manager to manage multiple portals\n   */\n\n  var manager = usePortalManager();\n  var append = React.useCallback(container => {\n    // if user specified a mount node, do nothing.\n    if (!portal || !container) return; // else, simply append component to the portal node\n\n    container.appendChild(portal);\n  }, [portal]);\n  useSafeLayoutEffect(() => {\n    var _ref, _ref2;\n\n    // get the custom container from the container prop\n    var customContainer = getContainer == null ? void 0 : getContainer();\n    /**\n     * We need to know where to mount this portal, we have 4 options:\n     * - If a mountRef is specified, we'll use that as the container\n     * - If portal is nested, use the parent portal node as container.\n     * - If it is not nested, use the manager's node as container\n     * - else use document.body as containers\n     */\n\n    var container = (_ref = (_ref2 = customContainer != null ? customContainer : parentPortal) != null ? _ref2 : manager == null ? void 0 : manager.node) != null ? _ref : document.body;\n    /**\n     * Append portal node to the computed container\n     */\n\n    append(container);\n    onMount == null ? void 0 : onMount();\n    return () => {\n      onUnmount == null ? void 0 : onUnmount();\n      if (!portal) return;\n\n      if (container == null ? void 0 : container.contains(portal)) {\n        container == null ? void 0 : container.removeChild(portal);\n      }\n    };\n  }, [getContainer, portal, parentPortal, onMount, onUnmount, manager == null ? void 0 : manager.node, append]);\n  var portalChildren = (manager == null ? void 0 : manager.zIndex) ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"chakra-portal-zIndex\",\n    style: {\n      position: \"absolute\",\n      zIndex: manager.zIndex,\n      width: \"100%\"\n    }\n  }, children) : children;\n\n  if (!portal) {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, portalChildren);\n  }\n\n  return /*#__PURE__*/ReactDOM.createPortal( /*#__PURE__*/React.createElement(PortalContextProvider, {\n    value: portal\n  }, portalChildren), portal);\n};\n\nif (__DEV__) {\n  Portal.displayName = \"Portal\";\n}\n//# sourceMappingURL=portal.js.map"]},"metadata":{},"sourceType":"module"}