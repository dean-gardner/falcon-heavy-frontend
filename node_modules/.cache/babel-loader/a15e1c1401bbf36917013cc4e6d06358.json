{"ast":null,"code":"export var ExposedPromiseStatus;\n\n(function (ExposedPromiseStatus) {\n  ExposedPromiseStatus[\"PENDING\"] = \"pending\";\n  ExposedPromiseStatus[\"RESOLVED\"] = \"resolved\";\n  ExposedPromiseStatus[\"REJECTED\"] = \"rejected\";\n})(ExposedPromiseStatus || (ExposedPromiseStatus = {}));\n\nconst notInitialized = () => {\n  throw new Error('ExposedPromise not initialized yet.');\n};\n\nexport class ExposedPromise {\n  constructor() {\n    this._resolve = notInitialized;\n    this._reject = notInitialized;\n    this._status = ExposedPromiseStatus.PENDING;\n    this._promise = new Promise((innerResolve, innerReject) => {\n      this._resolve = value => {\n        if (this.isSettled()) {\n          return;\n        }\n\n        this._promiseResult = value;\n        innerResolve(value);\n        this._status = ExposedPromiseStatus.RESOLVED;\n        return;\n      };\n\n      this._reject = reason => {\n        if (this.isSettled()) {\n          return;\n        }\n\n        this._promiseError = reason;\n        innerReject(reason);\n        this._status = ExposedPromiseStatus.REJECTED;\n        return;\n      };\n    });\n  }\n\n  get promise() {\n    return this._promise;\n  }\n\n  get resolve() {\n    return this._resolve;\n  }\n\n  get reject() {\n    return this._reject;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  get promiseResult() {\n    return this._promiseResult;\n  }\n\n  get promiseError() {\n    return this._promiseError;\n  }\n\n  static resolve(value) {\n    const promise = new ExposedPromise();\n    promise.resolve(value);\n    return promise;\n  }\n\n  static reject(reason) {\n    const promise = new ExposedPromise();\n    promise.reject(reason);\n    return promise;\n  }\n\n  isPending() {\n    return this.status === ExposedPromiseStatus.PENDING;\n  }\n\n  isResolved() {\n    return this.status === ExposedPromiseStatus.RESOLVED;\n  }\n\n  isRejected() {\n    return this.status === ExposedPromiseStatus.REJECTED;\n  }\n\n  isSettled() {\n    return this.isResolved() || this.isRejected();\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAO,IAAIA,oBAAJ;;AACP,CAAC,UAAUA,oBAAV,EAAgC;AAC7BA,sBAAoB,CAAC,SAAD,CAApB,GAAkC,SAAlC;AACAA,sBAAoB,CAAC,UAAD,CAApB,GAAmC,UAAnC;AACAA,sBAAoB,CAAC,UAAD,CAApB,GAAmC,UAAnC;AACH,CAJD,EAIGA,oBAAoB,KAAKA,oBAAoB,GAAG,EAA5B,CAJvB;;AAKA,MAAMC,cAAc,GAAG,MAAM;AACzB,QAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH,CAFD;;AAGA,OAAO,MAAMC,cAAN,CAAqB;AACxBC,aAAW,GAAG;AACV,SAAKC,QAAL,GAAgBJ,cAAhB;AACA,SAAKK,OAAL,GAAeL,cAAf;AACA,SAAKM,OAAL,GAAeP,oBAAoB,CAACQ,OAApC;AACA,SAAKC,QAAL,GAAgB,IAAIC,OAAJ,CAAY,CAACC,YAAD,EAAeC,WAAf,KAA+B;AACvD,WAAKP,QAAL,GAAiBQ,KAAD,IAAW;AACvB,YAAI,KAAKC,SAAL,EAAJ,EAAsB;AAClB;AACH;;AACD,aAAKC,cAAL,GAAsBF,KAAtB;AACAF,oBAAY,CAACE,KAAD,CAAZ;AACA,aAAKN,OAAL,GAAeP,oBAAoB,CAACgB,QAApC;AACA;AACH,OARD;;AASA,WAAKV,OAAL,GAAgBW,MAAD,IAAY;AACvB,YAAI,KAAKH,SAAL,EAAJ,EAAsB;AAClB;AACH;;AACD,aAAKI,aAAL,GAAqBD,MAArB;AACAL,mBAAW,CAACK,MAAD,CAAX;AACA,aAAKV,OAAL,GAAeP,oBAAoB,CAACmB,QAApC;AACA;AACH,OARD;AASH,KAnBe,CAAhB;AAoBH;;AACU,MAAPC,OAAO,GAAG;AACV,WAAO,KAAKX,QAAZ;AACH;;AACU,MAAPY,OAAO,GAAG;AACV,WAAO,KAAKhB,QAAZ;AACH;;AACS,MAANiB,MAAM,GAAG;AACT,WAAO,KAAKhB,OAAZ;AACH;;AACS,MAANiB,MAAM,GAAG;AACT,WAAO,KAAKhB,OAAZ;AACH;;AACgB,MAAbiB,aAAa,GAAG;AAChB,WAAO,KAAKT,cAAZ;AACH;;AACe,MAAZU,YAAY,GAAG;AACf,WAAO,KAAKP,aAAZ;AACH;;AACa,SAAPG,OAAO,CAACR,KAAD,EAAQ;AAClB,UAAMO,OAAO,GAAG,IAAIjB,cAAJ,EAAhB;AACAiB,WAAO,CAACC,OAAR,CAAgBR,KAAhB;AACA,WAAOO,OAAP;AACH;;AACY,SAANE,MAAM,CAACL,MAAD,EAAS;AAClB,UAAMG,OAAO,GAAG,IAAIjB,cAAJ,EAAhB;AACAiB,WAAO,CAACE,MAAR,CAAeL,MAAf;AACA,WAAOG,OAAP;AACH;;AACDM,WAAS,GAAG;AACR,WAAO,KAAKH,MAAL,KAAgBvB,oBAAoB,CAACQ,OAA5C;AACH;;AACDmB,YAAU,GAAG;AACT,WAAO,KAAKJ,MAAL,KAAgBvB,oBAAoB,CAACgB,QAA5C;AACH;;AACDY,YAAU,GAAG;AACT,WAAO,KAAKL,MAAL,KAAgBvB,oBAAoB,CAACmB,QAA5C;AACH;;AACDL,WAAS,GAAG;AACR,WAAO,KAAKa,UAAL,MAAqB,KAAKC,UAAL,EAA5B;AACH;;AAjEuB","names":["ExposedPromiseStatus","notInitialized","Error","ExposedPromise","constructor","_resolve","_reject","_status","PENDING","_promise","Promise","innerResolve","innerReject","value","isSettled","_promiseResult","RESOLVED","reason","_promiseError","REJECTED","promise","resolve","reject","status","promiseResult","promiseError","isPending","isResolved","isRejected"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/utils/exposed-promise.js"],"sourcesContent":["export var ExposedPromiseStatus;\n(function (ExposedPromiseStatus) {\n    ExposedPromiseStatus[\"PENDING\"] = \"pending\";\n    ExposedPromiseStatus[\"RESOLVED\"] = \"resolved\";\n    ExposedPromiseStatus[\"REJECTED\"] = \"rejected\";\n})(ExposedPromiseStatus || (ExposedPromiseStatus = {}));\nconst notInitialized = () => {\n    throw new Error('ExposedPromise not initialized yet.');\n};\nexport class ExposedPromise {\n    constructor() {\n        this._resolve = notInitialized;\n        this._reject = notInitialized;\n        this._status = ExposedPromiseStatus.PENDING;\n        this._promise = new Promise((innerResolve, innerReject) => {\n            this._resolve = (value) => {\n                if (this.isSettled()) {\n                    return;\n                }\n                this._promiseResult = value;\n                innerResolve(value);\n                this._status = ExposedPromiseStatus.RESOLVED;\n                return;\n            };\n            this._reject = (reason) => {\n                if (this.isSettled()) {\n                    return;\n                }\n                this._promiseError = reason;\n                innerReject(reason);\n                this._status = ExposedPromiseStatus.REJECTED;\n                return;\n            };\n        });\n    }\n    get promise() {\n        return this._promise;\n    }\n    get resolve() {\n        return this._resolve;\n    }\n    get reject() {\n        return this._reject;\n    }\n    get status() {\n        return this._status;\n    }\n    get promiseResult() {\n        return this._promiseResult;\n    }\n    get promiseError() {\n        return this._promiseError;\n    }\n    static resolve(value) {\n        const promise = new ExposedPromise();\n        promise.resolve(value);\n        return promise;\n    }\n    static reject(reason) {\n        const promise = new ExposedPromise();\n        promise.reject(reason);\n        return promise;\n    }\n    isPending() {\n        return this.status === ExposedPromiseStatus.PENDING;\n    }\n    isResolved() {\n        return this.status === ExposedPromiseStatus.RESOLVED;\n    }\n    isRejected() {\n        return this.status === ExposedPromiseStatus.REJECTED;\n    }\n    isSettled() {\n        return this.isResolved() || this.isRejected();\n    }\n}\n//# sourceMappingURL=exposed-promise.js.map"]},"metadata":{},"sourceType":"module"}