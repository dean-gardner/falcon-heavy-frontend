{"ast":null,"code":"import * as React from \"react\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React Hook that provides a declarative `setInterval`\n *\n * @param callback the callback to execute at interval\n * @param delay the `setInterval` delay (in ms)\n */\n\nexport function useInterval(callback, delay) {\n  var callbackRef = useLatestRef(callback);\n  React.useEffect(() => {\n    var intervalId = null;\n\n    var tick = () => callbackRef.current == null ? void 0 : callbackRef.current();\n\n    if (delay !== null) {\n      intervalId = window.setInterval(tick, delay);\n    }\n\n    return () => {\n      if (intervalId) {\n        window.clearInterval(intervalId);\n      }\n    };\n  }, [delay, callbackRef]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,KAA/B,EAAsC;AAC3C,MAAIC,WAAW,GAAGJ,YAAY,CAACE,QAAD,CAA9B;AACAH,OAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,QAAIC,UAAU,GAAG,IAAjB;;AAEA,QAAIC,IAAI,GAAG,MAAMH,WAAW,CAACI,OAAZ,IAAuB,IAAvB,GAA8B,KAAK,CAAnC,GAAuCJ,WAAW,CAACI,OAAZ,EAAxD;;AAEA,QAAIL,KAAK,KAAK,IAAd,EAAoB;AAClBG,gBAAU,GAAGG,MAAM,CAACC,WAAP,CAAmBH,IAAnB,EAAyBJ,KAAzB,CAAb;AACD;;AAED,WAAO,MAAM;AACX,UAAIG,UAAJ,EAAgB;AACdG,cAAM,CAACE,aAAP,CAAqBL,UAArB;AACD;AACF,KAJD;AAKD,GAdD,EAcG,CAACH,KAAD,EAAQC,WAAR,CAdH;AAeD","names":["React","useLatestRef","useInterval","callback","delay","callbackRef","useEffect","intervalId","tick","current","window","setInterval","clearInterval"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-interval.js"],"sourcesContent":["import * as React from \"react\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React Hook that provides a declarative `setInterval`\n *\n * @param callback the callback to execute at interval\n * @param delay the `setInterval` delay (in ms)\n */\n\nexport function useInterval(callback, delay) {\n  var callbackRef = useLatestRef(callback);\n  React.useEffect(() => {\n    var intervalId = null;\n\n    var tick = () => callbackRef.current == null ? void 0 : callbackRef.current();\n\n    if (delay !== null) {\n      intervalId = window.setInterval(tick, delay);\n    }\n\n    return () => {\n      if (intervalId) {\n        window.clearInterval(intervalId);\n      }\n    };\n  }, [delay, callbackRef]);\n}\n//# sourceMappingURL=use-interval.js.map"]},"metadata":{},"sourceType":"module"}