{"ast":null,"code":"import { isNotNumber } from \"./assertion\";\nimport { warn } from \"./function\";\nexport var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;\nexport var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;\n/**\n * Convert a value to number\n * @param value the value to convert\n */\n\nfunction toNumber(value) {\n  var num = parseFloat(value);\n  return isNotNumber(num) ? 0 : num;\n}\n/**\n * Converts a value to a specific precision (or decimal points).\n *\n * Returns a string representing a number in fixed-point notation.\n *\n * @param value the value to convert\n * @param precision the precision or decimal points\n */\n\n\nexport function toPrecision(value, precision) {\n  var nextValue = toNumber(value);\n  var scaleFactor = 10 ** (precision != null ? precision : 10);\n  nextValue = Math.round(nextValue * scaleFactor) / scaleFactor;\n  return precision ? nextValue.toFixed(precision) : nextValue.toString();\n}\n/**\n * Counts the number of decimal places a number has\n *\n * @param value the decimal value to count\n */\n\nexport function countDecimalPlaces(value) {\n  if (!Number.isFinite(value)) return 0;\n  var e = 1;\n  var p = 0;\n\n  while (Math.round(value * e) / e !== value) {\n    e *= 10;\n    p += 1;\n  }\n\n  return p;\n}\n/**\n * Convert a value to percentage based on lower and upper bound values\n *\n * @param value the value in number\n * @param min the minimum value\n * @param max the maximum value\n */\n\nexport function valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\n/**\n * Calculate the value based on percentage, lower and upper bound values\n *\n * @param percent the percent value in decimals (e.g 0.6, 0.3)\n * @param min the minimum value\n * @param max the maximum value\n */\n\nexport function percentToValue(percent, min, max) {\n  return (max - min) * percent + min;\n}\n/**\n * Rounds a specific value to the next or previous step\n *\n * @param value the value to round\n * @param from the number that stepping started from\n * @param step the specified step\n */\n\nexport function roundValueToStep(value, from, step) {\n  var nextValue = Math.round((value - from) / step) * step + from;\n  var precision = countDecimalPlaces(step);\n  return toPrecision(nextValue, precision);\n}\n/**\n * Clamps a value to ensure it stays within the min and max range.\n *\n * @param value the value to clamp\n * @param min the minimum value\n * @param max the maximum value\n */\n\nexport function clampValue(value, min, max) {\n  if (value == null) return value;\n  warn({\n    condition: max < min,\n    message: \"clamp: max cannot be less than min\"\n  });\n  return Math.min(Math.max(value, min), max);\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAASC,IAAT,QAAqB,YAArB;AACA,OAAO,IAAIC,cAAc,GAAGC,MAAM,CAACC,gBAAP,IAA2B,CAAC,gBAAjD;AACP,OAAO,IAAIC,cAAc,GAAGF,MAAM,CAACG,gBAAP,IAA2B,gBAAhD;AACP;AACA;AACA;AACA;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,MAAIC,GAAG,GAAGC,UAAU,CAACF,KAAD,CAApB;AACA,SAAOR,WAAW,CAACS,GAAD,CAAX,GAAmB,CAAnB,GAAuBA,GAA9B;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASE,WAAT,CAAqBH,KAArB,EAA4BI,SAA5B,EAAuC;AAC5C,MAAIC,SAAS,GAAGN,QAAQ,CAACC,KAAD,CAAxB;AACA,MAAIM,WAAW,GAAG,OAAOF,SAAS,IAAI,IAAb,GAAoBA,SAApB,GAAgC,EAAvC,CAAlB;AACAC,WAAS,GAAGE,IAAI,CAACC,KAAL,CAAWH,SAAS,GAAGC,WAAvB,IAAsCA,WAAlD;AACA,SAAOF,SAAS,GAAGC,SAAS,CAACI,OAAV,CAAkBL,SAAlB,CAAH,GAAkCC,SAAS,CAACK,QAAV,EAAlD;AACD;AACD;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BX,KAA5B,EAAmC;AACxC,MAAI,CAACL,MAAM,CAACiB,QAAP,CAAgBZ,KAAhB,CAAL,EAA6B,OAAO,CAAP;AAC7B,MAAIa,CAAC,GAAG,CAAR;AACA,MAAIC,CAAC,GAAG,CAAR;;AAEA,SAAOP,IAAI,CAACC,KAAL,CAAWR,KAAK,GAAGa,CAAnB,IAAwBA,CAAxB,KAA8Bb,KAArC,EAA4C;AAC1Ca,KAAC,IAAI,EAAL;AACAC,KAAC,IAAI,CAAL;AACD;;AAED,SAAOA,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,cAAT,CAAwBf,KAAxB,EAA+BgB,GAA/B,EAAoCC,GAApC,EAAyC;AAC9C,SAAO,CAACjB,KAAK,GAAGgB,GAAT,IAAgB,GAAhB,IAAuBC,GAAG,GAAGD,GAA7B,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASE,cAAT,CAAwBC,OAAxB,EAAiCH,GAAjC,EAAsCC,GAAtC,EAA2C;AAChD,SAAO,CAACA,GAAG,GAAGD,GAAP,IAAcG,OAAd,GAAwBH,GAA/B;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASI,gBAAT,CAA0BpB,KAA1B,EAAiCqB,IAAjC,EAAuCC,IAAvC,EAA6C;AAClD,MAAIjB,SAAS,GAAGE,IAAI,CAACC,KAAL,CAAW,CAACR,KAAK,GAAGqB,IAAT,IAAiBC,IAA5B,IAAoCA,IAApC,GAA2CD,IAA3D;AACA,MAAIjB,SAAS,GAAGO,kBAAkB,CAACW,IAAD,CAAlC;AACA,SAAOnB,WAAW,CAACE,SAAD,EAAYD,SAAZ,CAAlB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASmB,UAAT,CAAoBvB,KAApB,EAA2BgB,GAA3B,EAAgCC,GAAhC,EAAqC;AAC1C,MAAIjB,KAAK,IAAI,IAAb,EAAmB,OAAOA,KAAP;AACnBP,MAAI,CAAC;AACH+B,aAAS,EAAEP,GAAG,GAAGD,GADd;AAEHS,WAAO,EAAE;AAFN,GAAD,CAAJ;AAIA,SAAOlB,IAAI,CAACS,GAAL,CAAST,IAAI,CAACU,GAAL,CAASjB,KAAT,EAAgBgB,GAAhB,CAAT,EAA+BC,GAA/B,CAAP;AACD","names":["isNotNumber","warn","minSafeInteger","Number","MIN_SAFE_INTEGER","maxSafeInteger","MAX_SAFE_INTEGER","toNumber","value","num","parseFloat","toPrecision","precision","nextValue","scaleFactor","Math","round","toFixed","toString","countDecimalPlaces","isFinite","e","p","valueToPercent","min","max","percentToValue","percent","roundValueToStep","from","step","clampValue","condition","message"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/utils/dist/esm/number.js"],"sourcesContent":["import { isNotNumber } from \"./assertion\";\nimport { warn } from \"./function\";\nexport var minSafeInteger = Number.MIN_SAFE_INTEGER || -9007199254740991;\nexport var maxSafeInteger = Number.MAX_SAFE_INTEGER || 9007199254740991;\n/**\n * Convert a value to number\n * @param value the value to convert\n */\n\nfunction toNumber(value) {\n  var num = parseFloat(value);\n  return isNotNumber(num) ? 0 : num;\n}\n/**\n * Converts a value to a specific precision (or decimal points).\n *\n * Returns a string representing a number in fixed-point notation.\n *\n * @param value the value to convert\n * @param precision the precision or decimal points\n */\n\n\nexport function toPrecision(value, precision) {\n  var nextValue = toNumber(value);\n  var scaleFactor = 10 ** (precision != null ? precision : 10);\n  nextValue = Math.round(nextValue * scaleFactor) / scaleFactor;\n  return precision ? nextValue.toFixed(precision) : nextValue.toString();\n}\n/**\n * Counts the number of decimal places a number has\n *\n * @param value the decimal value to count\n */\n\nexport function countDecimalPlaces(value) {\n  if (!Number.isFinite(value)) return 0;\n  var e = 1;\n  var p = 0;\n\n  while (Math.round(value * e) / e !== value) {\n    e *= 10;\n    p += 1;\n  }\n\n  return p;\n}\n/**\n * Convert a value to percentage based on lower and upper bound values\n *\n * @param value the value in number\n * @param min the minimum value\n * @param max the maximum value\n */\n\nexport function valueToPercent(value, min, max) {\n  return (value - min) * 100 / (max - min);\n}\n/**\n * Calculate the value based on percentage, lower and upper bound values\n *\n * @param percent the percent value in decimals (e.g 0.6, 0.3)\n * @param min the minimum value\n * @param max the maximum value\n */\n\nexport function percentToValue(percent, min, max) {\n  return (max - min) * percent + min;\n}\n/**\n * Rounds a specific value to the next or previous step\n *\n * @param value the value to round\n * @param from the number that stepping started from\n * @param step the specified step\n */\n\nexport function roundValueToStep(value, from, step) {\n  var nextValue = Math.round((value - from) / step) * step + from;\n  var precision = countDecimalPlaces(step);\n  return toPrecision(nextValue, precision);\n}\n/**\n * Clamps a value to ensure it stays within the min and max range.\n *\n * @param value the value to clamp\n * @param min the minimum value\n * @param max the maximum value\n */\n\nexport function clampValue(value, min, max) {\n  if (value == null) return value;\n  warn({\n    condition: max < min,\n    message: \"clamp: max cannot be less than min\"\n  });\n  return Math.min(Math.max(value, min), max);\n}\n//# sourceMappingURL=number.js.map"]},"metadata":{},"sourceType":"module"}