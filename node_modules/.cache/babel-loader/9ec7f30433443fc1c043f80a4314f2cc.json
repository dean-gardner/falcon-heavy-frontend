{"ast":null,"code":"import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\n\nexport function useImage(props) {\n  var {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  var [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(() => {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet;\n    }\n\n    if (sizes) {\n      img.sizes = sizes;\n    }\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError]);\n\n  var flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}","map":{"version":3,"mappings":"AAAA,SAASA,mBAAT,QAAoC,kBAApC;AACA,SAASC,WAAT,EAAsBC,SAAtB,EAAiCC,MAAjC,EAAyCC,QAAzC,QAAyD,OAAzD;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,MAAI;AACFC,OADE;AAEFC,UAFE;AAGFC,UAHE;AAIFC,WAJE;AAKFC,eALE;AAMFC,SANE;AAOFC;AAPE,MAQAP,KARJ;AASA,MAAI,CAACQ,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,SAAD,CAAlC;AACAF,WAAS,CAAC,MAAM;AACda,aAAS,CAACR,GAAG,GAAG,SAAH,GAAe,SAAnB,CAAT;AACD,GAFQ,EAEN,CAACA,GAAD,CAFM,CAAT;AAGA,MAAIS,QAAQ,GAAGb,MAAM,EAArB;AACA,MAAIc,IAAI,GAAGhB,WAAW,CAAC,MAAM;AAC3B,QAAI,CAACM,GAAL,EAAU;AACVW,SAAK;AACL,QAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,OAAG,CAACZ,GAAJ,GAAUA,GAAV;;AAEA,QAAII,WAAJ,EAAiB;AACfQ,SAAG,CAACR,WAAJ,GAAkBA,WAAlB;AACD;;AAED,QAAIH,MAAJ,EAAY;AACVW,SAAG,CAACE,MAAJ,GAAab,MAAb;AACD;;AAED,QAAII,KAAJ,EAAW;AACTO,SAAG,CAACP,KAAJ,GAAYA,KAAZ;AACD;;AAEDO,OAAG,CAACG,MAAJ,GAAaC,KAAK,IAAI;AACpBL,WAAK;AACLH,eAAS,CAAC,QAAD,CAAT;AACAN,YAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACc,KAAD,CAAhC;AACD,KAJD;;AAMAJ,OAAG,CAACK,OAAJ,GAAcC,KAAK,IAAI;AACrBP,WAAK;AACLH,eAAS,CAAC,QAAD,CAAT;AACAL,aAAO,IAAI,IAAX,GAAkB,KAAK,CAAvB,GAA2BA,OAAO,CAACe,KAAD,CAAlC;AACD,KAJD;;AAMAT,YAAQ,CAACU,OAAT,GAAmBP,GAAnB;AACD,GA/BqB,EA+BnB,CAACZ,GAAD,EAAMI,WAAN,EAAmBH,MAAnB,EAA2BI,KAA3B,EAAkCH,MAAlC,EAA0CC,OAA1C,CA/BmB,CAAtB;;AAiCA,MAAIQ,KAAK,GAAG,MAAM;AAChB,QAAIF,QAAQ,CAACU,OAAb,EAAsB;AACpBV,cAAQ,CAACU,OAAT,CAAiBJ,MAAjB,GAA0B,IAA1B;AACAN,cAAQ,CAACU,OAAT,CAAiBF,OAAjB,GAA2B,IAA3B;AACAR,cAAQ,CAACU,OAAT,GAAmB,IAAnB;AACD;AACF,GAND;;AAQA1B,qBAAmB,CAAC,MAAM;AACxB;AACJ;AACA;AACA;AACI,QAAIa,cAAJ,EAAoB,OAAOc,SAAP;;AAEpB,QAAIb,MAAM,KAAK,SAAf,EAA0B;AACxBG,UAAI;AACL;;AAED,WAAO,MAAM;AACXC,WAAK;AACN,KAFD;AAGD,GAdkB,EAchB,CAACJ,MAAD,EAASG,IAAT,EAAeJ,cAAf,CAdgB,CAAnB;AAeA;AACF;AACA;AACA;;AAEE,SAAOA,cAAc,GAAG,QAAH,GAAcC,MAAnC;AACD","names":["useSafeLayoutEffect","useCallback","useEffect","useRef","useState","useImage","props","src","srcSet","onLoad","onError","crossOrigin","sizes","ignoreFallback","status","setStatus","imageRef","load","flush","img","Image","srcset","onload","event","onerror","error","current","undefined"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/image/dist/esm/use-image.js"],"sourcesContent":["import { useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\n\n/**\n * React hook that loads an image in the browser,\n * and let's us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props) {\n  var {\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback\n  } = props;\n  var [status, setStatus] = useState(\"pending\");\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\");\n  }, [src]);\n  var imageRef = useRef();\n  var load = useCallback(() => {\n    if (!src) return;\n    flush();\n    var img = new Image();\n    img.src = src;\n\n    if (crossOrigin) {\n      img.crossOrigin = crossOrigin;\n    }\n\n    if (srcSet) {\n      img.srcset = srcSet;\n    }\n\n    if (sizes) {\n      img.sizes = sizes;\n    }\n\n    img.onload = event => {\n      flush();\n      setStatus(\"loaded\");\n      onLoad == null ? void 0 : onLoad(event);\n    };\n\n    img.onerror = error => {\n      flush();\n      setStatus(\"failed\");\n      onError == null ? void 0 : onError(error);\n    };\n\n    imageRef.current = img;\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError]);\n\n  var flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null;\n      imageRef.current.onerror = null;\n      imageRef.current = null;\n    }\n  };\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined;\n\n    if (status === \"loading\") {\n      load();\n    }\n\n    return () => {\n      flush();\n    };\n  }, [status, load, ignoreFallback]);\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n\n  return ignoreFallback ? \"loaded\" : status;\n}\n//# sourceMappingURL=use-image.js.map"]},"metadata":{},"sourceType":"module"}