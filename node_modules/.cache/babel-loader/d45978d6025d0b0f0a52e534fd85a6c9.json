{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nvar BufferToggleOperator = /*@__PURE__*/function () {\n  function BufferToggleOperator(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  BufferToggleOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  };\n\n  return BufferToggleOperator;\n}();\n\nvar BufferToggleSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(BufferToggleSubscriber, _super);\n\n  function BufferToggleSubscriber(destination, openings, closingSelector) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.closingSelector = closingSelector;\n    _this.contexts = [];\n\n    _this.add(subscribeToResult(_this, openings));\n\n    return _this;\n  }\n\n  BufferToggleSubscriber.prototype._next = function (value) {\n    var contexts = this.contexts;\n    var len = contexts.length;\n\n    for (var i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  };\n\n  BufferToggleSubscriber.prototype._error = function (err) {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_1 = contexts.shift();\n      context_1.subscription.unsubscribe();\n      context_1.buffer = null;\n      context_1.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._error.call(this, err);\n  };\n\n  BufferToggleSubscriber.prototype._complete = function () {\n    var contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      var context_2 = contexts.shift();\n      this.destination.next(context_2.buffer);\n      context_2.subscription.unsubscribe();\n      context_2.buffer = null;\n      context_2.subscription = null;\n    }\n\n    this.contexts = null;\n\n    _super.prototype._complete.call(this);\n  };\n\n  BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  };\n\n  BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n    this.closeBuffer(innerSub.context);\n  };\n\n  BufferToggleSubscriber.prototype.openBuffer = function (value) {\n    try {\n      var closingSelector = this.closingSelector;\n      var closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  };\n\n  BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n    var contexts = this.contexts;\n\n    if (contexts && context) {\n      var buffer = context.buffer,\n          subscription = context.subscription;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  };\n\n  BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n    var contexts = this.contexts;\n    var buffer = [];\n    var subscription = new Subscription();\n    var context = {\n      buffer: buffer,\n      subscription: subscription\n    };\n    contexts.push(context);\n    var innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  };\n\n  return BufferToggleSubscriber;\n}(OuterSubscriber);","map":{"version":3,"mappings":"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","names":["tslib_1","Subscription","subscribeToResult","OuterSubscriber","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","lift","BufferToggleOperator","prototype","call","subscriber","subscribe","BufferToggleSubscriber","_super","__extends","destination","_this","contexts","add","_next","value","len","length","i","buffer","push","_error","err","context_1","shift","subscription","unsubscribe","_complete","context_2","next","notifyNext","outerValue","innerValue","closeBuffer","openBuffer","notifyComplete","innerSub","context","closingNotifier","trySubscribe","splice","indexOf","remove","innerSubscription","closed"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/bufferToggle.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscription,_util_subscribeToResult,_OuterSubscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nvar BufferToggleOperator = /*@__PURE__*/ (function () {\n    function BufferToggleOperator(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    BufferToggleOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    };\n    return BufferToggleOperator;\n}());\nvar BufferToggleSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(BufferToggleSubscriber, _super);\n    function BufferToggleSubscriber(destination, openings, closingSelector) {\n        var _this = _super.call(this, destination) || this;\n        _this.closingSelector = closingSelector;\n        _this.contexts = [];\n        _this.add(subscribeToResult(_this, openings));\n        return _this;\n    }\n    BufferToggleSubscriber.prototype._next = function (value) {\n        var contexts = this.contexts;\n        var len = contexts.length;\n        for (var i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    };\n    BufferToggleSubscriber.prototype._error = function (err) {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_1 = contexts.shift();\n            context_1.subscription.unsubscribe();\n            context_1.buffer = null;\n            context_1.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._error.call(this, err);\n    };\n    BufferToggleSubscriber.prototype._complete = function () {\n        var contexts = this.contexts;\n        while (contexts.length > 0) {\n            var context_2 = contexts.shift();\n            this.destination.next(context_2.buffer);\n            context_2.subscription.unsubscribe();\n            context_2.buffer = null;\n            context_2.subscription = null;\n        }\n        this.contexts = null;\n        _super.prototype._complete.call(this);\n    };\n    BufferToggleSubscriber.prototype.notifyNext = function (outerValue, innerValue) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    };\n    BufferToggleSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.closeBuffer(innerSub.context);\n    };\n    BufferToggleSubscriber.prototype.openBuffer = function (value) {\n        try {\n            var closingSelector = this.closingSelector;\n            var closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    BufferToggleSubscriber.prototype.closeBuffer = function (context) {\n        var contexts = this.contexts;\n        if (contexts && context) {\n            var buffer = context.buffer, subscription = context.subscription;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    };\n    BufferToggleSubscriber.prototype.trySubscribe = function (closingNotifier) {\n        var contexts = this.contexts;\n        var buffer = [];\n        var subscription = new Subscription();\n        var context = { buffer: buffer, subscription: subscription };\n        contexts.push(context);\n        var innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    };\n    return BufferToggleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=bufferToggle.js.map\n"]},"metadata":{},"sourceType":"module"}