{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n  return function (source) {\n    return source.lift(new EveryOperator(predicate, thisArg, source));\n  };\n}\n\nvar EveryOperator = /*@__PURE__*/function () {\n  function EveryOperator(predicate, thisArg, source) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n  }\n\n  EveryOperator.prototype.call = function (observer, source) {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  };\n\n  return EveryOperator;\n}();\n\nvar EverySubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(EverySubscriber, _super);\n\n  function EverySubscriber(destination, predicate, thisArg, source) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.predicate = predicate;\n    _this.thisArg = thisArg;\n    _this.source = source;\n    _this.index = 0;\n    _this.thisArg = thisArg || _this;\n    return _this;\n  }\n\n  EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  };\n\n  EverySubscriber.prototype._next = function (value) {\n    var result = false;\n\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  };\n\n  EverySubscriber.prototype._complete = function () {\n    this.notifyComplete(true);\n  };\n\n  return EverySubscriber;\n}(Subscriber);","map":{"version":3,"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,KAAT,CAAeC,SAAf,EAA0BC,OAA1B,EAAmC;AACtC,SAAO,UAAUC,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,aAAJ,CAAkBJ,SAAlB,EAA6BC,OAA7B,EAAsCC,MAAtC,CAAZ,CAAP;AAAoE,GAA/F;AACH;;AACD,IAAIE,aAAa,GAAG,aAAe,YAAY;AAC3C,WAASA,aAAT,CAAuBJ,SAAvB,EAAkCC,OAAlC,EAA2CC,MAA3C,EAAmD;AAC/C,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDE,eAAa,CAACC,SAAd,CAAwBC,IAAxB,GAA+B,UAAUC,QAAV,EAAoBL,MAApB,EAA4B;AACvD,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,eAAJ,CAAoBF,QAApB,EAA8B,KAAKP,SAAnC,EAA8C,KAAKC,OAAnD,EAA4D,KAAKC,MAAjE,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOE,aAAP;AACH,CAVkC,EAAnC;;AAWA,IAAIK,eAAe,GAAG,aAAe,UAAUC,MAAV,EAAkB;AACnDb,SAAO,CAACc,SAAR,CAAkBF,eAAlB,EAAmCC,MAAnC;;AACA,WAASD,eAAT,CAAyBG,WAAzB,EAAsCZ,SAAtC,EAAiDC,OAAjD,EAA0DC,MAA1D,EAAkE;AAC9D,QAAIW,KAAK,GAAGH,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBM,WAAlB,KAAkC,IAA9C;;AACAC,SAAK,CAACb,SAAN,GAAkBA,SAAlB;AACAa,SAAK,CAACZ,OAAN,GAAgBA,OAAhB;AACAY,SAAK,CAACX,MAAN,GAAeA,MAAf;AACAW,SAAK,CAACC,KAAN,GAAc,CAAd;AACAD,SAAK,CAACZ,OAAN,GAAgBA,OAAO,IAAIY,KAA3B;AACA,WAAOA,KAAP;AACH;;AACDJ,iBAAe,CAACJ,SAAhB,CAA0BU,cAA1B,GAA2C,UAAUC,eAAV,EAA2B;AAClE,SAAKJ,WAAL,CAAiBK,IAAjB,CAAsBD,eAAtB;AACA,SAAKJ,WAAL,CAAiBM,QAAjB;AACH,GAHD;;AAIAT,iBAAe,CAACJ,SAAhB,CAA0Bc,KAA1B,GAAkC,UAAUC,KAAV,EAAiB;AAC/C,QAAIC,MAAM,GAAG,KAAb;;AACA,QAAI;AACAA,YAAM,GAAG,KAAKrB,SAAL,CAAeM,IAAf,CAAoB,KAAKL,OAAzB,EAAkCmB,KAAlC,EAAyC,KAAKN,KAAL,EAAzC,EAAuD,KAAKZ,MAA5D,CAAT;AACH,KAFD,CAGA,OAAOoB,GAAP,EAAY;AACR,WAAKV,WAAL,CAAiBW,KAAjB,CAAuBD,GAAvB;AACA;AACH;;AACD,QAAI,CAACD,MAAL,EAAa;AACT,WAAKN,cAAL,CAAoB,KAApB;AACH;AACJ,GAZD;;AAaAN,iBAAe,CAACJ,SAAhB,CAA0BmB,SAA1B,GAAsC,YAAY;AAC9C,SAAKT,cAAL,CAAoB,IAApB;AACH,GAFD;;AAGA,SAAON,eAAP;AACH,CAhCoC,CAgCnCX,UAhCmC,CAArC","names":["tslib_1","Subscriber","every","predicate","thisArg","source","lift","EveryOperator","prototype","call","observer","subscribe","EverySubscriber","_super","__extends","destination","_this","index","notifyComplete","everyValueMatch","next","complete","_next","value","result","err","error","_complete"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/every.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n    return function (source) { return source.lift(new EveryOperator(predicate, thisArg, source)); };\n}\nvar EveryOperator = /*@__PURE__*/ (function () {\n    function EveryOperator(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    EveryOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    };\n    return EveryOperator;\n}());\nvar EverySubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(EverySubscriber, _super);\n    function EverySubscriber(destination, predicate, thisArg, source) {\n        var _this = _super.call(this, destination) || this;\n        _this.predicate = predicate;\n        _this.thisArg = thisArg;\n        _this.source = source;\n        _this.index = 0;\n        _this.thisArg = thisArg || _this;\n        return _this;\n    }\n    EverySubscriber.prototype.notifyComplete = function (everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    };\n    EverySubscriber.prototype._next = function (value) {\n        var result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    };\n    EverySubscriber.prototype._complete = function () {\n        this.notifyComplete(true);\n    };\n    return EverySubscriber;\n}(Subscriber));\n//# sourceMappingURL=every.js.map\n"]},"metadata":{},"sourceType":"module"}