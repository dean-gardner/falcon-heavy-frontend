{"ast":null,"code":"function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn, omit } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useChakra } from \"./hooks\";\nexport function useStyleConfig(themeKey, props, opts) {\n  var _styleConfig$defaultP;\n\n  var {\n    styleConfig: styleConfigProp\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"styleConfig\"]);\n\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var themeStyleConfig = get(theme, \"components.\" + themeKey);\n  var styleConfig = styleConfigProp || themeStyleConfig;\n  var mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, [\"children\"])));\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n\n  var stylesRef = useRef({});\n  return useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes;\n\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);\n      var styles = mergeWith({}, baseStyles, sizes, variants);\n\n      if ((opts == null ? void 0 : opts.isMultiPart) && styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n\n    return stylesRef.current;\n  }, [styleConfig, mergedProps, opts == null ? void 0 : opts.isMultiPart]);\n}\nexport function useMultiStyleConfig(themeKey, props) {\n  return useStyleConfig(themeKey, props, {\n    isMultiPart: true\n  });\n}","map":{"version":3,"mappings":"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","names":["_objectWithoutPropertiesLoose","source","excluded","target","sourceKeys","Object","keys","key","i","length","indexOf","filterUndefined","memoizedGet","get","mergeWith","runIfFn","omit","useMemo","useRef","isEqual","useChakra","useStyleConfig","themeKey","props","opts","_styleConfig$defaultP","styleConfig","styleConfigProp","rest","theme","colorMode","themeStyleConfig","mergedProps","defaultProps","stylesRef","_styleConfig$baseStyl","_styleConfig$variants","_styleConfig$variants2","_styleConfig$sizes$me","_styleConfig$sizes","baseStyles","baseStyle","variants","variant","sizes","size","styles","isMultiPart","parts","forEach","part","_styles$part","isStyleEqual","current","useMultiStyleConfig"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/react/node_modules/@chakra-ui/system/dist/esm/use-style-config.js"],"sourcesContent":["function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { filterUndefined, memoizedGet as get, mergeWith, runIfFn, omit } from \"@chakra-ui/utils\";\nimport { useMemo, useRef } from \"react\";\nimport isEqual from \"react-fast-compare\";\nimport { useChakra } from \"./hooks\";\nexport function useStyleConfig(themeKey, props, opts) {\n  var _styleConfig$defaultP;\n\n  var {\n    styleConfig: styleConfigProp\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"styleConfig\"]);\n\n  var {\n    theme,\n    colorMode\n  } = useChakra();\n  var themeStyleConfig = get(theme, \"components.\" + themeKey);\n  var styleConfig = styleConfigProp || themeStyleConfig;\n  var mergedProps = mergeWith({\n    theme,\n    colorMode\n  }, (_styleConfig$defaultP = styleConfig == null ? void 0 : styleConfig.defaultProps) != null ? _styleConfig$defaultP : {}, filterUndefined(omit(rest, [\"children\"])));\n  /**\n   * Store the computed styles in a `ref` to avoid unneeded re-computation\n   */\n\n  var stylesRef = useRef({});\n  return useMemo(() => {\n    if (styleConfig) {\n      var _styleConfig$baseStyl, _styleConfig$variants, _styleConfig$variants2, _styleConfig$sizes$me, _styleConfig$sizes;\n\n      var baseStyles = runIfFn((_styleConfig$baseStyl = styleConfig.baseStyle) != null ? _styleConfig$baseStyl : {}, mergedProps);\n      var variants = runIfFn((_styleConfig$variants = (_styleConfig$variants2 = styleConfig.variants) == null ? void 0 : _styleConfig$variants2[mergedProps.variant]) != null ? _styleConfig$variants : {}, mergedProps);\n      var sizes = runIfFn((_styleConfig$sizes$me = (_styleConfig$sizes = styleConfig.sizes) == null ? void 0 : _styleConfig$sizes[mergedProps.size]) != null ? _styleConfig$sizes$me : {}, mergedProps);\n      var styles = mergeWith({}, baseStyles, sizes, variants);\n\n      if ((opts == null ? void 0 : opts.isMultiPart) && styleConfig.parts) {\n        styleConfig.parts.forEach(part => {\n          var _styles$part;\n\n          styles[part] = (_styles$part = styles[part]) != null ? _styles$part : {};\n        });\n      }\n\n      var isStyleEqual = isEqual(stylesRef.current, styles);\n\n      if (!isStyleEqual) {\n        stylesRef.current = styles;\n      }\n    }\n\n    return stylesRef.current;\n  }, [styleConfig, mergedProps, opts == null ? void 0 : opts.isMultiPart]);\n}\nexport function useMultiStyleConfig(themeKey, props) {\n  return useStyleConfig(themeKey, props, {\n    isMultiPart: true\n  });\n}\n//# sourceMappingURL=use-style-config.js.map"]},"metadata":{},"sourceType":"module"}