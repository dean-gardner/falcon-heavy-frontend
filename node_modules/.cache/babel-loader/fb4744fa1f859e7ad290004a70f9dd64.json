{"ast":null,"code":"import * as React from \"react\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React hook that provides a declarative `setTimeout`\n *\n * @param callback the callback to run after specified delay\n * @param delay the delay (in ms)\n */\n\nexport function useTimeout(callback, delay) {\n  var savedCallback = useLatestRef(callback);\n  React.useEffect(() => {\n    if (delay == null) return undefined;\n    var timeoutId = null;\n    timeoutId = window.setTimeout(() => {\n      savedCallback.current == null ? void 0 : savedCallback.current();\n    }, delay);\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [delay, savedCallback]);\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,KAA9B,EAAqC;AAC1C,MAAIC,aAAa,GAAGJ,YAAY,CAACE,QAAD,CAAhC;AACAH,OAAK,CAACM,SAAN,CAAgB,MAAM;AACpB,QAAIF,KAAK,IAAI,IAAb,EAAmB,OAAOG,SAAP;AACnB,QAAIC,SAAS,GAAG,IAAhB;AACAA,aAAS,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;AAClCL,mBAAa,CAACM,OAAd,IAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCN,aAAa,CAACM,OAAd,EAAzC;AACD,KAFW,EAETP,KAFS,CAAZ;AAGA,WAAO,MAAM;AACX,UAAII,SAAJ,EAAe;AACbC,cAAM,CAACG,YAAP,CAAoBJ,SAApB;AACD;AACF,KAJD;AAKD,GAXD,EAWG,CAACJ,KAAD,EAAQC,aAAR,CAXH;AAYD","names":["React","useLatestRef","useTimeout","callback","delay","savedCallback","useEffect","undefined","timeoutId","window","setTimeout","current","clearTimeout"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-timeout.js"],"sourcesContent":["import * as React from \"react\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React hook that provides a declarative `setTimeout`\n *\n * @param callback the callback to run after specified delay\n * @param delay the delay (in ms)\n */\n\nexport function useTimeout(callback, delay) {\n  var savedCallback = useLatestRef(callback);\n  React.useEffect(() => {\n    if (delay == null) return undefined;\n    var timeoutId = null;\n    timeoutId = window.setTimeout(() => {\n      savedCallback.current == null ? void 0 : savedCallback.current();\n    }, delay);\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [delay, savedCallback]);\n}\n//# sourceMappingURL=use-timeout.js.map"]},"metadata":{},"sourceType":"module"}