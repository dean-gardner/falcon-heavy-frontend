{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  var concurrent = Number.POSITIVE_INFINITY;\n  var scheduler = null;\n  var last = observables[observables.length - 1];\n\n  if (isScheduler(last)) {\n    scheduler = observables.pop();\n\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return observables[0];\n  }\n\n  return mergeAll(concurrent)(fromArray(observables, scheduler));\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAT,QAAyB,uBAAzB;AACA,SAASC,SAAT,QAA0B,aAA1B;AACA,OAAO,SAASC,KAAT,GAAiB;AACpB,MAAIC,WAAW,GAAG,EAAlB;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,eAAW,CAACC,EAAD,CAAX,GAAkBC,SAAS,CAACD,EAAD,CAA3B;AACH;;AACD,MAAIG,UAAU,GAAGC,MAAM,CAACC,iBAAxB;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,IAAI,GAAGR,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAtB;;AACA,MAAIP,WAAW,CAACY,IAAD,CAAf,EAAuB;AACnBD,aAAS,GAAGP,WAAW,CAACS,GAAZ,EAAZ;;AACA,QAAIT,WAAW,CAACG,MAAZ,GAAqB,CAArB,IAA0B,OAAOH,WAAW,CAACA,WAAW,CAACG,MAAZ,GAAqB,CAAtB,CAAlB,KAA+C,QAA7E,EAAuF;AACnFC,gBAAU,GAAGJ,WAAW,CAACS,GAAZ,EAAb;AACH;AACJ,GALD,MAMK,IAAI,OAAOD,IAAP,KAAgB,QAApB,EAA8B;AAC/BJ,cAAU,GAAGJ,WAAW,CAACS,GAAZ,EAAb;AACH;;AACD,MAAIF,SAAS,KAAK,IAAd,IAAsBP,WAAW,CAACG,MAAZ,KAAuB,CAA7C,IAAkDH,WAAW,CAAC,CAAD,CAAX,YAA0BL,UAAhF,EAA4F;AACxF,WAAOK,WAAW,CAAC,CAAD,CAAlB;AACH;;AACD,SAAOH,QAAQ,CAACO,UAAD,CAAR,CAAqBN,SAAS,CAACE,WAAD,EAAcO,SAAd,CAA9B,CAAP;AACH","names":["Observable","isScheduler","mergeAll","fromArray","merge","observables","_i","arguments","length","concurrent","Number","POSITIVE_INFINITY","scheduler","last","pop"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/observable/merge.js"],"sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isScheduler,_operators_mergeAll,_fromArray PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(fromArray(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n"]},"metadata":{},"sourceType":"module"}