{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType } from '..';\nimport { BEACON_VERSION } from '../constants';\nimport { getAddressFromPublicKey } from '../utils/crypto';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\nexport class OutgoingBeaconMessageInterceptor {\n  static intercept(config) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        beaconId,\n        request,\n        message,\n        permissionManager,\n        appMetadataManager,\n        interceptorCallback\n      } = config;\n      const errorMessage = message;\n\n      if (errorMessage.errorType) {\n        const response = {\n          type: message.type,\n          version: BEACON_VERSION,\n          beaconId,\n          id: message.id,\n          errorType: errorMessage.errorType\n        };\n        interceptorCallback(response);\n        return;\n      }\n\n      switch (message.type) {\n        case BeaconMessageType.PermissionResponse:\n          {\n            const response = Object.assign({\n              beaconId,\n              version: BEACON_VERSION\n            }, message); // TODO: Migration code. Remove before 1.0.0 release.\n\n            const publicKey = response.publicKey || response.pubkey || response.pubKey;\n            const address = yield getAddressFromPublicKey(publicKey);\n            const appMetadata = yield appMetadataManager.getAppMetadata(request.beaconId);\n\n            if (!appMetadata) {\n              throw new Error('AppMetadata not found');\n            }\n\n            const permission = {\n              accountIdentifier: yield getAccountIdentifier(address, response.network),\n              beaconId: request.beaconId,\n              appMetadata,\n              website: '',\n              address,\n              publicKey,\n              network: response.network,\n              scopes: response.scopes,\n              connectedAt: new Date().getTime()\n            };\n            permissionManager.addPermission(permission).catch(console.error);\n            interceptorCallback(response);\n            break;\n          }\n\n        case BeaconMessageType.OperationResponse:\n          {\n            const response = Object.assign({\n              beaconId,\n              version: BEACON_VERSION\n            }, message);\n            interceptorCallback(response);\n          }\n          break;\n\n        case BeaconMessageType.SignPayloadResponse:\n          {\n            const response = Object.assign({\n              beaconId,\n              version: BEACON_VERSION\n            }, message);\n            interceptorCallback(response);\n          }\n          break;\n\n        case BeaconMessageType.BroadcastResponse:\n          {\n            const response = Object.assign({\n              beaconId,\n              version: BEACON_VERSION\n            }, message);\n            interceptorCallback(response);\n          }\n          break;\n\n        default:\n          console.log('Message not handled');\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BeaconMessageType","BEACON_VERSION","getAddressFromPublicKey","getAccountIdentifier","OutgoingBeaconMessageInterceptor","intercept","config","beaconId","request","message","permissionManager","appMetadataManager","interceptorCallback","errorMessage","errorType","response","type","version","id","PermissionResponse","Object","assign","publicKey","pubkey","pubKey","address","appMetadata","getAppMetadata","Error","permission","accountIdentifier","network","website","scopes","connectedAt","Date","getTime","addPermission","catch","console","error","OperationResponse","SignPayloadResponse","BroadcastResponse","log"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/interceptors/OutgoingBeaconMessageInterceptor.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BeaconMessageType } from '..';\nimport { BEACON_VERSION } from '../constants';\nimport { getAddressFromPublicKey } from '../utils/crypto';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\nexport class OutgoingBeaconMessageInterceptor {\n    static intercept(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { beaconId, request, message, permissionManager, appMetadataManager, interceptorCallback } = config;\n            const errorMessage = message;\n            if (errorMessage.errorType) {\n                const response = {\n                    type: message.type,\n                    version: BEACON_VERSION,\n                    beaconId,\n                    id: message.id,\n                    errorType: errorMessage.errorType\n                };\n                interceptorCallback(response);\n                return;\n            }\n            switch (message.type) {\n                case BeaconMessageType.PermissionResponse: {\n                    const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);\n                    // TODO: Migration code. Remove before 1.0.0 release.\n                    const publicKey = response.publicKey || response.pubkey || response.pubKey;\n                    const address = yield getAddressFromPublicKey(publicKey);\n                    const appMetadata = yield appMetadataManager.getAppMetadata(request.beaconId);\n                    if (!appMetadata) {\n                        throw new Error('AppMetadata not found');\n                    }\n                    const permission = {\n                        accountIdentifier: yield getAccountIdentifier(address, response.network),\n                        beaconId: request.beaconId,\n                        appMetadata,\n                        website: '',\n                        address,\n                        publicKey,\n                        network: response.network,\n                        scopes: response.scopes,\n                        connectedAt: new Date().getTime()\n                    };\n                    permissionManager.addPermission(permission).catch(console.error);\n                    interceptorCallback(response);\n                    break;\n                }\n                case BeaconMessageType.OperationResponse:\n                    {\n                        const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);\n                        interceptorCallback(response);\n                    }\n                    break;\n                case BeaconMessageType.SignPayloadResponse:\n                    {\n                        const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);\n                        interceptorCallback(response);\n                    }\n                    break;\n                case BeaconMessageType.BroadcastResponse:\n                    {\n                        const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);\n                        interceptorCallback(response);\n                    }\n                    break;\n                default:\n                    console.log('Message not handled');\n            }\n        });\n    }\n}\n//# sourceMappingURL=OutgoingBeaconMessageInterceptor.js.map"]},"metadata":{},"sourceType":"module"}