{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nexport function Drawer(props) {\n  var _theme$components;\n\n  var {\n    isOpen,\n    onClose,\n    placement = \"right\",\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyleSlide = chakra(Slide);\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\n\nexport var DrawerContent = /*#__PURE__*/forwardRef(function DrawerContent(props, ref) {\n  var {\n    className,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var {\n    placement\n  } = useDrawerContext();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyleSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\n\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","chakra","forwardRef","useStyles","useTheme","Slide","createContext","cx","__DEV__","React","Modal","ModalFocusScope","useModalContext","DrawerContextProvider","useDrawerContext","Drawer","props","_theme$components","isOpen","onClose","placement","children","rest","theme","drawerStyleConfig","components","createElement","value","styleConfig","StyleSlide","DrawerContent","ref","className","getDialogProps","getDialogContainerProps","dialogProps","containerProps","_className","styles","dialogStyles","display","flexDirection","position","width","outline","dialog","dialogContainerStyles","height","left","top","dialogContainer","div","__css","direction","in","displayName","ModalBody","DrawerBody","ModalCloseButton","DrawerCloseButton","ModalFooter","DrawerFooter","ModalHeader","DrawerHeader","ModalOverlay","DrawerOverlay"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/modal/dist/esm/drawer.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { chakra, forwardRef, useStyles, useTheme } from \"@chakra-ui/system\";\nimport { Slide } from \"@chakra-ui/transition\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { Modal, ModalFocusScope, useModalContext } from \"./modal\";\nvar [DrawerContextProvider, useDrawerContext] = createContext();\nexport function Drawer(props) {\n  var _theme$components;\n\n  var {\n    isOpen,\n    onClose,\n    placement = \"right\",\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"isOpen\", \"onClose\", \"placement\", \"children\"]);\n\n  var theme = useTheme();\n  var drawerStyleConfig = (_theme$components = theme.components) == null ? void 0 : _theme$components.Drawer;\n  return /*#__PURE__*/React.createElement(DrawerContextProvider, {\n    value: {\n      placement\n    }\n  }, /*#__PURE__*/React.createElement(Modal, _extends({\n    isOpen: isOpen,\n    onClose: onClose,\n    styleConfig: drawerStyleConfig\n  }, rest), children));\n}\nvar StyleSlide = chakra(Slide);\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport var DrawerContent = /*#__PURE__*/forwardRef(function DrawerContent(props, ref) {\n  var {\n    className,\n    children\n  } = props,\n      rest = _objectWithoutPropertiesLoose(props, [\"className\", \"children\"]);\n\n  var {\n    getDialogProps,\n    getDialogContainerProps,\n    isOpen\n  } = useModalContext();\n  var dialogProps = getDialogProps(rest, ref);\n  var containerProps = getDialogContainerProps();\n\n  var _className = cx(\"chakra-modal__content\", className);\n\n  var styles = useStyles();\n\n  var dialogStyles = _extends({\n    display: \"flex\",\n    flexDirection: \"column\",\n    position: \"relative\",\n    width: \"100%\",\n    outline: 0\n  }, styles.dialog);\n\n  var dialogContainerStyles = _extends({\n    display: \"flex\",\n    width: \"100vw\",\n    height: \"100vh\",\n    position: \"fixed\",\n    left: 0,\n    top: 0\n  }, styles.dialogContainer);\n\n  var {\n    placement\n  } = useDrawerContext();\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({}, containerProps, {\n    className: \"chakra-modal__content-container\",\n    __css: dialogContainerStyles\n  }), /*#__PURE__*/React.createElement(ModalFocusScope, null, /*#__PURE__*/React.createElement(StyleSlide, _extends({\n    direction: placement,\n    in: isOpen,\n    className: _className\n  }, dialogProps, {\n    __css: dialogStyles\n  }), children)));\n});\n\nif (__DEV__) {\n  DrawerContent.displayName = \"DrawerContent\";\n}\n\nexport { ModalBody as DrawerBody, ModalCloseButton as DrawerCloseButton, ModalFooter as DrawerFooter, ModalHeader as DrawerHeader, ModalOverlay as DrawerOverlay } from \"./modal\";\n//# sourceMappingURL=drawer.js.map"]},"metadata":{},"sourceType":"module"}