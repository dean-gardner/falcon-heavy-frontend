{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useEventListener } from \"@chakra-ui/hooks\";\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, mergeRefs, minSafeInteger, normalizeEventKey, pick } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\n\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\"]);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = useRef(null);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = useCallback(event => {\n    var valueString = event.target.value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n    updateFn(valueString);\n  }, [updateFn]);\n  var onKeyDown = useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = event => {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var _getAriaValueText = () => {\n    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  };\n\n  var ariaValueText = _getAriaValueText();\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n\n  var validateAndClamp = useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    if (counter.value !== next) {\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  var onBlur = useCallback(() => {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current);\n    }\n  }, [focusInputOnChange]);\n  var spinUp = useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function onWheel(event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current);\n  var getIncrementButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var inputProps = useFormControl(props);\n  var getInputProps = useCallback(function (props, ref) {\n    var _props$inputMode;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var ownProps = pick(inputProps, [\"id\", \"disabled\", \"readOnly\", \"required\", \"aria-invalid\", \"aria-required\", \"aria-readonly\", \"aria-describedby\", \"onFocus\", \"onBlur\"]);\n    return _extends({}, props, ownProps, {\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      type: \"text\",\n      inputMode: (_props$inputMode = props.inputMode) != null ? _props$inputMode : inputMode,\n      pattern,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": ownProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(ownProps[\"aria-invalid\"] || counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(ownProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(ownProps.onBlur, onBlur)\n    });\n  }, [inputProps, counter.value, counter.valueAsNumber, counter.isOutOfRange, inputMode, pattern, min, max, ariaValueText, onChange, onKeyDown, setFocused.on, onBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useCounter","useBoolean","useEventListener","useFormControl","ariaAttr","callAllHandlers","focus","isBrowser","isNull","maxSafeInteger","mergeRefs","minSafeInteger","normalizeEventKey","pick","useCallback","useRef","useSpinner","isFloatingPointNumericCharacter","isValidNumericKeyboardEvent","useNumberInput","props","focusInputOnChange","clampValueOnBlur","keepWithinRange","min","max","step","stepProp","isReadOnly","isDisabled","getAriaValueText","pattern","inputMode","allowMouseWheel","htmlProps","counter","update","updateFn","increment","incrementFn","decrement","decrementFn","isFocused","setFocused","inputRef","isInteractive","spinner","onChange","event","valueString","value","split","filter","join","onKeyDown","preventDefault","stepFactor","getStepFactor","eventKey","keyMap","ArrowUp","ArrowDown","Home","End","action","ratio","metaKey","ctrlKey","shiftKey","_getAriaValueText","text","defaultText","toString","undefined","ariaValueText","validateAndClamp","next","valueAsNumber","cast","onBlur","off","focusInput","current","spinUp","up","spinDown","down","pointerDown","document","documentElement","ontouchstart","onWheel","isInputFocused","activeElement","direction","Math","sign","deltaY","getIncrementButtonProps","ref","disabled","isAtMax","role","tabIndex","onMouseUp","stop","onMouseLeave","onTouchEnd","getDecrementButtonProps","isAtMin","inputProps","getInputProps","_props$inputMode","ownProps","type","Number","isNaN","isOutOfRange","autoComplete","autoCorrect","onFocus","on"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/number-input/dist/esm/use-number-input.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useCounter } from \"@chakra-ui/counter\";\nimport { useBoolean, useEventListener } from \"@chakra-ui/hooks\";\nimport { useFormControl } from \"@chakra-ui/form-control\";\nimport { ariaAttr, callAllHandlers, focus, isBrowser, isNull, maxSafeInteger, mergeRefs, minSafeInteger, normalizeEventKey, pick } from \"@chakra-ui/utils\";\nimport { useCallback, useRef } from \"react\";\nimport { useSpinner } from \"./use-spinner\";\nimport { isFloatingPointNumericCharacter, isValidNumericKeyboardEvent } from \"./utils\";\n\n/**\n * React hook that implements the WAI-ARIA Spin Button widget\n * and used to create numeric input fields.\n *\n * It returns prop getters you can use to build your own\n * custom number inputs.\n *\n * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.1/#spinbutton\n * @see Docs     https://www.chakra-ui.com/useNumberInput\n * @see WHATWG   https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number)\n */\nexport function useNumberInput(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    focusInputOnChange = true,\n    clampValueOnBlur = true,\n    keepWithinRange = true,\n    min = minSafeInteger,\n    max = maxSafeInteger,\n    step: stepProp = 1,\n    isReadOnly,\n    isDisabled,\n    getAriaValueText,\n    pattern = \"[0-9]*(.[0-9]+)?\",\n    inputMode = \"decimal\",\n    allowMouseWheel\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"focusInputOnChange\", \"clampValueOnBlur\", \"keepWithinRange\", \"min\", \"max\", \"step\", \"isReadOnly\", \"isDisabled\", \"getAriaValueText\", \"isInvalid\", \"pattern\", \"inputMode\", \"allowMouseWheel\", \"id\", \"onChange\", \"precision\"]);\n  /**\n   * Leverage the `useCounter` hook since it provides\n   * the functionality to `increment`, `decrement` and `update`\n   * counter values\n   */\n\n\n  var counter = useCounter(props);\n  var {\n    update: updateFn,\n    increment: incrementFn,\n    decrement: decrementFn\n  } = counter;\n  /**\n   * Keep track of the focused state of the input,\n   * so user can this to change the styles of the\n   * `spinners`, maybe :)\n   */\n\n  var [isFocused, setFocused] = useBoolean();\n  var inputRef = useRef(null);\n  var isInteractive = !(isReadOnly || isDisabled);\n  var increment = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      incrementFn(step);\n    }\n  }, [incrementFn, isInteractive, stepProp]);\n  var decrement = useCallback(function (step) {\n    if (step === void 0) {\n      step = stepProp;\n    }\n\n    if (isInteractive) {\n      decrementFn(step);\n    }\n  }, [decrementFn, isInteractive, stepProp]);\n  /**\n   * Leverage the `useSpinner` hook to spin the input's value\n   * when long press on the up and down buttons.\n   *\n   * This leverages `setInterval` internally\n   */\n\n  var spinner = useSpinner(increment, decrement);\n  /**\n   * The `onChange` handler filters out any character typed\n   * that isn't floating point compatible.\n   */\n\n  var onChange = useCallback(event => {\n    var valueString = event.target.value.split(\"\").filter(isFloatingPointNumericCharacter).join(\"\");\n    updateFn(valueString);\n  }, [updateFn]);\n  var onKeyDown = useCallback(event => {\n    /**\n     * only allow valid numeric keys\n     */\n    if (!isValidNumericKeyboardEvent(event)) {\n      event.preventDefault();\n    }\n    /**\n     * Keyboard Accessibility\n     *\n     * We want to increase or decrease the input's value\n     * based on if the user the arrow keys.\n     *\n     * @see https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-17\n     */\n\n\n    var stepFactor = getStepFactor(event) * stepProp;\n    var eventKey = normalizeEventKey(event);\n    var keyMap = {\n      ArrowUp: () => increment(stepFactor),\n      ArrowDown: () => decrement(stepFactor),\n      Home: () => updateFn(min),\n      End: () => updateFn(max)\n    };\n    var action = keyMap[eventKey];\n\n    if (action) {\n      event.preventDefault();\n      action(event);\n    }\n  }, [updateFn, decrement, increment, max, min, stepProp]);\n\n  var getStepFactor = event => {\n    var ratio = 1;\n\n    if (event.metaKey || event.ctrlKey) {\n      ratio = 0.1;\n    }\n\n    if (event.shiftKey) {\n      ratio = 10;\n    }\n\n    return ratio;\n  };\n  /**\n   * If user would like to use a human-readable representation\n   * of the value, rather than the value itself they can pass `getAriaValueText`\n   *\n   * @see https://www.w3.org/TR/wai-aria-practices-1.1/#wai-aria-roles-states-and-properties-18\n   * @see https://www.w3.org/TR/wai-aria-1.1/#aria-valuetext\n   */\n\n\n  var _getAriaValueText = () => {\n    var text = getAriaValueText == null ? void 0 : getAriaValueText(counter.value);\n\n    if (!isNull(text)) {\n      return text;\n    }\n\n    var defaultText = counter.value.toString(); // empty string is an invalid ARIA attribute value\n\n    return !defaultText ? undefined : defaultText;\n  };\n\n  var ariaValueText = _getAriaValueText();\n  /**\n   * Function that clamps the input's value on blur\n   */\n\n\n  var validateAndClamp = useCallback(() => {\n    var next = counter.value;\n    if (next === \"\") return;\n\n    if (counter.valueAsNumber < min) {\n      next = min;\n    }\n\n    if (counter.valueAsNumber > max) {\n      next = max;\n    }\n    /**\n     * `counter.cast` does 2 things:\n     *\n     * - sanitize the value by using parseFloat and some Regex\n     * - used to round value to computed precision or decimal points\n     */\n\n\n    if (counter.value !== next) {\n      counter.cast(next);\n    }\n  }, [counter, max, min]);\n  var onBlur = useCallback(() => {\n    setFocused.off();\n\n    if (clampValueOnBlur) {\n      validateAndClamp();\n    }\n  }, [clampValueOnBlur, setFocused, validateAndClamp]);\n  var focusInput = useCallback(() => {\n    if (focusInputOnChange && inputRef.current) {\n      focus(inputRef.current);\n    }\n  }, [focusInputOnChange]);\n  var spinUp = useCallback(event => {\n    event.preventDefault();\n    spinner.up();\n    focusInput();\n  }, [focusInput, spinner]);\n  var spinDown = useCallback(event => {\n    event.preventDefault();\n    spinner.down();\n    focusInput();\n  }, [focusInput, spinner]);\n  var pointerDown = isBrowser && !!document.documentElement.ontouchstart ? \"onTouchStart\" : \"onMouseDown\";\n  useEventListener(\"wheel\", function onWheel(event) {\n    var isInputFocused = document.activeElement === inputRef.current;\n    if (!allowMouseWheel || !isInputFocused) return;\n    event.preventDefault();\n    var stepFactor = getStepFactor(event) * stepProp;\n    var direction = Math.sign(event.deltaY);\n\n    if (direction === -1) {\n      increment(stepFactor);\n    } else if (direction === 1) {\n      decrement(stepFactor);\n    }\n  }, inputRef.current);\n  var getIncrementButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMax;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinUp),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onMouseLeave: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMax, keepWithinRange, spinUp, spinner.stop, isDisabled]);\n  var getDecrementButtonProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var disabled = isDisabled || keepWithinRange && counter.isAtMin;\n    return _extends({}, props, {\n      ref,\n      role: \"button\",\n      tabIndex: -1,\n      [pointerDown]: callAllHandlers(props[pointerDown], spinDown),\n      onMouseLeave: callAllHandlers(props.onMouseLeave, spinner.stop),\n      onMouseUp: callAllHandlers(props.onMouseUp, spinner.stop),\n      onTouchEnd: callAllHandlers(props.onTouchEnd, spinner.stop),\n      disabled,\n      \"aria-disabled\": ariaAttr(disabled)\n    });\n  }, [pointerDown, counter.isAtMin, keepWithinRange, spinDown, spinner.stop, isDisabled]);\n  var inputProps = useFormControl(props);\n  var getInputProps = useCallback(function (props, ref) {\n    var _props$inputMode;\n\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    var ownProps = pick(inputProps, [\"id\", \"disabled\", \"readOnly\", \"required\", \"aria-invalid\", \"aria-required\", \"aria-readonly\", \"aria-describedby\", \"onFocus\", \"onBlur\"]);\n    return _extends({}, props, ownProps, {\n      ref: mergeRefs(inputRef, ref),\n      value: counter.value,\n      role: \"spinbutton\",\n      type: \"text\",\n      inputMode: (_props$inputMode = props.inputMode) != null ? _props$inputMode : inputMode,\n      pattern,\n      \"aria-valuemin\": min,\n      \"aria-valuemax\": max,\n      \"aria-disabled\": ownProps.disabled,\n      \"aria-valuenow\": Number.isNaN(counter.valueAsNumber) ? undefined : counter.valueAsNumber,\n      \"aria-invalid\": ariaAttr(ownProps[\"aria-invalid\"] || counter.isOutOfRange),\n      \"aria-valuetext\": ariaValueText,\n      autoComplete: \"off\",\n      autoCorrect: \"off\",\n      onChange: callAllHandlers(props.onChange, onChange),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onFocus: callAllHandlers(ownProps.onFocus, setFocused.on),\n      onBlur: callAllHandlers(ownProps.onBlur, onBlur)\n    });\n  }, [inputProps, counter.value, counter.valueAsNumber, counter.isOutOfRange, inputMode, pattern, min, max, ariaValueText, onChange, onKeyDown, setFocused.on, onBlur]);\n  return {\n    value: counter.value,\n    valueAsNumber: counter.valueAsNumber,\n    isFocused,\n    isDisabled,\n    isReadOnly,\n    getIncrementButtonProps,\n    getDecrementButtonProps,\n    getInputProps,\n    htmlProps\n  };\n}\n//# sourceMappingURL=use-number-input.js.map"]},"metadata":{},"sourceType":"module"}