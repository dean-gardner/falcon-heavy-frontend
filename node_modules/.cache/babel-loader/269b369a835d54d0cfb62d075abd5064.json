{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback, useState } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { PermissionScope } from \"@airgap/beacon-sdk\";\nimport { getConfig } from '../AppConfig';\nconst options = {\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\" // iconUrl: \"https://tezostaquito.io/img/favicon.png\",\n  // eventHandlers: {\n  //   PERMISSION_REQUEST_SUCCESS: {\n  //     handler: async (data: any) => {\n  //       console.log(\"permission data\", data);\n  //     },\n  //   },\n  // },\n\n};\n\nclass LambdaViewSigner {\n  async publicKeyHash() {\n    return \"tz1fVQangAfb9J1hRRMP2bSB6LvASD6KpY8A\";\n  }\n\n  async publicKey() {\n    return \"edpkvWbk81uh1DEvdWKR4g1bjyTGhdu1mDvznPUFE2zDwNsLXrEb9K\";\n  }\n\n  async secretKey() {\n    throw new Error(\"Secret key cannot be exposed\");\n  }\n\n  async sign() {\n    throw new Error(\"Cannot sign\");\n  }\n\n}\n\nconst {} = getConfig();\nconst Tezos = new TezosToolkit(\"https://testnet-tezos.giganode.io/\"); // const Tezos = new TezosToolkit(\"https://mainnet-tezos.giganode.io\");\n//const Tezos = new TezosToolkit(\"https://delphinet-tezos.giganode.io\");\n\nconst wallet = new BeaconWallet(options);\nTezos.setWalletProvider(wallet); //Tezos.setSignerProvider(new LambdaViewSigner());\n\nexport default function useBeacon() {\n  _s();\n\n  const [pkh, setUserPkh] = useState();\n  const connect = useCallback(async () => {\n    await wallet.requestPermissions({\n      scopes: [PermissionScope.OPERATION_REQUEST, PermissionScope.SIGN, PermissionScope.THRESHOLD]\n    }); // {\n    //   network: { type: NetworkType.DELPHINET },\n    //   scopes: [\n    //     PermissionScope.OPERATION_REQUEST,\n    //     PermissionScope.SIGN,\n    //     PermissionScope.THRESHOLD,\n    //   ],\n    // }\n\n    const _pkh = await wallet.getPKH();\n\n    debugger;\n    setUserPkh(_pkh);\n  }, []);\n  const disconnect = useCallback(async () => {\n    debugger;\n    await wallet.client.removeAllAccounts();\n  }, []);\n  return {\n    connect,\n    disconnect,\n    pkh,\n    Tezos\n  };\n}\n\n_s(useBeacon, \"m4hWikMIjJJalssKiHo2i+cuem4=\");","map":{"version":3,"sources":["D:/work/projects/plenty/falcon-heavy-frontend/src/hooks/useBeacon.ts"],"names":["useCallback","useState","BeaconWallet","TezosToolkit","PermissionScope","getConfig","options","name","LambdaViewSigner","publicKeyHash","publicKey","secretKey","Error","sign","Tezos","wallet","setWalletProvider","useBeacon","pkh","setUserPkh","connect","requestPermissions","scopes","OPERATION_REQUEST","SIGN","THRESHOLD","_pkh","getPKH","disconnect","client","removeAllAccounts"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AACA,SAAsBC,eAAtB,QAA6C,oBAA7C;AACA,SAAQC,SAAR,QAAwB,cAAxB;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,wCADQ,CAEd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AATc,CAAhB;;AAYA,MAAMC,gBAAN,CAAuB;AACF,QAAbC,aAAa,GAAG;AACpB,WAAO,sCAAP;AACD;;AAEc,QAATC,SAAS,GAAG;AAChB,WAAO,wDAAP;AACD;;AAEc,QAATC,SAAS,GAAoB;AACjC,UAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAES,QAAJC,IAAI,GAKP;AACD,UAAM,IAAID,KAAJ,CAAU,aAAV,CAAN;AACD;;AApBoB;;AAsBvB,MAAM,KAAKP,SAAS,EAApB;AAEA,MAAMS,KAAK,GAAG,IAAIX,YAAJ,CAAiB,oCAAjB,CAAd,C,CACA;AACA;;AACA,MAAMY,MAAM,GAAG,IAAIb,YAAJ,CAAiBI,OAAjB,CAAf;AAGAQ,KAAK,CAACE,iBAAN,CAAwBD,MAAxB,E,CACA;;AAEA,eAAe,SAASE,SAAT,GAAqB;AAAA;;AAClC,QAAM,CAACC,GAAD,EAAMC,UAAN,IAAoBlB,QAAQ,EAAlC;AAEA,QAAMmB,OAAO,GAAGpB,WAAW,CAAC,YAAY;AACtC,UAAMe,MAAM,CAACM,kBAAP,CAA0B;AAC9BC,MAAAA,MAAM,EAAE,CACDlB,eAAe,CAACmB,iBADf,EAEDnB,eAAe,CAACoB,IAFf,EAGDpB,eAAe,CAACqB,SAHf;AADsB,KAA1B,CAAN,CADsC,CAStC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,UAAMC,IAAI,GAAG,MAAMX,MAAM,CAACY,MAAP,EAAnB;;AACA;AACAR,IAAAA,UAAU,CAACO,IAAD,CAAV;AACD,GArB0B,EAqBxB,EArBwB,CAA3B;AAuBD,QAAME,UAAU,GAAG5B,WAAW,CAAC,YAAW;AACxC;AACC,UAAMe,MAAM,CAACc,MAAP,CAAcC,iBAAd,EAAN;AACF,GAH6B,EAG3B,EAH2B,CAA9B;AAMC,SAAO;AAAEV,IAAAA,OAAF;AAAWQ,IAAAA,UAAX;AAAuBV,IAAAA,GAAvB;AAA4BJ,IAAAA;AAA5B,GAAP;AACD;;GAjCuBG,S","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\n\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { NetworkType, PermissionScope } from \"@airgap/beacon-sdk\";\nimport {getConfig} from '../AppConfig';\n\nconst options = {\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\n  // iconUrl: \"https://tezostaquito.io/img/favicon.png\",\n  // eventHandlers: {\n  //   PERMISSION_REQUEST_SUCCESS: {\n  //     handler: async (data: any) => {\n  //       console.log(\"permission data\", data);\n  //     },\n  //   },\n  // },\n};\n\nclass LambdaViewSigner {\n  async publicKeyHash() {\n    return \"tz1fVQangAfb9J1hRRMP2bSB6LvASD6KpY8A\";\n  }\n\n  async publicKey() {\n    return \"edpkvWbk81uh1DEvdWKR4g1bjyTGhdu1mDvznPUFE2zDwNsLXrEb9K\";\n  }\n\n  async secretKey(): Promise<string> {\n    throw new Error(\"Secret key cannot be exposed\");\n  }\n\n  async sign(): Promise<{\n    bytes: string;\n    sig: string;\n    prefixSig: string;\n    sbytes: string;\n  }> {\n    throw new Error(\"Cannot sign\");\n  }\n}\nconst {} = getConfig();\n\nconst Tezos = new TezosToolkit(\"https://testnet-tezos.giganode.io/\");\n// const Tezos = new TezosToolkit(\"https://mainnet-tezos.giganode.io\");\n//const Tezos = new TezosToolkit(\"https://delphinet-tezos.giganode.io\");\nconst wallet = new BeaconWallet(options);\n\n\nTezos.setWalletProvider(wallet);\n//Tezos.setSignerProvider(new LambdaViewSigner());\n\nexport default function useBeacon() {\n  const [pkh, setUserPkh] = useState<string>();\n\n  const connect = useCallback(async () => {\n    await wallet.requestPermissions({\n      scopes: [\n             PermissionScope.OPERATION_REQUEST,\n             PermissionScope.SIGN,\n             PermissionScope.THRESHOLD,\n           ]\n    });\n\n    // {\n    //   network: { type: NetworkType.DELPHINET },\n    //   scopes: [\n    //     PermissionScope.OPERATION_REQUEST,\n    //     PermissionScope.SIGN,\n    //     PermissionScope.THRESHOLD,\n    //   ],\n    // }\n\n    const _pkh = await wallet.getPKH();\n    debugger;\n    setUserPkh(_pkh);\n  }, []);\n\n const disconnect = useCallback(async() => {\n   debugger;\n    await wallet.client.removeAllAccounts();\n }, [])\n\n\n  return { connect, disconnect, pkh, Tezos };\n}\n"]},"metadata":{},"sourceType":"module"}