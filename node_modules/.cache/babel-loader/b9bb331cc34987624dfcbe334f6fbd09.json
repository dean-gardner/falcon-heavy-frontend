{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { useIds } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, mergeRefs } from \"@chakra-ui/utils\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { manager, useModalManager } from \"./modal-manager\";\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\n\nexport function useModal(props) {\n  var {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  var dialogRef = useRef(null);\n  var overlayRef = useRef(null);\n  var [dialogId, headerId, bodyId] = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\");\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n\n  useAriaHidden(dialogRef, isOpen && useInert);\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n\n  useModalManager(dialogRef, isOpen);\n  var mouseDownTarget = useRef(null);\n  var onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  var onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  var [headerMounted, setHeaderMounted] = useState(false);\n  var [bodyMounted, setBodyMounted] = useState(false);\n  var getDialogProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      role: \"dialog\"\n    }, props, {\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, event => event.stopPropagation())\n    });\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  var onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    /**\n     * Make sure the event starts and ends on the same DOM element.\n     *\n     * This is used to prevent the modal from closing when you\n     * start dragging from the content, and release drag outside the content.\n     *\n     * We prevent this because it is technically not a considered \"click outside\"\n     */\n\n    if (mouseDownTarget.current !== event.target) return;\n    /**\n     * When you click on the overlay, we want to remove only the topmost modal\n     */\n\n    if (!manager.isTopModal(dialogRef)) return;\n\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  var getDialogContainerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown)\n    });\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps\n  };\n}\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\n\nexport function useAriaHidden(ref, shouldHide) {\n  useEffect(() => {\n    if (!ref.current) return undefined;\n    var undo = null;\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current);\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo == null ? void 0 : undo();\n      }\n    };\n  }, [shouldHide, ref]);\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","useIds","callAllHandlers","mergeRefs","hideOthers","useCallback","useEffect","useRef","useState","manager","useModalManager","useModal","props","isOpen","onClose","id","closeOnOverlayClick","closeOnEsc","useInert","onOverlayClick","onOverlayClickProp","onEsc","dialogRef","overlayRef","dialogId","headerId","bodyId","useAriaHidden","mouseDownTarget","onMouseDown","event","current","onKeyDown","stopPropagation","headerMounted","setHeaderMounted","bodyMounted","setBodyMounted","getDialogProps","ref","role","tabIndex","undefined","onClick","isTopModal","getDialogContainerProps","shouldHide","undo"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/modal/dist/esm/use-modal.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { useIds } from \"@chakra-ui/hooks\";\nimport { callAllHandlers, mergeRefs } from \"@chakra-ui/utils\";\nimport { hideOthers } from \"aria-hidden\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport { manager, useModalManager } from \"./modal-manager\";\n\n/**\n * Modal hook that manages all the logic for the modal dialog widget\n * and returns prop getters, state and actions.\n *\n * @param props\n */\nexport function useModal(props) {\n  var {\n    isOpen,\n    onClose,\n    id,\n    closeOnOverlayClick = true,\n    closeOnEsc = true,\n    useInert = true,\n    onOverlayClick: onOverlayClickProp,\n    onEsc\n  } = props;\n  var dialogRef = useRef(null);\n  var overlayRef = useRef(null);\n  var [dialogId, headerId, bodyId] = useIds(id, \"chakra-modal\", \"chakra-modal--header\", \"chakra-modal--body\");\n  /**\n   * Hook used to polyfill `aria-modal` for older browsers.\n   * It uses `aria-hidden` to all other nodes.\n   *\n   * @see https://developer.paciellogroup.com/blog/2018/06/the-current-state-of-modal-dialog-accessibility/\n   */\n\n  useAriaHidden(dialogRef, isOpen && useInert);\n  /**\n   * Hook use to manage multiple or nested modals\n   */\n\n  useModalManager(dialogRef, isOpen);\n  var mouseDownTarget = useRef(null);\n  var onMouseDown = useCallback(event => {\n    mouseDownTarget.current = event.target;\n  }, []);\n  var onKeyDown = useCallback(event => {\n    if (event.key === \"Escape\") {\n      event.stopPropagation();\n\n      if (closeOnEsc) {\n        onClose == null ? void 0 : onClose();\n      }\n\n      onEsc == null ? void 0 : onEsc();\n    }\n  }, [closeOnEsc, onClose, onEsc]);\n  var [headerMounted, setHeaderMounted] = useState(false);\n  var [bodyMounted, setBodyMounted] = useState(false);\n  var getDialogProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({\n      role: \"dialog\"\n    }, props, {\n      ref: mergeRefs(ref, dialogRef),\n      id: dialogId,\n      tabIndex: -1,\n      \"aria-modal\": true,\n      \"aria-labelledby\": headerMounted ? headerId : undefined,\n      \"aria-describedby\": bodyMounted ? bodyId : undefined,\n      onClick: callAllHandlers(props.onClick, event => event.stopPropagation())\n    });\n  }, [bodyId, bodyMounted, dialogId, headerId, headerMounted]);\n  var onOverlayClick = useCallback(event => {\n    event.stopPropagation();\n    /**\n     * Make sure the event starts and ends on the same DOM element.\n     *\n     * This is used to prevent the modal from closing when you\n     * start dragging from the content, and release drag outside the content.\n     *\n     * We prevent this because it is technically not a considered \"click outside\"\n     */\n\n    if (mouseDownTarget.current !== event.target) return;\n    /**\n     * When you click on the overlay, we want to remove only the topmost modal\n     */\n\n    if (!manager.isTopModal(dialogRef)) return;\n\n    if (closeOnOverlayClick) {\n      onClose == null ? void 0 : onClose();\n    }\n\n    onOverlayClickProp == null ? void 0 : onOverlayClickProp();\n  }, [onClose, closeOnOverlayClick, onOverlayClickProp]);\n  var getDialogContainerProps = useCallback(function (props, ref) {\n    if (props === void 0) {\n      props = {};\n    }\n\n    if (ref === void 0) {\n      ref = null;\n    }\n\n    return _extends({}, props, {\n      ref: mergeRefs(ref, overlayRef),\n      onClick: callAllHandlers(props.onClick, onOverlayClick),\n      onKeyDown: callAllHandlers(props.onKeyDown, onKeyDown),\n      onMouseDown: callAllHandlers(props.onMouseDown, onMouseDown)\n    });\n  }, [onKeyDown, onMouseDown, onOverlayClick]);\n  return {\n    isOpen,\n    onClose,\n    headerId,\n    bodyId,\n    setBodyMounted,\n    setHeaderMounted,\n    dialogRef,\n    overlayRef,\n    getDialogProps,\n    getDialogContainerProps\n  };\n}\n\n/**\n * Modal hook to polyfill `aria-modal`.\n *\n * It applies `aria-hidden` to elements behind the modal\n * to indicate that they're `inert`.\n *\n * @param ref React ref of the node\n * @param shouldHide whether `aria-hidden` should be applied\n */\nexport function useAriaHidden(ref, shouldHide) {\n  useEffect(() => {\n    if (!ref.current) return undefined;\n    var undo = null;\n\n    if (shouldHide && ref.current) {\n      undo = hideOthers(ref.current);\n    }\n\n    return () => {\n      if (shouldHide) {\n        undo == null ? void 0 : undo();\n      }\n    };\n  }, [shouldHide, ref]);\n}\n//# sourceMappingURL=use-modal.js.map"]},"metadata":{},"sourceType":"module"}