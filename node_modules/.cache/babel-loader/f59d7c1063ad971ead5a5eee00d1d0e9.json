{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { keys } from '../utils/utils';\nimport { MatrixRoomStatus } from './models/MatrixRoom';\nimport { MatrixClientEventType } from './models/MatrixClientEvent';\nexport class MatrixClientEventEmitter extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.eventEmitProviders = new Map([[MatrixClientEventType.INVITE, () => [this.isInvite, this.emitInvite.bind(this)]], [MatrixClientEventType.MESSAGE, () => [this.isMessage, this.emitMessage.bind(this)]]]);\n  }\n\n  onStateChanged(_oldState, _newState, stateChange) {\n    for (const event of keys(MatrixClientEventType)) {\n      this.emitIfEvent(MatrixClientEventType[event], stateChange);\n    }\n  }\n\n  emitIfEvent(eventType, object) {\n    const provider = this.eventEmitProviders.get(eventType);\n\n    if (provider) {\n      const [predicate, emitter] = provider();\n\n      if (predicate(object)) {\n        emitter(eventType, object);\n      }\n    }\n  }\n\n  emitClientEvent(eventType, content) {\n    this.emit(eventType, {\n      type: eventType,\n      content\n    });\n  }\n\n  isInvite(stateChange) {\n    return stateChange.rooms ? stateChange.rooms.some(room => room.status === MatrixRoomStatus.INVITED) : false;\n  }\n\n  emitInvite(eventType, stateChange) {\n    stateChange.rooms.filter(room => room.status === MatrixRoomStatus.INVITED).map(room => room.id).forEach(id => {\n      this.emitClientEvent(eventType, {\n        roomId: id\n      });\n    });\n  }\n\n  isMessage(stateChange) {\n    return stateChange.rooms ? stateChange.rooms.some(room => room.messages.length > 0) : false;\n  }\n\n  emitMessage(eventType, stateChange) {\n    stateChange.rooms.filter(room => room.messages.length > 0).map(room => room.messages.map(message => [room.id, message])).reduce((flatten, toFlatten) => flatten.concat(toFlatten), []).forEach(_ref => {\n      let [roomId, message] = _ref;\n      this.emitClientEvent(eventType, {\n        roomId,\n        message\n      });\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","keys","MatrixRoomStatus","MatrixClientEventType","MatrixClientEventEmitter","constructor","arguments","eventEmitProviders","Map","INVITE","isInvite","emitInvite","bind","MESSAGE","isMessage","emitMessage","onStateChanged","_oldState","_newState","stateChange","event","emitIfEvent","eventType","object","provider","get","predicate","emitter","emitClientEvent","content","emit","type","rooms","some","room","status","INVITED","filter","map","id","forEach","roomId","messages","length","message","reduce","flatten","toFlatten","concat"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/matrix-client/MatrixClientEventEmitter.js"],"sourcesContent":["import { EventEmitter } from 'events';\nimport { keys } from '../utils/utils';\nimport { MatrixRoomStatus } from './models/MatrixRoom';\nimport { MatrixClientEventType } from './models/MatrixClientEvent';\nexport class MatrixClientEventEmitter extends EventEmitter {\n    constructor() {\n        super(...arguments);\n        this.eventEmitProviders = new Map([\n            [MatrixClientEventType.INVITE, () => [this.isInvite, this.emitInvite.bind(this)]],\n            [MatrixClientEventType.MESSAGE, () => [this.isMessage, this.emitMessage.bind(this)]]\n        ]);\n    }\n    onStateChanged(_oldState, _newState, stateChange) {\n        for (const event of keys(MatrixClientEventType)) {\n            this.emitIfEvent(MatrixClientEventType[event], stateChange);\n        }\n    }\n    emitIfEvent(eventType, object) {\n        const provider = this.eventEmitProviders.get(eventType);\n        if (provider) {\n            const [predicate, emitter] = provider();\n            if (predicate(object)) {\n                emitter(eventType, object);\n            }\n        }\n    }\n    emitClientEvent(eventType, content) {\n        this.emit(eventType, {\n            type: eventType,\n            content\n        });\n    }\n    isInvite(stateChange) {\n        return stateChange.rooms\n            ? stateChange.rooms.some((room) => room.status === MatrixRoomStatus.INVITED)\n            : false;\n    }\n    emitInvite(eventType, stateChange) {\n        stateChange.rooms\n            .filter((room) => room.status === MatrixRoomStatus.INVITED)\n            .map((room) => room.id)\n            .forEach((id) => {\n            this.emitClientEvent(eventType, {\n                roomId: id\n            });\n        });\n    }\n    isMessage(stateChange) {\n        return stateChange.rooms ? stateChange.rooms.some((room) => room.messages.length > 0) : false;\n    }\n    emitMessage(eventType, stateChange) {\n        stateChange.rooms\n            .filter((room) => room.messages.length > 0)\n            .map((room) => room.messages.map((message) => [room.id, message]))\n            .reduce((flatten, toFlatten) => flatten.concat(toFlatten), [])\n            .forEach(([roomId, message]) => {\n            this.emitClientEvent(eventType, {\n                roomId,\n                message\n            });\n        });\n    }\n}\n//# sourceMappingURL=MatrixClientEventEmitter.js.map"]},"metadata":{},"sourceType":"module"}