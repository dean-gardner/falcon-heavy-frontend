{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { NETWORK_ADDRESS, BOND_CONTRACT_ADDRESS, NETWORK_TYPE } from '../../config/index';\nconst options = {\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\n  network: {\n    type: NETWORK_TYPE\n  }\n};\nexport default function useBonds() {\n  _s();\n\n  let myAddress;\n  const buyBond = useCallback(async () => {\n    // alert('Waiting for back-end');\n    const bondPrice = 1;\n    const LpToken = {\n      fa12: \"address\",\n      fa2: 10\n    };\n    const LpTokenAmount = 10;\n    const Slippage = 0.5;\n    const contractAddress = BOND_CONTRACT_ADDRESS;\n    const networkAddress = NETWORK_ADDRESS;\n    const Tezos = new TezosToolkit(networkAddress);\n    const wallet = new BeaconWallet(options);\n    const activeAccount = await wallet.client.getActiveAccount();\n\n    if (activeAccount) {\n      // If defined, the user is connected to a wallet.\n      // You can now do an operation request, sign request, or send another permission request to switch wallet\n      console.log(\"Already connected:\", activeAccount.address);\n      myAddress = activeAccount.address;\n    } else {\n      await wallet.requestPermissions();\n      myAddress = await wallet.getPKH();\n      console.log(\"New connection:\", myAddress);\n    }\n\n    Tezos.setWalletProvider(wallet);\n    Tezos.contract.at(contractAddress).then(contract => {\n      return contract.methods.order().send({\n        bond_price_requested_in_usd: bondPrice,\n        lp_token: LpToken,\n        lp_token_amount: LpTokenAmount,\n        slippage: Slippage\n      }).on('transactionHash', function (hash) {\n        debugger;\n      }).on('receipt', function (receipt) {\n        debugger;\n      }).on('confirmation', function (confirmationNumber, receipt) {\n        debugger;\n      }).on('error', console.error);\n    }); // const batch = await Tezos.wallet.batch()\n    //   .withContractCall(contract.methods.interact('defaul'))\n    //   .withContractCall(contract.methods.wait([['unit']]));\n    // const batchOp = await batch.send();\n    // console.log('Operation hash:', batchOp.hash);\n    // await batchOp.confirmation();\n  }, []);\n  return {\n    buyBond\n  };\n}\n\n_s(useBonds, \"98EULqhvGbXdXwBWcxxQNfx+sLQ=\");","map":{"version":3,"sources":["D:/work/projects/plenty/falcon-heavy-frontend/src/components/Bonds/hooks.ts"],"names":["useCallback","BeaconWallet","TezosToolkit","NETWORK_ADDRESS","BOND_CONTRACT_ADDRESS","NETWORK_TYPE","options","name","network","type","useBonds","myAddress","buyBond","bondPrice","LpToken","fa12","fa2","LpTokenAmount","Slippage","contractAddress","networkAddress","Tezos","wallet","activeAccount","client","getActiveAccount","console","log","address","requestPermissions","getPKH","setWalletProvider","contract","at","then","methods","order","send","bond_price_requested_in_usd","lp_token","lp_token_amount","slippage","on","hash","receipt","confirmationNumber","error"],"mappings":";;AAAA,SAASA,WAAT,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAAQC,eAAR,EAAyBC,qBAAzB,EAAgDC,YAAhD,QAAmE,oBAAnE;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,wCADQ;AAEdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAEJ;AADC;AAFK,CAAhB;AAOA,eAAe,SAASK,QAAT,GAAoB;AAAA;;AACjC,MAAIC,SAAJ;AAEA,QAAMC,OAAO,GAAGZ,WAAW,CAAC,YAAY;AACpC;AAEA,UAAMa,SAAS,GAAG,CAAlB;AACA,UAAMC,OAAO,GAAG;AAACC,MAAAA,IAAI,EAAE,SAAP;AAAoBC,MAAAA,GAAG,EAAE;AAAzB,KAAhB;AACA,UAAMC,aAAa,GAAG,EAAtB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AAEA,UAAMC,eAAe,GAAGf,qBAAxB;AACA,UAAMgB,cAAc,GAAGjB,eAAvB;AAEA,UAAMkB,KAAK,GAAG,IAAInB,YAAJ,CAAiBkB,cAAjB,CAAd;AACA,UAAME,MAAM,GAAG,IAAIrB,YAAJ,CAAiBK,OAAjB,CAAf;AAEA,UAAMiB,aAAa,GAAG,MAAMD,MAAM,CAACE,MAAP,CAAcC,gBAAd,EAA5B;;AACA,QAAIF,aAAJ,EAAmB;AACjB;AACA;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,aAAa,CAACK,OAAhD;AACAjB,MAAAA,SAAS,GAAGY,aAAa,CAACK,OAA1B;AACD,KALD,MAKO;AACL,YAAMN,MAAM,CAACO,kBAAP,EAAN;AACAlB,MAAAA,SAAS,GAAG,MAAMW,MAAM,CAACQ,MAAP,EAAlB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BhB,SAA/B;AACD;;AACDU,IAAAA,KAAK,CAACU,iBAAN,CAAwBT,MAAxB;AAEAD,IAAAA,KAAK,CAACW,QAAN,CAAeC,EAAf,CAAkBd,eAAlB,EAAmCe,IAAnC,CAAwCF,QAAQ,IAAI;AAClD,aAAOA,QAAQ,CAACG,OAAT,CAAiBC,KAAjB,GAAyBC,IAAzB,CAA8B;AAACC,QAAAA,2BAA2B,EAAEzB,SAA9B;AAAyC0B,QAAAA,QAAQ,EAAEzB,OAAnD;AACnC0B,QAAAA,eAAe,EAAEvB,aADkB;AACHwB,QAAAA,QAAQ,EAAEvB;AADP,OAA9B,EAENwB,EAFM,CAEH,iBAFG,EAEgB,UAASC,IAAT,EAAc;AACnC;AACC,OAJI,EAKJD,EALI,CAKD,SALC,EAKU,UAASE,OAAT,EAAiB;AAC9B;AAED,OARI,EASJF,EATI,CASD,cATC,EASe,UAASG,kBAAT,EAA6BD,OAA7B,EAAqC;AACvD;AAED,OAZI,EAaJF,EAbI,CAaD,OAbC,EAaQhB,OAAO,CAACoB,KAbhB,CAAP;AAcG,KAfL,EA3BoC,CA6CpC;AACA;AACA;AAEA;AACA;AACA;AACH,GApD0B,EAoDxB,EApDwB,CAA3B;AAwDA,SAAO;AAAElC,IAAAA;AAAF,GAAP;AACD;;GA5DuBF,Q","sourcesContent":["import { useCallback, useState } from \"react\";\r\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\r\n\r\nimport { TezosToolkit } from \"@taquito/taquito\";\r\nimport { NetworkType, PermissionScope } from \"@airgap/beacon-sdk\";\r\nimport {NETWORK_ADDRESS, BOND_CONTRACT_ADDRESS, NETWORK_TYPE} from '../../config/index';\r\n\r\nconst options = {\r\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\r\n  network: {\r\n    type: NETWORK_TYPE,\r\n  },\r\n};\r\n\r\nexport default function useBonds() {\r\n  let myAddress: string | undefined;\r\n\r\n  const buyBond = useCallback(async () => {\r\n      // alert('Waiting for back-end');\r\n      \r\n      const bondPrice = 1;\r\n      const LpToken = {fa12: \"address\",   fa2: 10};\r\n      const LpTokenAmount = 10;\r\n      const Slippage = 0.5;\r\n\r\n      const contractAddress = BOND_CONTRACT_ADDRESS;\r\n      const networkAddress = NETWORK_ADDRESS;\r\n\r\n      const Tezos = new TezosToolkit(networkAddress);\r\n      const wallet = new BeaconWallet(options);\r\n\r\n      const activeAccount = await wallet.client.getActiveAccount();\r\n      if (activeAccount) {\r\n        // If defined, the user is connected to a wallet.\r\n        // You can now do an operation request, sign request, or send another permission request to switch wallet\r\n        console.log(\"Already connected:\", activeAccount.address);\r\n        myAddress = activeAccount.address;\r\n      } else {\r\n        await wallet.requestPermissions();\r\n        myAddress = await wallet.getPKH();\r\n        console.log(\"New connection:\", myAddress);\r\n      }\r\n      Tezos.setWalletProvider(wallet);\r\n\r\n      Tezos.contract.at(contractAddress).then(contract => {\r\n        return contract.methods.order().send({bond_price_requested_in_usd: bondPrice, lp_token: LpToken, \r\n          lp_token_amount: LpTokenAmount, slippage: Slippage})\r\n        .on('transactionHash', function(hash){\r\n          debugger;\r\n          })\r\n          .on('receipt', function(receipt){\r\n            debugger;\r\n\r\n          })\r\n          .on('confirmation', function(confirmationNumber, receipt){\r\n            debugger;\r\n\r\n          })\r\n          .on('error', console.error);\r\n          } );\r\n\r\n\r\n      // const batch = await Tezos.wallet.batch()\r\n      //   .withContractCall(contract.methods.interact('defaul'))\r\n      //   .withContractCall(contract.methods.wait([['unit']]));\r\n\r\n      // const batchOp = await batch.send();\r\n      // console.log('Operation hash:', batchOp.hash);\r\n      // await batchOp.confirmation();\r\n  }, []);\r\n\r\n\r\n\r\n  return { buyBond };\r\n}\r\n"]},"metadata":{},"sourceType":"module"}