{"ast":null,"code":"// Number assertions\nexport function isNumber(value) {\n  return typeof value === \"number\";\n}\nexport var isNotNumber = value => typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value);\nexport function isNumeric(value) {\n  return value != null && value - parseFloat(value) + 1 >= 0;\n} // Array assertions\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}\nexport var isEmptyArray = value => isArray(value) && value.length === 0; // Function assertions\n\nexport function isFunction(value) {\n  return typeof value === \"function\";\n} // Generic assertions\n\nexport var isDefined = value => typeof value !== \"undefined\" && value !== undefined;\nexport var isUndefined = value => typeof value === \"undefined\" || value === undefined; // Object assertions\n\nexport var isObject = value => {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !isArray(value);\n};\nexport var isEmptyObject = value => isObject(value) && Object.keys(value).length === 0;\nexport function isNotEmptyObject(value) {\n  return value && !isEmptyObject(value);\n}\nexport var isNull = value => value == null; // String assertions\n\nexport function isString(value) {\n  return Object.prototype.toString.call(value) === \"[object String]\";\n} // Event assertions\n\nexport function isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n} // Empty assertions\n\nexport var isEmpty = value => {\n  if (isArray(value)) return isEmptyArray(value);\n  if (isObject(value)) return isEmptyObject(value);\n  if (value == null || value === \"\") return true;\n  return false;\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport var __DEV__ = process.env.NODE_ENV !== \"production\";","map":{"version":3,"mappings":"AAAA;AACA,OAAO,SAASA,QAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;AACD,OAAO,IAAIC,WAAW,GAAGD,KAAK,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BE,MAAM,CAACC,KAAP,CAAaH,KAAb,CAA7B,IAAoD,CAACE,MAAM,CAACE,QAAP,CAAgBJ,KAAhB,CAAhF;AACP,OAAO,SAASK,SAAT,CAAmBL,KAAnB,EAA0B;AAC/B,SAAOA,KAAK,IAAI,IAAT,IAAiBA,KAAK,GAAGM,UAAU,CAACN,KAAD,CAAlB,GAA4B,CAA5B,IAAiC,CAAzD;AACD,C,CAAC;;AAEF,OAAO,SAASO,OAAT,CAAiBP,KAAjB,EAAwB;AAC7B,SAAOQ,KAAK,CAACD,OAAN,CAAcP,KAAd,CAAP;AACD;AACD,OAAO,IAAIS,YAAY,GAAGT,KAAK,IAAIO,OAAO,CAACP,KAAD,CAAP,IAAkBA,KAAK,CAACU,MAAN,KAAiB,CAA/D,C,CAAkE;;AAEzE,OAAO,SAASC,UAAT,CAAoBX,KAApB,EAA2B;AAChC,SAAO,OAAOA,KAAP,KAAiB,UAAxB;AACD,C,CAAC;;AAEF,OAAO,IAAIY,SAAS,GAAGZ,KAAK,IAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAKa,SAAnE;AACP,OAAO,IAAIC,WAAW,GAAGd,KAAK,IAAI,OAAOA,KAAP,KAAiB,WAAjB,IAAgCA,KAAK,KAAKa,SAArE,C,CAAgF;;AAEvF,OAAO,IAAIE,QAAQ,GAAGf,KAAK,IAAI;AAC7B,MAAIgB,IAAI,GAAG,OAAOhB,KAAlB;AACA,SAAOA,KAAK,IAAI,IAAT,KAAkBgB,IAAI,KAAK,QAAT,IAAqBA,IAAI,KAAK,UAAhD,KAA+D,CAACT,OAAO,CAACP,KAAD,CAA9E;AACD,CAHM;AAIP,OAAO,IAAIiB,aAAa,GAAGjB,KAAK,IAAIe,QAAQ,CAACf,KAAD,CAAR,IAAmBkB,MAAM,CAACC,IAAP,CAAYnB,KAAZ,EAAmBU,MAAnB,KAA8B,CAA9E;AACP,OAAO,SAASU,gBAAT,CAA0BpB,KAA1B,EAAiC;AACtC,SAAOA,KAAK,IAAI,CAACiB,aAAa,CAACjB,KAAD,CAA9B;AACD;AACD,OAAO,IAAIqB,MAAM,GAAGrB,KAAK,IAAIA,KAAK,IAAI,IAA/B,C,CAAqC;;AAE5C,OAAO,SAASsB,QAAT,CAAkBtB,KAAlB,EAAyB;AAC9B,SAAOkB,MAAM,CAACK,SAAP,CAAiBC,QAAjB,CAA0BC,IAA1B,CAA+BzB,KAA/B,MAA0C,iBAAjD;AACD,C,CAAC;;AAEF,OAAO,SAAS0B,YAAT,CAAsB1B,KAAtB,EAA6B;AAClC,SAAOA,KAAK,IAAIe,QAAQ,CAACf,KAAD,CAAjB,IAA4Be,QAAQ,CAACf,KAAK,CAAC2B,MAAP,CAA3C;AACD,C,CAAC;;AAEF,OAAO,IAAIC,OAAO,GAAG5B,KAAK,IAAI;AAC5B,MAAIO,OAAO,CAACP,KAAD,CAAX,EAAoB,OAAOS,YAAY,CAACT,KAAD,CAAnB;AACpB,MAAIe,QAAQ,CAACf,KAAD,CAAZ,EAAqB,OAAOiB,aAAa,CAACjB,KAAD,CAApB;AACrB,MAAIA,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,EAA/B,EAAmC,OAAO,IAAP;AACnC,SAAO,KAAP;AACD,CALM,C,CAKJ;;AAEH,OAAO,IAAI6B,OAAO,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAvC","names":["isNumber","value","isNotNumber","Number","isNaN","isFinite","isNumeric","parseFloat","isArray","Array","isEmptyArray","length","isFunction","isDefined","undefined","isUndefined","isObject","type","isEmptyObject","Object","keys","isNotEmptyObject","isNull","isString","prototype","toString","call","isInputEvent","target","isEmpty","__DEV__","process","env","NODE_ENV"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/utils/dist/esm/assertion.js"],"sourcesContent":["// Number assertions\nexport function isNumber(value) {\n  return typeof value === \"number\";\n}\nexport var isNotNumber = value => typeof value !== \"number\" || Number.isNaN(value) || !Number.isFinite(value);\nexport function isNumeric(value) {\n  return value != null && value - parseFloat(value) + 1 >= 0;\n} // Array assertions\n\nexport function isArray(value) {\n  return Array.isArray(value);\n}\nexport var isEmptyArray = value => isArray(value) && value.length === 0; // Function assertions\n\nexport function isFunction(value) {\n  return typeof value === \"function\";\n} // Generic assertions\n\nexport var isDefined = value => typeof value !== \"undefined\" && value !== undefined;\nexport var isUndefined = value => typeof value === \"undefined\" || value === undefined; // Object assertions\n\nexport var isObject = value => {\n  var type = typeof value;\n  return value != null && (type === \"object\" || type === \"function\") && !isArray(value);\n};\nexport var isEmptyObject = value => isObject(value) && Object.keys(value).length === 0;\nexport function isNotEmptyObject(value) {\n  return value && !isEmptyObject(value);\n}\nexport var isNull = value => value == null; // String assertions\n\nexport function isString(value) {\n  return Object.prototype.toString.call(value) === \"[object String]\";\n} // Event assertions\n\nexport function isInputEvent(value) {\n  return value && isObject(value) && isObject(value.target);\n} // Empty assertions\n\nexport var isEmpty = value => {\n  if (isArray(value)) return isEmptyArray(value);\n  if (isObject(value)) return isEmptyObject(value);\n  if (value == null || value === \"\") return true;\n  return false;\n}; // eslint-disable-next-line @typescript-eslint/naming-convention\n\nexport var __DEV__ = process.env.NODE_ENV !== \"production\";\n//# sourceMappingURL=assertion.js.map"]},"metadata":{},"sourceType":"module"}