{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n      bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n      _c = _a.windowTime,\n      windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n      useRefCount = _a.refCount,\n      scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n    var innerSub;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      innerSub = subject.subscribe(this);\n      subscription = source.subscribe({\n        next: function (value) {\n          subject.next(value);\n        },\n        error: function (err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function () {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n    } else {\n      innerSub = subject.subscribe(this);\n    }\n\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,aAAT,QAA8B,kBAA9B;AACA,OAAO,SAASC,WAAT,CAAqBC,kBAArB,EAAyCC,UAAzC,EAAqDC,SAArD,EAAgE;AACnE,MAAIC,MAAJ;;AACA,MAAIH,kBAAkB,IAAI,OAAOA,kBAAP,KAA8B,QAAxD,EAAkE;AAC9DG,UAAM,GAAGH,kBAAT;AACH,GAFD,MAGK;AACDG,UAAM,GAAG;AACLC,gBAAU,EAAEJ,kBADP;AAELC,gBAAU,EAAEA,UAFP;AAGLI,cAAQ,EAAE,KAHL;AAILH,eAAS,EAAEA;AAJN,KAAT;AAMH;;AACD,SAAO,UAAUI,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAYC,mBAAmB,CAACL,MAAD,CAA/B,CAAP;AAAkD,GAA7E;AACH;;AACD,SAASK,mBAAT,CAA6BC,EAA7B,EAAiC;AAC7B,MAAIC,EAAE,GAAGD,EAAE,CAACL,UAAZ;AAAA,MAAwBA,UAAU,GAAGM,EAAE,KAAK,KAAK,CAAZ,GAAgBC,MAAM,CAACC,iBAAvB,GAA2CF,EAAhF;AAAA,MAAoFG,EAAE,GAAGJ,EAAE,CAACR,UAA5F;AAAA,MAAwGA,UAAU,GAAGY,EAAE,KAAK,KAAK,CAAZ,GAAgBF,MAAM,CAACC,iBAAvB,GAA2CC,EAAhK;AAAA,MAAoKC,WAAW,GAAGL,EAAE,CAACJ,QAArL;AAAA,MAA+LH,SAAS,GAAGO,EAAE,CAACP,SAA9M;AACA,MAAIa,OAAJ;AACA,MAAIV,QAAQ,GAAG,CAAf;AACA,MAAIW,YAAJ;AACA,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,UAAU,GAAG,KAAjB;AACA,SAAO,SAASC,oBAAT,CAA8Bb,MAA9B,EAAsC;AACzCD,YAAQ;AACR,QAAIe,QAAJ;;AACA,QAAI,CAACL,OAAD,IAAYE,QAAhB,EAA0B;AACtBA,cAAQ,GAAG,KAAX;AACAF,aAAO,GAAG,IAAIjB,aAAJ,CAAkBM,UAAlB,EAA8BH,UAA9B,EAA0CC,SAA1C,CAAV;AACAkB,cAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkB,IAAlB,CAAX;AACAL,kBAAY,GAAGV,MAAM,CAACe,SAAP,CAAiB;AAC5BC,YAAI,EAAE,UAAUC,KAAV,EAAiB;AAAER,iBAAO,CAACO,IAAR,CAAaC,KAAb;AAAsB,SADnB;AAE5BC,aAAK,EAAE,UAAUC,GAAV,EAAe;AAClBR,kBAAQ,GAAG,IAAX;AACAF,iBAAO,CAACS,KAAR,CAAcC,GAAd;AACH,SAL2B;AAM5BC,gBAAQ,EAAE,YAAY;AAClBR,oBAAU,GAAG,IAAb;AACAF,sBAAY,GAAGW,SAAf;AACAZ,iBAAO,CAACW,QAAR;AACH;AAV2B,OAAjB,CAAf;AAYH,KAhBD,MAiBK;AACDN,cAAQ,GAAGL,OAAO,CAACM,SAAR,CAAkB,IAAlB,CAAX;AACH;;AACD,SAAKO,GAAL,CAAS,YAAY;AACjBvB,cAAQ;AACRe,cAAQ,CAACS,WAAT;;AACA,UAAIb,YAAY,IAAI,CAACE,UAAjB,IAA+BJ,WAA/B,IAA8CT,QAAQ,KAAK,CAA/D,EAAkE;AAC9DW,oBAAY,CAACa,WAAb;AACAb,oBAAY,GAAGW,SAAf;AACAZ,eAAO,GAAGY,SAAV;AACH;AACJ,KARD;AASH,GAhCD;AAiCH","names":["ReplaySubject","shareReplay","configOrBufferSize","windowTime","scheduler","config","bufferSize","refCount","source","lift","shareReplayOperator","_a","_b","Number","POSITIVE_INFINITY","_c","useRefCount","subject","subscription","hasError","isComplete","shareReplayOperation","innerSub","subscribe","next","value","error","err","complete","undefined","add","unsubscribe"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/shareReplay.js"],"sourcesContent":["/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    var config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime: windowTime,\n            refCount: false,\n            scheduler: scheduler\n        };\n    }\n    return function (source) { return source.lift(shareReplayOperator(config)); };\n}\nfunction shareReplayOperator(_a) {\n    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        var innerSub;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            innerSub = subject.subscribe(this);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        else {\n            innerSub = subject.subscribe(this);\n        }\n        this.add(function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map\n"]},"metadata":{},"sourceType":"module"}