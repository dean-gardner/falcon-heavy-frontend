{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Serializer, Client, LocalStorage, TransportType } from '../..';\nimport { PermissionManager } from '../../managers/PermissionManager';\nimport { AppMetadataManager } from '../../managers/AppMetadataManager';\nimport { IncomingBeaconMessageInterceptor } from '../../interceptors/IncomingBeaconMessageInterceptor';\nimport { OutgoingBeaconMessageInterceptor } from '../../interceptors/OutgoingBeaconMessageInterceptor';\nexport class WalletClient extends Client {\n  constructor(config) {\n    super({\n      name: config.name,\n      storage: new LocalStorage()\n    });\n    this.pendingRequests = [];\n    this.permissionManager = new PermissionManager(new LocalStorage());\n    this.appMetadataManager = new AppMetadataManager(new LocalStorage());\n  }\n\n  init() {\n    const _super = Object.create(null, {\n      init: {\n        get: () => super.init\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      return _super.init.call(this, false);\n    });\n  }\n\n  connect(newMessageCallback) {\n    const _super = Object.create(null, {\n      _connect: {\n        get: () => super._connect\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      this.handleResponse = (message, connectionInfo) => __awaiter(this, void 0, void 0, function* () {\n        if (!this.pendingRequests.some(request => request.id === message.id)) {\n          this.pendingRequests.push(message);\n          yield IncomingBeaconMessageInterceptor.intercept({\n            message,\n            connectionInfo,\n            appMetadataManager: this.appMetadataManager,\n            interceptorCallback: newMessageCallback\n          });\n        }\n      });\n\n      return _super._connect.call(this);\n    });\n  }\n\n  respond(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      console.log('responding to message', message);\n      const request = this.pendingRequests.find(pendingRequest => pendingRequest.id === message.id);\n\n      if (!request) {\n        throw new Error('No matching request found!');\n      }\n\n      this.pendingRequests = this.pendingRequests.filter(pendingRequest => pendingRequest.id !== message.id);\n      yield OutgoingBeaconMessageInterceptor.intercept({\n        beaconId: yield this.beaconId,\n        request,\n        message,\n        permissionManager: this.permissionManager,\n        appMetadataManager: this.appMetadataManager,\n        interceptorCallback: response => __awaiter(this, void 0, void 0, function* () {\n          yield this.respondToMessage(response);\n        })\n      });\n    });\n  }\n\n  getAppMetadataList() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.appMetadataManager.getAppMetadataList();\n    });\n  }\n\n  getAppMetadata(beaconId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.appMetadataManager.getAppMetadata(beaconId);\n    });\n  }\n\n  removeAppMetadata(beaconId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.appMetadataManager.removeAppMetadata(beaconId);\n    });\n  }\n\n  removeAllAppMetadata() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.appMetadataManager.removeAllAppMetadata();\n    });\n  }\n\n  getPermissions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.permissionManager.getPermissions();\n    });\n  }\n\n  getPermission(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.permissionManager.getPermission(accountIdentifier);\n    });\n  }\n\n  removePermission(accountIdentifier) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.permissionManager.removePermission(accountIdentifier);\n    });\n  }\n\n  removeAllPermissions() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.permissionManager.removeAllPermissions();\n    });\n  }\n\n  removePeer(id) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if ((yield this.transport).type === TransportType.P2P) {\n        const removePeerResult = (yield this.transport).removePeer(id);\n        yield this.removePermissionsForPeers([id]);\n        return removePeerResult;\n      }\n    });\n  }\n\n  removeAllPeers() {\n    return __awaiter(this, void 0, void 0, function* () {\n      if ((yield this.transport).type === TransportType.P2P) {\n        const peers = yield (yield this.transport).getPeers();\n        const removePeerResult = (yield this.transport).removeAllPeers();\n        yield this.removePermissionsForPeers(peers);\n        return removePeerResult;\n      }\n    });\n  }\n\n  removePermissionsForPeers(peersToRemove) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const permissions = yield this.permissionManager.getPermissions();\n      const peerIdsToRemove = peersToRemove.map(peer => peer.publicKey); // Remove all permissions with origin of the specified peer\n\n      const permissionsToRemove = permissions.filter(permission => peerIdsToRemove.includes(permission.appMetadata.beaconId));\n      const permissionIdentifiersToRemove = permissionsToRemove.map(permissionInfo => permissionInfo.accountIdentifier);\n      yield this.permissionManager.removePermissions(permissionIdentifiersToRemove);\n    });\n  }\n\n  respondToMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const serializedMessage = yield new Serializer().serialize(message);\n      yield (yield this.transport).send(serializedMessage);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Serializer","Client","LocalStorage","TransportType","PermissionManager","AppMetadataManager","IncomingBeaconMessageInterceptor","OutgoingBeaconMessageInterceptor","WalletClient","constructor","config","name","storage","pendingRequests","permissionManager","appMetadataManager","init","_super","Object","create","get","call","connect","newMessageCallback","_connect","handleResponse","message","connectionInfo","some","request","id","push","intercept","interceptorCallback","respond","console","log","find","pendingRequest","Error","filter","beaconId","response","respondToMessage","getAppMetadataList","getAppMetadata","removeAppMetadata","removeAllAppMetadata","getPermissions","getPermission","accountIdentifier","removePermission","removeAllPermissions","removePeer","transport","type","P2P","removePeerResult","removePermissionsForPeers","removeAllPeers","peers","getPeers","peersToRemove","permissions","peerIdsToRemove","map","peer","publicKey","permissionsToRemove","permission","includes","appMetadata","permissionIdentifiersToRemove","permissionInfo","removePermissions","serializedMessage","serialize","send"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/clients/wallet-client/WalletClient.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Serializer, Client, LocalStorage, TransportType } from '../..';\nimport { PermissionManager } from '../../managers/PermissionManager';\nimport { AppMetadataManager } from '../../managers/AppMetadataManager';\nimport { IncomingBeaconMessageInterceptor } from '../../interceptors/IncomingBeaconMessageInterceptor';\nimport { OutgoingBeaconMessageInterceptor } from '../../interceptors/OutgoingBeaconMessageInterceptor';\nexport class WalletClient extends Client {\n    constructor(config) {\n        super({ name: config.name, storage: new LocalStorage() });\n        this.pendingRequests = [];\n        this.permissionManager = new PermissionManager(new LocalStorage());\n        this.appMetadataManager = new AppMetadataManager(new LocalStorage());\n    }\n    init() {\n        const _super = Object.create(null, {\n            init: { get: () => super.init }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            return _super.init.call(this, false);\n        });\n    }\n    connect(newMessageCallback) {\n        const _super = Object.create(null, {\n            _connect: { get: () => super._connect }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            this.handleResponse = (message, connectionInfo) => __awaiter(this, void 0, void 0, function* () {\n                if (!this.pendingRequests.some((request) => request.id === message.id)) {\n                    this.pendingRequests.push(message);\n                    yield IncomingBeaconMessageInterceptor.intercept({\n                        message,\n                        connectionInfo,\n                        appMetadataManager: this.appMetadataManager,\n                        interceptorCallback: newMessageCallback\n                    });\n                }\n            });\n            return _super._connect.call(this);\n        });\n    }\n    respond(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            console.log('responding to message', message);\n            const request = this.pendingRequests.find((pendingRequest) => pendingRequest.id === message.id);\n            if (!request) {\n                throw new Error('No matching request found!');\n            }\n            this.pendingRequests = this.pendingRequests.filter((pendingRequest) => pendingRequest.id !== message.id);\n            yield OutgoingBeaconMessageInterceptor.intercept({\n                beaconId: yield this.beaconId,\n                request,\n                message,\n                permissionManager: this.permissionManager,\n                appMetadataManager: this.appMetadataManager,\n                interceptorCallback: (response) => __awaiter(this, void 0, void 0, function* () {\n                    yield this.respondToMessage(response);\n                })\n            });\n        });\n    }\n    getAppMetadataList() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.appMetadataManager.getAppMetadataList();\n        });\n    }\n    getAppMetadata(beaconId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.appMetadataManager.getAppMetadata(beaconId);\n        });\n    }\n    removeAppMetadata(beaconId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.appMetadataManager.removeAppMetadata(beaconId);\n        });\n    }\n    removeAllAppMetadata() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.appMetadataManager.removeAllAppMetadata();\n        });\n    }\n    getPermissions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.permissionManager.getPermissions();\n        });\n    }\n    getPermission(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.permissionManager.getPermission(accountIdentifier);\n        });\n    }\n    removePermission(accountIdentifier) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.permissionManager.removePermission(accountIdentifier);\n        });\n    }\n    removeAllPermissions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.permissionManager.removeAllPermissions();\n        });\n    }\n    removePeer(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((yield this.transport).type === TransportType.P2P) {\n                const removePeerResult = (yield this.transport).removePeer(id);\n                yield this.removePermissionsForPeers([id]);\n                return removePeerResult;\n            }\n        });\n    }\n    removeAllPeers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if ((yield this.transport).type === TransportType.P2P) {\n                const peers = yield (yield this.transport).getPeers();\n                const removePeerResult = (yield this.transport).removeAllPeers();\n                yield this.removePermissionsForPeers(peers);\n                return removePeerResult;\n            }\n        });\n    }\n    removePermissionsForPeers(peersToRemove) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const permissions = yield this.permissionManager.getPermissions();\n            const peerIdsToRemove = peersToRemove.map((peer) => peer.publicKey);\n            // Remove all permissions with origin of the specified peer\n            const permissionsToRemove = permissions.filter((permission) => peerIdsToRemove.includes(permission.appMetadata.beaconId));\n            const permissionIdentifiersToRemove = permissionsToRemove.map((permissionInfo) => permissionInfo.accountIdentifier);\n            yield this.permissionManager.removePermissions(permissionIdentifiersToRemove);\n        });\n    }\n    respondToMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const serializedMessage = yield new Serializer().serialize(message);\n            yield (yield this.transport).send(serializedMessage);\n        });\n    }\n}\n//# sourceMappingURL=WalletClient.js.map"]},"metadata":{},"sourceType":"module"}