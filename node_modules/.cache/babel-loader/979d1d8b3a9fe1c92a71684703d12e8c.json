{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\work\\\\projects\\\\plenty\\\\falcon-heavy-frontend\\\\src\\\\components\\\\ContractStorageInfo.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback } from \"react\";\nimport { Box, Textarea, Text } from \"@chakra-ui/react\";\nimport useBeacon from \"../hooks/useBeacon\";\nimport { usePendingPromise } from \"../hooks/usePendingPromise\";\nimport { Preloader } from \"./Preloader\";\nexport const ContractStorageInfo = _ref => {\n  _s();\n\n  let {\n    contractAddress\n  } = _ref;\n  const {\n    Tezos\n  } = useBeacon();\n  const fetcher = useCallback(async () => (await Tezos.contract.at(contractAddress)).storage(), [Tezos.contract, contractAddress]);\n  const {\n    fetching,\n    data: storage,\n    error\n  } = usePendingPromise(fetcher, JSON.stringify);\n  return !fetching && (storage || error) ? /*#__PURE__*/_jsxDEV(Box, {\n    w: \"full\",\n    children: [/*#__PURE__*/_jsxDEV(Text, {\n      size: \"sm\",\n      align: \"left\",\n      marginBottom: \"2\",\n      children: \"Contract storage:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Textarea, {\n      readOnly: true,\n      defaultValue: error || storage,\n      isInvalid: !!error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContractStorageInfo, \"kcVQZbarCmUCvl72czicZzekzAg=\", false, function () {\n  return [useBeacon, usePendingPromise];\n});\n\n_c = ContractStorageInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContractStorageInfo\");","map":{"version":3,"sources":["D:/work/projects/plenty/falcon-heavy-frontend/src/components/ContractStorageInfo.tsx"],"names":["React","useCallback","Box","Textarea","Text","useBeacon","usePendingPromise","Preloader","ContractStorageInfo","contractAddress","Tezos","fetcher","contract","at","storage","fetching","data","error","JSON","stringify"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,SAASC,GAAT,EAAcC,QAAd,EAAwBC,IAAxB,QAAoC,kBAApC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,SAAT,QAA0B,aAA1B;AAEA,OAAO,MAAMC,mBAA0D,GAAG,QAEpE;AAAA;;AAAA,MAFqE;AACzEC,IAAAA;AADyE,GAErE;AACJ,QAAM;AAAEC,IAAAA;AAAF,MAAYL,SAAS,EAA3B;AAEA,QAAMM,OAAO,GAAGV,WAAW,CACzB,YAAY,CAAC,MAAMS,KAAK,CAACE,QAAN,CAAeC,EAAf,CAAkBJ,eAAlB,CAAP,EAA2CK,OAA3C,EADa,EAEzB,CAACJ,KAAK,CAACE,QAAP,EAAiBH,eAAjB,CAFyB,CAA3B;AAKA,QAAM;AAAEM,IAAAA,QAAF;AAAYC,IAAAA,IAAI,EAAEF,OAAlB;AAA2BG,IAAAA;AAA3B,MAAqCX,iBAAiB,CAC1DK,OAD0D,EAE1DO,IAAI,CAACC,SAFqD,CAA5D;AAKA,SAAO,CAACJ,QAAD,KAAcD,OAAO,IAAIG,KAAzB,iBACL,QAAC,GAAD;AAAK,IAAA,CAAC,EAAC,MAAP;AAAA,4BACE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAC,IAAX;AAAgB,MAAA,KAAK,EAAC,MAAtB;AAA6B,MAAA,YAAY,EAAC,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE,QAAC,QAAD;AAAU,MAAA,QAAQ,MAAlB;AAAmB,MAAA,YAAY,EAAEA,KAAK,IAAIH,OAA1C;AAAmD,MAAA,SAAS,EAAE,CAAC,CAACG;AAAhE;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADK,gBAQL,QAAC,SAAD;AAAA;AAAA;AAAA;AAAA,UARF;AAUD,CAzBM;;GAAMT,mB;UAGOH,S,EAOyBC,iB;;;KAVhCE,mB","sourcesContent":["import React, { useCallback } from \"react\";\r\nimport { Box, Textarea, Text } from \"@chakra-ui/react\";\r\nimport useBeacon from \"../hooks/useBeacon\";\r\nimport { usePendingPromise } from \"../hooks/usePendingPromise\";\r\nimport { Preloader } from \"./Preloader\";\r\n\r\nexport const ContractStorageInfo: React.FC<{ contractAddress: string }> = ({\r\n  contractAddress,\r\n}) => {\r\n  const { Tezos } = useBeacon();\r\n\r\n  const fetcher = useCallback(\r\n    async () => (await Tezos.contract.at(contractAddress)).storage(),\r\n    [Tezos.contract, contractAddress]\r\n  );\r\n\r\n  const { fetching, data: storage, error } = usePendingPromise(\r\n    fetcher,\r\n    JSON.stringify\r\n  );\r\n\r\n  return !fetching && (storage || error) ? (\r\n    <Box w=\"full\">\r\n      <Text size=\"sm\" align=\"left\" marginBottom=\"2\">\r\n        Contract storage:\r\n      </Text>\r\n      <Textarea readOnly defaultValue={error || storage} isInvalid={!!error} />\r\n    </Box>\r\n  ) : (\r\n    <Preloader />\r\n  );\r\n};\r\n"]},"metadata":{},"sourceType":"module"}