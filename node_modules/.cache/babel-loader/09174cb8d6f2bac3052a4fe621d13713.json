{"ast":null,"code":"/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  if (sources.length === 1) {\n    var first_1 = sources[0];\n\n    if (isArray(first_1)) {\n      return forkJoinInternal(first_1, null);\n    }\n\n    if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n      var keys = Object.keys(first_1);\n      return forkJoinInternal(keys.map(function (key) {\n        return first_1[key];\n      }), keys);\n    }\n  }\n\n  if (typeof sources[sources.length - 1] === 'function') {\n    var resultSelector_1 = sources.pop();\n    sources = sources.length === 1 && isArray(sources[0]) ? sources[0] : sources;\n    return forkJoinInternal(sources, null).pipe(map(function (args) {\n      return resultSelector_1.apply(void 0, args);\n    }));\n  }\n\n  return forkJoinInternal(sources, null);\n}\n\nfunction forkJoinInternal(sources, keys) {\n  return new Observable(function (subscriber) {\n    var len = sources.length;\n\n    if (len === 0) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(len);\n    var completed = 0;\n    var emitted = 0;\n\n    var _loop_1 = function (i) {\n      var source = from(sources[i]);\n      var hasValue = false;\n      subscriber.add(source.subscribe({\n        next: function (value) {\n          if (!hasValue) {\n            hasValue = true;\n            emitted++;\n          }\n\n          values[i] = value;\n        },\n        error: function (err) {\n          return subscriber.error(err);\n        },\n        complete: function () {\n          completed++;\n\n          if (completed === len || !hasValue) {\n            if (emitted === len) {\n              subscriber.next(keys ? keys.reduce(function (result, key, i) {\n                return result[key] = values[i], result;\n              }, {}) : values);\n            }\n\n            subscriber.complete();\n          }\n        }\n      }));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n  });\n}","map":{"version":3,"mappings":"AAAA;AACA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,SAASC,QAAT,GAAoB;AACvB,MAAIC,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,WAAO,CAACC,EAAD,CAAP,GAAcC,SAAS,CAACD,EAAD,CAAvB;AACH;;AACD,MAAID,OAAO,CAACG,MAAR,KAAmB,CAAvB,EAA0B;AACtB,QAAIC,OAAO,GAAGJ,OAAO,CAAC,CAAD,CAArB;;AACA,QAAIL,OAAO,CAACS,OAAD,CAAX,EAAsB;AAClB,aAAOC,gBAAgB,CAACD,OAAD,EAAU,IAAV,CAAvB;AACH;;AACD,QAAIP,QAAQ,CAACO,OAAD,CAAR,IAAqBE,MAAM,CAACC,cAAP,CAAsBH,OAAtB,MAAmCE,MAAM,CAACE,SAAnE,EAA8E;AAC1E,UAAIC,IAAI,GAAGH,MAAM,CAACG,IAAP,CAAYL,OAAZ,CAAX;AACA,aAAOC,gBAAgB,CAACI,IAAI,CAACb,GAAL,CAAS,UAAUc,GAAV,EAAe;AAAE,eAAON,OAAO,CAACM,GAAD,CAAd;AAAsB,OAAhD,CAAD,EAAoDD,IAApD,CAAvB;AACH;AACJ;;AACD,MAAI,OAAOT,OAAO,CAACA,OAAO,CAACG,MAAR,GAAiB,CAAlB,CAAd,KAAuC,UAA3C,EAAuD;AACnD,QAAIQ,gBAAgB,GAAGX,OAAO,CAACY,GAAR,EAAvB;AACAZ,WAAO,GAAIA,OAAO,CAACG,MAAR,KAAmB,CAAnB,IAAwBR,OAAO,CAACK,OAAO,CAAC,CAAD,CAAR,CAAhC,GAAgDA,OAAO,CAAC,CAAD,CAAvD,GAA6DA,OAAvE;AACA,WAAOK,gBAAgB,CAACL,OAAD,EAAU,IAAV,CAAhB,CAAgCa,IAAhC,CAAqCjB,GAAG,CAAC,UAAUkB,IAAV,EAAgB;AAAE,aAAOH,gBAAgB,CAACI,KAAjB,CAAuB,KAAK,CAA5B,EAA+BD,IAA/B,CAAP;AAA8C,KAAjE,CAAxC,CAAP;AACH;;AACD,SAAOT,gBAAgB,CAACL,OAAD,EAAU,IAAV,CAAvB;AACH;;AACD,SAASK,gBAAT,CAA0BL,OAA1B,EAAmCS,IAAnC,EAAyC;AACrC,SAAO,IAAIf,UAAJ,CAAe,UAAUsB,UAAV,EAAsB;AACxC,QAAIC,GAAG,GAAGjB,OAAO,CAACG,MAAlB;;AACA,QAAIc,GAAG,KAAK,CAAZ,EAAe;AACXD,gBAAU,CAACE,QAAX;AACA;AACH;;AACD,QAAIC,MAAM,GAAG,IAAIC,KAAJ,CAAUH,GAAV,CAAb;AACA,QAAII,SAAS,GAAG,CAAhB;AACA,QAAIC,OAAO,GAAG,CAAd;;AACA,QAAIC,OAAO,GAAG,UAAUC,CAAV,EAAa;AACvB,UAAIC,MAAM,GAAG3B,IAAI,CAACE,OAAO,CAACwB,CAAD,CAAR,CAAjB;AACA,UAAIE,QAAQ,GAAG,KAAf;AACAV,gBAAU,CAACW,GAAX,CAAeF,MAAM,CAACG,SAAP,CAAiB;AAC5BC,YAAI,EAAE,UAAUC,KAAV,EAAiB;AACnB,cAAI,CAACJ,QAAL,EAAe;AACXA,oBAAQ,GAAG,IAAX;AACAJ,mBAAO;AACV;;AACDH,gBAAM,CAACK,CAAD,CAAN,GAAYM,KAAZ;AACH,SAP2B;AAQ5BC,aAAK,EAAE,UAAUC,GAAV,EAAe;AAAE,iBAAOhB,UAAU,CAACe,KAAX,CAAiBC,GAAjB,CAAP;AAA+B,SAR3B;AAS5Bd,gBAAQ,EAAE,YAAY;AAClBG,mBAAS;;AACT,cAAIA,SAAS,KAAKJ,GAAd,IAAqB,CAACS,QAA1B,EAAoC;AAChC,gBAAIJ,OAAO,KAAKL,GAAhB,EAAqB;AACjBD,wBAAU,CAACa,IAAX,CAAgBpB,IAAI,GAChBA,IAAI,CAACwB,MAAL,CAAY,UAAUC,MAAV,EAAkBxB,GAAlB,EAAuBc,CAAvB,EAA0B;AAAE,uBAAQU,MAAM,CAACxB,GAAD,CAAN,GAAcS,MAAM,CAACK,CAAD,CAApB,EAAyBU,MAAjC;AAA2C,eAAnF,EAAqF,EAArF,CADgB,GAEhBf,MAFJ;AAGH;;AACDH,sBAAU,CAACE,QAAX;AACH;AACJ;AAnB2B,OAAjB,CAAf;AAqBH,KAxBD;;AAyBA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,GAApB,EAAyBO,CAAC,EAA1B,EAA8B;AAC1BD,aAAO,CAACC,CAAD,CAAP;AACH;AACJ,GArCM,CAAP;AAsCH","names":["Observable","isArray","map","isObject","from","forkJoin","sources","_i","arguments","length","first_1","forkJoinInternal","Object","getPrototypeOf","prototype","keys","key","resultSelector_1","pop","pipe","args","apply","subscriber","len","complete","values","Array","completed","emitted","_loop_1","i","source","hasValue","add","subscribe","next","value","error","err","reduce","result"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/observable/forkJoin.js"],"sourcesContent":["/** PURE_IMPORTS_START _Observable,_util_isArray,_operators_map,_util_isObject,_from PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { map } from '../operators/map';\nimport { isObject } from '../util/isObject';\nimport { from } from './from';\nexport function forkJoin() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    if (sources.length === 1) {\n        var first_1 = sources[0];\n        if (isArray(first_1)) {\n            return forkJoinInternal(first_1, null);\n        }\n        if (isObject(first_1) && Object.getPrototypeOf(first_1) === Object.prototype) {\n            var keys = Object.keys(first_1);\n            return forkJoinInternal(keys.map(function (key) { return first_1[key]; }), keys);\n        }\n    }\n    if (typeof sources[sources.length - 1] === 'function') {\n        var resultSelector_1 = sources.pop();\n        sources = (sources.length === 1 && isArray(sources[0])) ? sources[0] : sources;\n        return forkJoinInternal(sources, null).pipe(map(function (args) { return resultSelector_1.apply(void 0, args); }));\n    }\n    return forkJoinInternal(sources, null);\n}\nfunction forkJoinInternal(sources, keys) {\n    return new Observable(function (subscriber) {\n        var len = sources.length;\n        if (len === 0) {\n            subscriber.complete();\n            return;\n        }\n        var values = new Array(len);\n        var completed = 0;\n        var emitted = 0;\n        var _loop_1 = function (i) {\n            var source = from(sources[i]);\n            var hasValue = false;\n            subscriber.add(source.subscribe({\n                next: function (value) {\n                    if (!hasValue) {\n                        hasValue = true;\n                        emitted++;\n                    }\n                    values[i] = value;\n                },\n                error: function (err) { return subscriber.error(err); },\n                complete: function () {\n                    completed++;\n                    if (completed === len || !hasValue) {\n                        if (emitted === len) {\n                            subscriber.next(keys ?\n                                keys.reduce(function (result, key, i) { return (result[key] = values[i], result); }, {}) :\n                                values);\n                        }\n                        subscriber.complete();\n                    }\n                }\n            }));\n        };\n        for (var i = 0; i < len; i++) {\n            _loop_1(i);\n        }\n    });\n}\n//# sourceMappingURL=forkJoin.js.map\n"]},"metadata":{},"sourceType":"module"}