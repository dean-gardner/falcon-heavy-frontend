{"ast":null,"code":"import * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\n\nexport function useEventListener(event, handler, doc, options) {\n  if (doc === void 0) {\n    doc = isBrowser ? document : null;\n  }\n\n  var savedHandler = useLatestRef(handler);\n  React.useEffect(() => {\n    if (!doc) return undefined;\n\n    var listener = event => {\n      savedHandler.current == null ? void 0 : savedHandler.current(event);\n    };\n\n    doc.addEventListener(event, listener, options);\n    return () => {\n      doc.removeEventListener(event, listener, options);\n    };\n  }, [event, doc, options, savedHandler]);\n  return () => {\n    if (savedHandler.current) {\n      var _doc;\n\n      (_doc = doc) == null ? void 0 : _doc.removeEventListener(event, savedHandler.current, options);\n    }\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,SAASC,YAAT,QAA6B,kBAA7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,gBAAT,CAA0BC,KAA1B,EAAiCC,OAAjC,EAA0CC,GAA1C,EAA+CC,OAA/C,EAAwD;AAC7D,MAAID,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBA,OAAG,GAAGL,SAAS,GAAGO,QAAH,GAAc,IAA7B;AACD;;AAED,MAAIC,YAAY,GAAGP,YAAY,CAACG,OAAD,CAA/B;AACAL,OAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACJ,GAAL,EAAU,OAAOK,SAAP;;AAEV,QAAIC,QAAQ,GAAGR,KAAK,IAAI;AACtBK,kBAAY,CAACI,OAAb,IAAwB,IAAxB,GAA+B,KAAK,CAApC,GAAwCJ,YAAY,CAACI,OAAb,CAAqBT,KAArB,CAAxC;AACD,KAFD;;AAIAE,OAAG,CAACQ,gBAAJ,CAAqBV,KAArB,EAA4BQ,QAA5B,EAAsCL,OAAtC;AACA,WAAO,MAAM;AACXD,SAAG,CAACS,mBAAJ,CAAwBX,KAAxB,EAA+BQ,QAA/B,EAAyCL,OAAzC;AACD,KAFD;AAGD,GAXD,EAWG,CAACH,KAAD,EAAQE,GAAR,EAAaC,OAAb,EAAsBE,YAAtB,CAXH;AAYA,SAAO,MAAM;AACX,QAAIA,YAAY,CAACI,OAAjB,EAA0B;AACxB,UAAIG,IAAJ;;AAEA,OAACA,IAAI,GAAGV,GAAR,KAAgB,IAAhB,GAAuB,KAAK,CAA5B,GAAgCU,IAAI,CAACD,mBAAL,CAAyBX,KAAzB,EAAgCK,YAAY,CAACI,OAA7C,EAAsDN,OAAtD,CAAhC;AACD;AACF,GAND;AAOD","names":["React","isBrowser","useLatestRef","useEventListener","event","handler","doc","options","document","savedHandler","useEffect","undefined","listener","current","addEventListener","removeEventListener","_doc"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-event-listener.js"],"sourcesContent":["import * as React from \"react\";\nimport { isBrowser } from \"@chakra-ui/utils\";\nimport { useLatestRef } from \"./use-latest-ref\";\n/**\n * React hook to manage browser event listeners\n *\n * @param event the event name\n * @param handler the event handler function to execute\n * @param doc the dom environment to execute against (defaults to `document`)\n * @param options the event listener options\n */\n\nexport function useEventListener(event, handler, doc, options) {\n  if (doc === void 0) {\n    doc = isBrowser ? document : null;\n  }\n\n  var savedHandler = useLatestRef(handler);\n  React.useEffect(() => {\n    if (!doc) return undefined;\n\n    var listener = event => {\n      savedHandler.current == null ? void 0 : savedHandler.current(event);\n    };\n\n    doc.addEventListener(event, listener, options);\n    return () => {\n      doc.removeEventListener(event, listener, options);\n    };\n  }, [event, doc, options, savedHandler]);\n  return () => {\n    if (savedHandler.current) {\n      var _doc;\n\n      (_doc = doc) == null ? void 0 : _doc.removeEventListener(event, savedHandler.current, options);\n    }\n  };\n}\n//# sourceMappingURL=use-event-listener.js.map"]},"metadata":{},"sourceType":"module"}