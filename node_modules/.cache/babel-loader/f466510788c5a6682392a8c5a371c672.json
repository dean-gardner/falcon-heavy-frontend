{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BeaconMessageType, PermissionScope } from '..';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\nexport class PermissionValidator {\n  /**\n   * Check if permissions were given for a certain message type.\n   *\n   * PermissionRequest and BroadcastRequest will always return true.\n   *\n   * @param message Beacon Message\n   */\n  static hasPermission(message, getOne, getAll) {\n    return __awaiter(this, void 0, void 0, function* () {\n      switch (message.type) {\n        case BeaconMessageType.PermissionRequest:\n        case BeaconMessageType.BroadcastRequest:\n          {\n            return true;\n          }\n\n        case BeaconMessageType.OperationRequest:\n          {\n            const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n            const permission = yield getOne(accountIdentifier);\n\n            if (!permission) {\n              return false;\n            }\n\n            return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n          }\n\n        case BeaconMessageType.SignPayloadRequest:\n          {\n            const permissions = yield getAll();\n            const filteredPermissions = permissions.filter(permission => permission.address === message.sourceAddress);\n\n            if (filteredPermissions.length === 0) {\n              return false;\n            }\n\n            return filteredPermissions.some(permission => permission.scopes.includes(PermissionScope.SIGN));\n          }\n\n        default:\n          throw new Error('Message not handled');\n      }\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BeaconMessageType","PermissionScope","getAccountIdentifier","PermissionValidator","hasPermission","message","getOne","getAll","type","PermissionRequest","BroadcastRequest","OperationRequest","accountIdentifier","sourceAddress","network","permission","scopes","includes","OPERATION_REQUEST","SignPayloadRequest","permissions","filteredPermissions","filter","address","length","some","SIGN","Error"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/managers/PermissionValidator.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BeaconMessageType, PermissionScope } from '..';\nimport { getAccountIdentifier } from '../utils/get-account-identifier';\nexport class PermissionValidator {\n    /**\n     * Check if permissions were given for a certain message type.\n     *\n     * PermissionRequest and BroadcastRequest will always return true.\n     *\n     * @param message Beacon Message\n     */\n    static hasPermission(message, getOne, getAll) {\n        return __awaiter(this, void 0, void 0, function* () {\n            switch (message.type) {\n                case BeaconMessageType.PermissionRequest:\n                case BeaconMessageType.BroadcastRequest: {\n                    return true;\n                }\n                case BeaconMessageType.OperationRequest: {\n                    const accountIdentifier = yield getAccountIdentifier(message.sourceAddress, message.network);\n                    const permission = yield getOne(accountIdentifier);\n                    if (!permission) {\n                        return false;\n                    }\n                    return permission.scopes.includes(PermissionScope.OPERATION_REQUEST);\n                }\n                case BeaconMessageType.SignPayloadRequest: {\n                    const permissions = yield getAll();\n                    const filteredPermissions = permissions.filter((permission) => permission.address === message.sourceAddress);\n                    if (filteredPermissions.length === 0) {\n                        return false;\n                    }\n                    return filteredPermissions.some((permission) => permission.scopes.includes(PermissionScope.SIGN));\n                }\n                default:\n                    throw new Error('Message not handled');\n            }\n        });\n    }\n}\n//# sourceMappingURL=PermissionValidator.js.map"]},"metadata":{},"sourceType":"module"}