{"ast":null,"code":"import { isArray, isObject } from \"./assertion\";\nimport { objectKeys } from \"./object\";\nimport { getLastItem } from \"./array\";\nexport var breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"]);\nexport function mapResponsive(prop, mapper) {\n  if (isArray(prop)) {\n    return prop.map(item => {\n      if (item === null) {\n        return null;\n      }\n\n      return mapper(item);\n    });\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n\n  if (prop != null) {\n    return mapper(prop);\n  }\n\n  return null;\n}\nexport function objectToArrayNotation(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = bps.map(br => {\n    var _obj$br;\n\n    return (_obj$br = obj[br]) != null ? _obj$br : null;\n  });\n\n  while (getLastItem(result) === null) {\n    result.pop();\n  }\n\n  return result;\n}\nexport function arrayToObjectNotation(values, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = {};\n  values.forEach((value, index) => {\n    var key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\nexport function isResponsiveObjectLike(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(key => bps.includes(key));\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,EAAkBC,QAAlB,QAAkC,aAAlC;AACA,SAASC,UAAT,QAA2B,UAA3B;AACA,SAASC,WAAT,QAA4B,SAA5B;AACA,OAAO,IAAIC,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAc,CAAC,MAAD,EAAS,IAAT,EAAe,IAAf,EAAqB,IAArB,EAA2B,IAA3B,CAAd,CAAlB;AACP,OAAO,SAASC,aAAT,CAAuBC,IAAvB,EAA6BC,MAA7B,EAAqC;AAC1C,MAAIT,OAAO,CAACQ,IAAD,CAAX,EAAmB;AACjB,WAAOA,IAAI,CAACE,GAAL,CAASC,IAAI,IAAI;AACtB,UAAIA,IAAI,KAAK,IAAb,EAAmB;AACjB,eAAO,IAAP;AACD;;AAED,aAAOF,MAAM,CAACE,IAAD,CAAb;AACD,KANM,CAAP;AAOD;;AAED,MAAIV,QAAQ,CAACO,IAAD,CAAZ,EAAoB;AAClB,WAAON,UAAU,CAACM,IAAD,CAAV,CAAiBI,MAAjB,CAAwB,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC9CD,YAAM,CAACC,GAAD,CAAN,GAAcL,MAAM,CAACD,IAAI,CAACM,GAAD,CAAL,CAApB;AACA,aAAOD,MAAP;AACD,KAHM,EAGJ,EAHI,CAAP;AAID;;AAED,MAAIL,IAAI,IAAI,IAAZ,EAAkB;AAChB,WAAOC,MAAM,CAACD,IAAD,CAAb;AACD;;AAED,SAAO,IAAP;AACD;AACD,OAAO,SAASO,qBAAT,CAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AAC9C,MAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBA,OAAG,GAAGb,WAAN;AACD;;AAED,MAAIS,MAAM,GAAGI,GAAG,CAACP,GAAJ,CAAQQ,EAAE,IAAI;AACzB,QAAIC,OAAJ;;AAEA,WAAO,CAACA,OAAO,GAAGH,GAAG,CAACE,EAAD,CAAd,KAAuB,IAAvB,GAA8BC,OAA9B,GAAwC,IAA/C;AACD,GAJY,CAAb;;AAMA,SAAOhB,WAAW,CAACU,MAAD,CAAX,KAAwB,IAA/B,EAAqC;AACnCA,UAAM,CAACO,GAAP;AACD;;AAED,SAAOP,MAAP;AACD;AACD,OAAO,SAASQ,qBAAT,CAA+BC,MAA/B,EAAuCL,GAAvC,EAA4C;AACjD,MAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBA,OAAG,GAAGb,WAAN;AACD;;AAED,MAAIS,MAAM,GAAG,EAAb;AACAS,QAAM,CAACC,OAAP,CAAe,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC/B,QAAIX,GAAG,GAAGG,GAAG,CAACQ,KAAD,CAAb;AACA,QAAID,KAAK,IAAI,IAAb,EAAmB;AACnBX,UAAM,CAACC,GAAD,CAAN,GAAcU,KAAd;AACD,GAJD;AAKA,SAAOX,MAAP;AACD;AACD,OAAO,SAASa,sBAAT,CAAgCV,GAAhC,EAAqCC,GAArC,EAA0C;AAC/C,MAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB;AAClBA,OAAG,GAAGb,WAAN;AACD;;AAED,MAAIuB,IAAI,GAAGtB,MAAM,CAACsB,IAAP,CAAYX,GAAZ,CAAX;AACA,SAAOW,IAAI,CAACC,MAAL,GAAc,CAAd,IAAmBD,IAAI,CAACE,KAAL,CAAWf,GAAG,IAAIG,GAAG,CAACa,QAAJ,CAAahB,GAAb,CAAlB,CAA1B;AACD","names":["isArray","isObject","objectKeys","getLastItem","breakpoints","Object","freeze","mapResponsive","prop","mapper","map","item","reduce","result","key","objectToArrayNotation","obj","bps","br","_obj$br","pop","arrayToObjectNotation","values","forEach","value","index","isResponsiveObjectLike","keys","length","every","includes"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/utils/dist/esm/responsive.js"],"sourcesContent":["import { isArray, isObject } from \"./assertion\";\nimport { objectKeys } from \"./object\";\nimport { getLastItem } from \"./array\";\nexport var breakpoints = Object.freeze([\"base\", \"sm\", \"md\", \"lg\", \"xl\"]);\nexport function mapResponsive(prop, mapper) {\n  if (isArray(prop)) {\n    return prop.map(item => {\n      if (item === null) {\n        return null;\n      }\n\n      return mapper(item);\n    });\n  }\n\n  if (isObject(prop)) {\n    return objectKeys(prop).reduce((result, key) => {\n      result[key] = mapper(prop[key]);\n      return result;\n    }, {});\n  }\n\n  if (prop != null) {\n    return mapper(prop);\n  }\n\n  return null;\n}\nexport function objectToArrayNotation(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = bps.map(br => {\n    var _obj$br;\n\n    return (_obj$br = obj[br]) != null ? _obj$br : null;\n  });\n\n  while (getLastItem(result) === null) {\n    result.pop();\n  }\n\n  return result;\n}\nexport function arrayToObjectNotation(values, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var result = {};\n  values.forEach((value, index) => {\n    var key = bps[index];\n    if (value == null) return;\n    result[key] = value;\n  });\n  return result;\n}\nexport function isResponsiveObjectLike(obj, bps) {\n  if (bps === void 0) {\n    bps = breakpoints;\n  }\n\n  var keys = Object.keys(obj);\n  return keys.length > 0 && keys.every(key => bps.includes(key));\n}\n//# sourceMappingURL=responsive.js.map"]},"metadata":{},"sourceType":"module"}