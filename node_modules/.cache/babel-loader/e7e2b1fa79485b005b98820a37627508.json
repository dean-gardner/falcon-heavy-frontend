{"ast":null,"code":"import { useState, useEffect } from 'react';\nimport { useIsomorphicLayoutEffect } from '@reach/utils';\n/*\r\n * Welcome to @reach/auto-id!\r\n\n * Let's see if we can make sense of why this hook exists and its\r\n * implementation.\r\n *\r\n * Some background:\r\n *   1. Accessibiliy APIs rely heavily on element IDs\r\n *   2. Requiring developers to put IDs on every element in Reach UI is both\r\n *      cumbersome and error-prone\r\n *   3. With a component model, we can generate IDs for them!\r\n *\r\n * Solution 1: Generate random IDs.\r\n *\r\n * This works great as long as you don't server render your app. When React (in\r\n * the client) tries to reuse the markup from the server, the IDs won't match\r\n * and React will then recreate the entire DOM tree.\r\n *\r\n * Solution 2: Increment an integer\r\n *\r\n * This sounds great. Since we're rendering the exact same tree on the server\r\n * and client, we can increment a counter and get a deterministic result between\r\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\r\n * pretty sure the tab will be closed before an app never needs\r\n * 10 quadrillion IDs!\r\n *\r\n * Problem solved, right?\r\n *\r\n * Ah, but there's a catch! React's concurrent rendering makes this approach\r\n * non-deterministic. While the client and server will end up with the same\r\n * elements in the end, depending on suspense boundaries (and possibly some user\r\n * input during the initial render) the incrementing integers won't always match\r\n * up.\r\n *\r\n * Solution 3: Don't use IDs at all on the server; patch after first render.\r\n *\r\n * What we've done here is solution 2 with some tricks. With this approach, the\r\n * ID returned is an empty string on the first render. This way the server and\r\n * client have the same markup no matter how wild the concurrent rendering may\r\n * have gotten.\r\n *\r\n * After the render, we patch up the components with an incremented ID. This\r\n * causes a double render on any components with `useId`. Shouldn't be a problem\r\n * since the components using this hook should be small, and we're only updating\r\n * the ID attribute on the DOM, nothing big is happening.\r\n *\r\n * It doesn't have to be an incremented number, though--we could do generate\r\n * random strings instead, but incrementing a number is probably the cheapest\r\n * thing we can do.\r\n *\r\n * Additionally, we only do this patchup on the very first client render ever.\r\n * Any calls to `useId` that happen dynamically in the client will be\r\n * populated immediately with a value. So, we only get the double render after\r\n * server hydration and never again, SO BACK OFF ALRIGHT?\r\n */\n\nvar serverHandoffComplete = false;\nvar id = 0;\n\nvar genId = function genId() {\n  return ++id;\n};\n/**\r\n * useId\r\n *\r\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\r\n *\r\n * Note: The returned ID will initially be `null` and will update after a\r\n * component mounts. Users may need to supply their own ID if they need\r\n * consistent values for SSR.\r\n *\r\n * @see Docs https://reach.tech/auto-id\r\n */\n\n\nvar useId = function useId(idFromProps) {\n  /*\r\n   * If this instance isn't part of the initial render, we don't have to do the\r\n   * double render/patch-up dance. We can just generate the ID and return it.\r\n   */\n  var initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  var _useState = useState(initialId),\n      id = _useState[0],\n      setId = _useState[1];\n\n  useIsomorphicLayoutEffect(function () {\n    if (id === null) {\n      /*\r\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\r\n       * rendering flicker, though it'll make the first render slower (unlikely\r\n       * to matter, but you're welcome to measure your app and let us know if\r\n       * it's a problem).\r\n       */\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (serverHandoffComplete === false) {\n      /*\r\n       * Flag all future uses of `useId` to skip the update dance. This is in\r\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\r\n       * accidentally bail out of the patch-up dance prematurely.\r\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n};\n\nexport { useId };","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,yBAAT,QAA0C,cAA1C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,qBAAqB,GAAG,KAA5B;AACA,IAAIC,EAAE,GAAG,CAAT;;AAEA,IAAIC,KAAK,GAAG,SAASA,KAAT,GAAiB;AAC3B,SAAO,EAAED,EAAT;AACD,CAFD;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,KAAK,GAAG,SAASA,KAAT,CAAeC,WAAf,EAA4B;AACtC;AACF;AACA;AACA;AACE,MAAIC,SAAS,GAAGD,WAAW,KAAKJ,qBAAqB,GAAGE,KAAK,EAAR,GAAa,IAAvC,CAA3B;;AAEA,MAAII,SAAS,GAAGT,QAAQ,CAACQ,SAAD,CAAxB;AAAA,MACIJ,EAAE,GAAGK,SAAS,CAAC,CAAD,CADlB;AAAA,MAEIC,KAAK,GAAGD,SAAS,CAAC,CAAD,CAFrB;;AAIAP,2BAAyB,CAAC,YAAY;AACpC,QAAIE,EAAE,KAAK,IAAX,EAAiB;AACf;AACN;AACA;AACA;AACA;AACA;AACMM,WAAK,CAACL,KAAK,EAAN,CAAL;AACD,KATmC,CASlC;;AAEH,GAXwB,EAWtB,EAXsB,CAAzB;AAYAJ,WAAS,CAAC,YAAY;AACpB,QAAIE,qBAAqB,KAAK,KAA9B,EAAqC;AACnC;AACN;AACA;AACA;AACA;AACMA,2BAAqB,GAAG,IAAxB;AACD;AACF,GATQ,EASN,EATM,CAAT;AAUA,SAAOC,EAAE,IAAI,IAAN,GAAaO,MAAM,CAACP,EAAD,CAAnB,GAA0BQ,SAAjC;AACD,CAlCD;;AAoCA,SAASN,KAAT","names":["useState","useEffect","useIsomorphicLayoutEffect","serverHandoffComplete","id","genId","useId","idFromProps","initialId","_useState","setId","String","undefined"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/node_modules/@reach/auto-id/dist/auto-id.esm.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { useIsomorphicLayoutEffect } from '@reach/utils';\n\n/*\r\n * Welcome to @reach/auto-id!\r\n\n * Let's see if we can make sense of why this hook exists and its\r\n * implementation.\r\n *\r\n * Some background:\r\n *   1. Accessibiliy APIs rely heavily on element IDs\r\n *   2. Requiring developers to put IDs on every element in Reach UI is both\r\n *      cumbersome and error-prone\r\n *   3. With a component model, we can generate IDs for them!\r\n *\r\n * Solution 1: Generate random IDs.\r\n *\r\n * This works great as long as you don't server render your app. When React (in\r\n * the client) tries to reuse the markup from the server, the IDs won't match\r\n * and React will then recreate the entire DOM tree.\r\n *\r\n * Solution 2: Increment an integer\r\n *\r\n * This sounds great. Since we're rendering the exact same tree on the server\r\n * and client, we can increment a counter and get a deterministic result between\r\n * client and server. Also, JS integers can go up to nine-quadrillion. I'm\r\n * pretty sure the tab will be closed before an app never needs\r\n * 10 quadrillion IDs!\r\n *\r\n * Problem solved, right?\r\n *\r\n * Ah, but there's a catch! React's concurrent rendering makes this approach\r\n * non-deterministic. While the client and server will end up with the same\r\n * elements in the end, depending on suspense boundaries (and possibly some user\r\n * input during the initial render) the incrementing integers won't always match\r\n * up.\r\n *\r\n * Solution 3: Don't use IDs at all on the server; patch after first render.\r\n *\r\n * What we've done here is solution 2 with some tricks. With this approach, the\r\n * ID returned is an empty string on the first render. This way the server and\r\n * client have the same markup no matter how wild the concurrent rendering may\r\n * have gotten.\r\n *\r\n * After the render, we patch up the components with an incremented ID. This\r\n * causes a double render on any components with `useId`. Shouldn't be a problem\r\n * since the components using this hook should be small, and we're only updating\r\n * the ID attribute on the DOM, nothing big is happening.\r\n *\r\n * It doesn't have to be an incremented number, though--we could do generate\r\n * random strings instead, but incrementing a number is probably the cheapest\r\n * thing we can do.\r\n *\r\n * Additionally, we only do this patchup on the very first client render ever.\r\n * Any calls to `useId` that happen dynamically in the client will be\r\n * populated immediately with a value. So, we only get the double render after\r\n * server hydration and never again, SO BACK OFF ALRIGHT?\r\n */\nvar serverHandoffComplete = false;\nvar id = 0;\n\nvar genId = function genId() {\n  return ++id;\n};\n/**\r\n * useId\r\n *\r\n * Autogenerate IDs to facilitate WAI-ARIA and server rendering.\r\n *\r\n * Note: The returned ID will initially be `null` and will update after a\r\n * component mounts. Users may need to supply their own ID if they need\r\n * consistent values for SSR.\r\n *\r\n * @see Docs https://reach.tech/auto-id\r\n */\n\n\nvar useId = function useId(idFromProps) {\n  /*\r\n   * If this instance isn't part of the initial render, we don't have to do the\r\n   * double render/patch-up dance. We can just generate the ID and return it.\r\n   */\n  var initialId = idFromProps || (serverHandoffComplete ? genId() : null);\n\n  var _useState = useState(initialId),\n      id = _useState[0],\n      setId = _useState[1];\n\n  useIsomorphicLayoutEffect(function () {\n    if (id === null) {\n      /*\r\n       * Patch the ID after render. We do this in `useLayoutEffect` to avoid any\r\n       * rendering flicker, though it'll make the first render slower (unlikely\r\n       * to matter, but you're welcome to measure your app and let us know if\r\n       * it's a problem).\r\n       */\n      setId(genId());\n    } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n  }, []);\n  useEffect(function () {\n    if (serverHandoffComplete === false) {\n      /*\r\n       * Flag all future uses of `useId` to skip the update dance. This is in\r\n       * `useEffect` because it goes after `useLayoutEffect`, ensuring we don't\r\n       * accidentally bail out of the patch-up dance prematurely.\r\n       */\n      serverHandoffComplete = true;\n    }\n  }, []);\n  return id != null ? String(id) : undefined;\n};\n\nexport { useId };\n//# sourceMappingURL=auto-id.esm.js.map\n"]},"metadata":{},"sourceType":"module"}