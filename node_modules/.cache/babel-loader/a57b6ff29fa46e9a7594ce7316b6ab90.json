{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { useEffect } from \"react\";\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\n\nclass ModalManager {\n  constructor() {\n    _defineProperty(this, \"modals\", void 0);\n\n    this.modals = [];\n  }\n\n  add(modal) {\n    this.modals.push(modal);\n  }\n\n  remove(modal) {\n    this.modals = this.modals.filter(_modal => _modal !== modal);\n  }\n\n  isTopModal(modal) {\n    var topmostModal = this.modals[this.modals.length - 1];\n    return topmostModal === modal;\n  }\n\n}\n\nexport var manager = new ModalManager();\nexport function useModalManager(ref, isOpen) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref);\n    }\n\n    return () => {\n      manager.remove(ref);\n    };\n  }, [isOpen, ref]);\n}","map":{"version":3,"mappings":"AAAA,SAASA,eAAT,CAAyBC,GAAzB,EAA8BC,GAA9B,EAAmCC,KAAnC,EAA0C;AAAE,MAAID,GAAG,IAAID,GAAX,EAAgB;AAAEG,UAAM,CAACC,cAAP,CAAsBJ,GAAtB,EAA2BC,GAA3B,EAAgC;AAAEC,WAAK,EAAEA,KAAT;AAAgBG,gBAAU,EAAE,IAA5B;AAAkCC,kBAAY,EAAE,IAAhD;AAAsDC,cAAQ,EAAE;AAAhE,KAAhC;AAA0G,GAA5H,MAAkI;AAAEP,OAAG,CAACC,GAAD,CAAH,GAAWC,KAAX;AAAmB;;AAAC,SAAOF,GAAP;AAAa;;AAEjN,SAASQ,SAAT,QAA0B,OAA1B;AACA;AACA;AACA;AACA;;AAEA,MAAMC,YAAN,CAAmB;AACjBC,aAAW,GAAG;AACZX,mBAAe,CAAC,IAAD,EAAO,QAAP,EAAiB,KAAK,CAAtB,CAAf;;AAEA,SAAKY,MAAL,GAAc,EAAd;AACD;;AAEDC,KAAG,CAACC,KAAD,EAAQ;AACT,SAAKF,MAAL,CAAYG,IAAZ,CAAiBD,KAAjB;AACD;;AAEDE,QAAM,CAACF,KAAD,EAAQ;AACZ,SAAKF,MAAL,GAAc,KAAKA,MAAL,CAAYK,MAAZ,CAAmBC,MAAM,IAAIA,MAAM,KAAKJ,KAAxC,CAAd;AACD;;AAEDK,YAAU,CAACL,KAAD,EAAQ;AAChB,QAAIM,YAAY,GAAG,KAAKR,MAAL,CAAY,KAAKA,MAAL,CAAYS,MAAZ,GAAqB,CAAjC,CAAnB;AACA,WAAOD,YAAY,KAAKN,KAAxB;AACD;;AAlBgB;;AAsBnB,OAAO,IAAIQ,OAAO,GAAG,IAAIZ,YAAJ,EAAd;AACP,OAAO,SAASa,eAAT,CAAyBC,GAAzB,EAA8BC,MAA9B,EAAsC;AAC3ChB,WAAS,CAAC,MAAM;AACd,QAAIgB,MAAJ,EAAY;AACVH,aAAO,CAACT,GAAR,CAAYW,GAAZ;AACD;;AAED,WAAO,MAAM;AACXF,aAAO,CAACN,MAAR,CAAeQ,GAAf;AACD,KAFD;AAGD,GARQ,EAQN,CAACC,MAAD,EAASD,GAAT,CARM,CAAT;AASD","names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","useEffect","ModalManager","constructor","modals","add","modal","push","remove","filter","_modal","isTopModal","topmostModal","length","manager","useModalManager","ref","isOpen"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/modal/dist/esm/modal-manager.js"],"sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect } from \"react\";\n/**\n * Proper state management for nested modals.\n * Simplified, but inspired by material-ui's ModalManager class.\n */\n\nclass ModalManager {\n  constructor() {\n    _defineProperty(this, \"modals\", void 0);\n\n    this.modals = [];\n  }\n\n  add(modal) {\n    this.modals.push(modal);\n  }\n\n  remove(modal) {\n    this.modals = this.modals.filter(_modal => _modal !== modal);\n  }\n\n  isTopModal(modal) {\n    var topmostModal = this.modals[this.modals.length - 1];\n    return topmostModal === modal;\n  }\n\n}\n\nexport var manager = new ModalManager();\nexport function useModalManager(ref, isOpen) {\n  useEffect(() => {\n    if (isOpen) {\n      manager.add(ref);\n    }\n\n    return () => {\n      manager.remove(ref);\n    };\n  }, [isOpen, ref]);\n}\n//# sourceMappingURL=modal-manager.js.map"]},"metadata":{},"sourceType":"module"}