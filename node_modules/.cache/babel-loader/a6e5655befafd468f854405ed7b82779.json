{"ast":null,"code":"import { isCreateEvent, isJoinEvent, isMessageEvent } from '../utils/events';\nimport { MatrixMessage } from './MatrixMessage';\nexport var MatrixRoomStatus;\n\n(function (MatrixRoomStatus) {\n  MatrixRoomStatus[MatrixRoomStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  MatrixRoomStatus[MatrixRoomStatus[\"JOINED\"] = 1] = \"JOINED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"INVITED\"] = 2] = \"INVITED\";\n  MatrixRoomStatus[MatrixRoomStatus[\"LEFT\"] = 3] = \"LEFT\";\n})(MatrixRoomStatus || (MatrixRoomStatus = {}));\n\nexport class MatrixRoom {\n  constructor(id) {\n    let status = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : MatrixRoomStatus.UNKNOWN;\n    let members = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];\n    let messages = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    this.id = id;\n    this.status = status;\n    this.members = members;\n    this.messages = messages;\n  }\n\n  static fromSync(roomSync) {\n    function create(rooms, creator) {\n      return Object.entries(rooms).map(_ref => {\n        let [id, room] = _ref;\n        return creator(id, room);\n      });\n    }\n\n    return [...create(roomSync.join, MatrixRoom.fromJoined), ...create(roomSync.invite, MatrixRoom.fromInvited), ...create(roomSync.leave, MatrixRoom.fromLeft)];\n  }\n\n  static from(roomOrId, status) {\n    return roomOrId instanceof MatrixRoom ? status ? new MatrixRoom(roomOrId.id, status, roomOrId.members, roomOrId.messages) : roomOrId : new MatrixRoom(roomOrId, status || MatrixRoomStatus.UNKNOWN);\n  }\n\n  static merge(newState, previousState) {\n    if (!previousState || previousState.id !== newState.id) {\n      return MatrixRoom.from(newState);\n    }\n\n    return new MatrixRoom(newState.id, newState.status, [...previousState.members, ...newState.members].filter((member, index, array) => array.indexOf(member) === index), [...previousState.messages, ...newState.messages]);\n  }\n\n  static fromJoined(id, joined) {\n    const events = [...joined.state.events, ...joined.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.JOINED, members, messages);\n  }\n\n  static fromInvited(id, invited) {\n    const members = MatrixRoom.getMembersFromEvents(invited.invite_state.events);\n    return new MatrixRoom(id, MatrixRoomStatus.INVITED, members);\n  }\n\n  static fromLeft(id, left) {\n    const events = [...left.state.events, ...left.timeline.events];\n    const members = MatrixRoom.getMembersFromEvents(events);\n    const messages = MatrixRoom.getMessagesFromEvents(events);\n    return new MatrixRoom(id, MatrixRoomStatus.LEFT, members, messages);\n  }\n\n  static getMembersFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(event => isCreateEvent(event) || isJoinEvent(event))).map(event => event.sender).filter((member, index, array) => array.indexOf(member) === index);\n  }\n\n  static getMessagesFromEvents(events) {\n    return MatrixRoom.getUniqueEvents(events.filter(isMessageEvent)).map(event => MatrixMessage.from(event)).filter(message => !!message);\n  }\n\n  static getUniqueEvents(events) {\n    const eventIds = {};\n    const uniqueEvents = [];\n    events.forEach((event, index) => {\n      const eventId = event.event_id;\n\n      if (eventId === undefined || !(eventId in eventIds)) {\n        if (eventId !== undefined) {\n          eventIds[eventId] = index;\n        }\n\n        uniqueEvents.push(event);\n      }\n    });\n    return uniqueEvents;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["isCreateEvent","isJoinEvent","isMessageEvent","MatrixMessage","MatrixRoomStatus","MatrixRoom","constructor","id","status","UNKNOWN","members","messages","fromSync","roomSync","create","rooms","creator","Object","entries","map","room","join","fromJoined","invite","fromInvited","leave","fromLeft","from","roomOrId","merge","newState","previousState","filter","member","index","array","indexOf","joined","events","state","timeline","getMembersFromEvents","getMessagesFromEvents","JOINED","invited","invite_state","INVITED","left","LEFT","getUniqueEvents","event","sender","message","eventIds","uniqueEvents","forEach","eventId","event_id","undefined","push"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/matrix-client/models/MatrixRoom.js"],"sourcesContent":["import { isCreateEvent, isJoinEvent, isMessageEvent } from '../utils/events';\nimport { MatrixMessage } from './MatrixMessage';\nexport var MatrixRoomStatus;\n(function (MatrixRoomStatus) {\n    MatrixRoomStatus[MatrixRoomStatus[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    MatrixRoomStatus[MatrixRoomStatus[\"JOINED\"] = 1] = \"JOINED\";\n    MatrixRoomStatus[MatrixRoomStatus[\"INVITED\"] = 2] = \"INVITED\";\n    MatrixRoomStatus[MatrixRoomStatus[\"LEFT\"] = 3] = \"LEFT\";\n})(MatrixRoomStatus || (MatrixRoomStatus = {}));\nexport class MatrixRoom {\n    constructor(id, status = MatrixRoomStatus.UNKNOWN, members = [], messages = []) {\n        this.id = id;\n        this.status = status;\n        this.members = members;\n        this.messages = messages;\n    }\n    static fromSync(roomSync) {\n        function create(rooms, creator) {\n            return Object.entries(rooms).map(([id, room]) => creator(id, room));\n        }\n        return [\n            ...create(roomSync.join, MatrixRoom.fromJoined),\n            ...create(roomSync.invite, MatrixRoom.fromInvited),\n            ...create(roomSync.leave, MatrixRoom.fromLeft)\n        ];\n    }\n    static from(roomOrId, status) {\n        return roomOrId instanceof MatrixRoom\n            ? status\n                ? new MatrixRoom(roomOrId.id, status, roomOrId.members, roomOrId.messages)\n                : roomOrId\n            : new MatrixRoom(roomOrId, status || MatrixRoomStatus.UNKNOWN);\n    }\n    static merge(newState, previousState) {\n        if (!previousState || previousState.id !== newState.id) {\n            return MatrixRoom.from(newState);\n        }\n        return new MatrixRoom(newState.id, newState.status, [...previousState.members, ...newState.members].filter((member, index, array) => array.indexOf(member) === index), [...previousState.messages, ...newState.messages]);\n    }\n    static fromJoined(id, joined) {\n        const events = [...joined.state.events, ...joined.timeline.events];\n        const members = MatrixRoom.getMembersFromEvents(events);\n        const messages = MatrixRoom.getMessagesFromEvents(events);\n        return new MatrixRoom(id, MatrixRoomStatus.JOINED, members, messages);\n    }\n    static fromInvited(id, invited) {\n        const members = MatrixRoom.getMembersFromEvents(invited.invite_state.events);\n        return new MatrixRoom(id, MatrixRoomStatus.INVITED, members);\n    }\n    static fromLeft(id, left) {\n        const events = [...left.state.events, ...left.timeline.events];\n        const members = MatrixRoom.getMembersFromEvents(events);\n        const messages = MatrixRoom.getMessagesFromEvents(events);\n        return new MatrixRoom(id, MatrixRoomStatus.LEFT, members, messages);\n    }\n    static getMembersFromEvents(events) {\n        return MatrixRoom.getUniqueEvents(events.filter((event) => isCreateEvent(event) || isJoinEvent(event)))\n            .map((event) => event.sender)\n            .filter((member, index, array) => array.indexOf(member) === index);\n    }\n    static getMessagesFromEvents(events) {\n        return MatrixRoom.getUniqueEvents(events.filter(isMessageEvent))\n            .map((event) => MatrixMessage.from(event))\n            .filter((message) => !!message);\n    }\n    static getUniqueEvents(events) {\n        const eventIds = {};\n        const uniqueEvents = [];\n        events.forEach((event, index) => {\n            const eventId = event.event_id;\n            if (eventId === undefined || !(eventId in eventIds)) {\n                if (eventId !== undefined) {\n                    eventIds[eventId] = index;\n                }\n                uniqueEvents.push(event);\n            }\n        });\n        return uniqueEvents;\n    }\n}\n//# sourceMappingURL=MatrixRoom.js.map"]},"metadata":{},"sourceType":"module"}