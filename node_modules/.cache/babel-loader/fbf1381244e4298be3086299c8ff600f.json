{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useCallback } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { NETWORK_ADDRESS, BOND_CONTRACT_ADDRESS } from '../../config/index';\nconst options = {\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\n  network: {\n    type: 'mainnet' | 'granadanet' | 'hangzhounet' | 'custom'\n  }\n};\nexport default function useBonds() {\n  _s();\n\n  let myAddress;\n  const buyBond = useCallback(async () => {\n    // alert('Waiting for back-end');\n    const bondPrice = 1;\n    const LpToken = \"QUYPY\";\n    const LpTokenAmount = 10;\n    const Slippage = 0.5;\n    const contractAddress = BOND_CONTRACT_ADDRESS;\n    const networkAddress = NETWORK_ADDRESS;\n    debugger;\n    const Tezos = new TezosToolkit(networkAddress);\n    const wallet = new BeaconWallet(options);\n    const contract = await Tezos.wallet.at(contractAddress);\n    debugger;\n    const activeAccount = await wallet.client.getActiveAccount();\n\n    if (activeAccount) {\n      // If defined, the user is connected to a wallet.\n      // You can now do an operation request, sign request, or send another permission request to switch wallet\n      console.log(\"Already connected:\", activeAccount.address);\n      myAddress = activeAccount.address;\n    } else {\n      await wallet.requestPermissions();\n      myAddress = await wallet.getPKH();\n      console.log(\"New connection:\", myAddress);\n    }\n\n    Tezos.contract.at(contractAddress).then(contract => {\n      return contract.methods.order(bondPrice, LpToken, LpTokenAmount, Slippage).send();\n    }); // const batch = await Tezos.wallet.batch()\n    //   .withContractCall(contract.methods.interact('defaul'))\n    //   .withContractCall(contract.methods.wait([['unit']]));\n    // const batchOp = await batch.send();\n    // console.log('Operation hash:', batchOp.hash);\n    // await batchOp.confirmation();\n  }, []);\n  return {\n    buyBond\n  };\n}\n\n_s(useBonds, \"98EULqhvGbXdXwBWcxxQNfx+sLQ=\");","map":{"version":3,"sources":["D:/work/projects/plenty/falcon-heavy-frontend/src/components/Bonds/hooks.ts"],"names":["useCallback","BeaconWallet","TezosToolkit","NETWORK_ADDRESS","BOND_CONTRACT_ADDRESS","options","name","network","type","useBonds","myAddress","buyBond","bondPrice","LpToken","LpTokenAmount","Slippage","contractAddress","networkAddress","Tezos","wallet","contract","at","activeAccount","client","getActiveAccount","console","log","address","requestPermissions","getPKH","then","methods","order","send"],"mappings":";;AAAA,SAASA,WAAT,QAAsC,OAAtC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,SAAQC,eAAR,EAAyBC,qBAAzB,QAAqD,oBAArD;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,wCADQ;AAEdC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,YAAY,YAAZ,GAA2B,aAA3B,GAA2C;AAD1C;AAFK,CAAhB;AAOA,eAAe,SAASC,QAAT,GAAoB;AAAA;;AACjC,MAAIC,SAAJ;AAEA,QAAMC,OAAO,GAAGX,WAAW,CAAC,YAAY;AACpC;AAEA,UAAMY,SAAS,GAAG,CAAlB;AACA,UAAMC,OAAO,GAAG,OAAhB;AACA,UAAMC,aAAa,GAAG,EAAtB;AACA,UAAMC,QAAQ,GAAG,GAAjB;AACA,UAAMC,eAAe,GAAGZ,qBAAxB;AACA,UAAMa,cAAc,GAAGd,eAAvB;AACA;AACA,UAAMe,KAAK,GAAG,IAAIhB,YAAJ,CAAiBe,cAAjB,CAAd;AACA,UAAME,MAAM,GAAG,IAAIlB,YAAJ,CAAiBI,OAAjB,CAAf;AAGA,UAAMe,QAAQ,GAAG,MAAMF,KAAK,CAACC,MAAN,CAAaE,EAAb,CAAgBL,eAAhB,CAAvB;AACA;AAEA,UAAMM,aAAa,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcC,gBAAd,EAA5B;;AACA,QAAIF,aAAJ,EAAmB;AACjB;AACA;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCJ,aAAa,CAACK,OAAhD;AACAjB,MAAAA,SAAS,GAAGY,aAAa,CAACK,OAA1B;AACD,KALD,MAKO;AACL,YAAMR,MAAM,CAACS,kBAAP,EAAN;AACAlB,MAAAA,SAAS,GAAG,MAAMS,MAAM,CAACU,MAAP,EAAlB;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BhB,SAA/B;AACD;;AAEDQ,IAAAA,KAAK,CAACE,QAAN,CAAeC,EAAf,CAAkBL,eAAlB,EAAmCc,IAAnC,CAAwCV,QAAQ,IAAI;AAClD,aAAOA,QAAQ,CAACW,OAAT,CAAiBC,KAAjB,CAAuBpB,SAAvB,EAAkCC,OAAlC,EAA2CC,aAA3C,EAA0DC,QAA1D,EAAoEkB,IAApE,EAAP;AACD,KAFD,EA7BoC,CAkCpC;AACA;AACA;AAEA;AACA;AACA;AACH,GAzC0B,EAyCxB,EAzCwB,CAA3B;AA6CA,SAAO;AAAEtB,IAAAA;AAAF,GAAP;AACD;;GAjDuBF,Q","sourcesContent":["import { useCallback, useState } from \"react\";\nimport { BeaconWallet } from \"@taquito/beacon-wallet\";\n\nimport { TezosToolkit } from \"@taquito/taquito\";\nimport { NetworkType, PermissionScope } from \"@airgap/beacon-sdk\";\nimport {NETWORK_ADDRESS, BOND_CONTRACT_ADDRESS} from '../../config/index';\n\nconst options = {\n  name: \"Plenty Bonds Marketplace: Falcon Heavy\",\n  network: {\n    type: 'mainnet' | 'granadanet' | 'hangzhounet' | 'custom',\n  },\n};\n\nexport default function useBonds() {\n  let myAddress: string | undefined;\n\n  const buyBond = useCallback(async () => {\n      // alert('Waiting for back-end');\n      \n      const bondPrice = 1;\n      const LpToken = \"QUYPY\";\n      const LpTokenAmount = 10;\n      const Slippage = 0.5;\n      const contractAddress = BOND_CONTRACT_ADDRESS;\n      const networkAddress = NETWORK_ADDRESS;\n      debugger;\n      const Tezos = new TezosToolkit(networkAddress);\n      const wallet = new BeaconWallet(options);\n\n\n      const contract = await Tezos.wallet.at(contractAddress);\n      debugger;\n      \n      const activeAccount = await wallet.client.getActiveAccount();\n      if (activeAccount) {\n        // If defined, the user is connected to a wallet.\n        // You can now do an operation request, sign request, or send another permission request to switch wallet\n        console.log(\"Already connected:\", activeAccount.address);\n        myAddress = activeAccount.address;\n      } else {\n        await wallet.requestPermissions();\n        myAddress = await wallet.getPKH();\n        console.log(\"New connection:\", myAddress);\n      }\n\n      Tezos.contract.at(contractAddress).then(contract => {\n        return contract.methods.order(bondPrice, LpToken, LpTokenAmount, Slippage).send();\n      } );\n\n\n      // const batch = await Tezos.wallet.batch()\n      //   .withContractCall(contract.methods.interact('defaul'))\n      //   .withContractCall(contract.methods.wait([['unit']]));\n\n      // const batchOp = await batch.send();\n      // console.log('Operation hash:', batchOp.hash);\n      // await batchOp.confirmation();\n  }, []);\n\n\n\n  return { buyBond };\n}\n"]},"metadata":{},"sourceType":"module"}