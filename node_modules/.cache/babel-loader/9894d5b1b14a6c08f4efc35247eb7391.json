{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nexport { useFormControlContext };\n\nfunction useFormControlProvider(props) {\n  var {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isLoading\", \"isReadOnly\"]); // Generate all the required ids\n\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`\n   */\n\n  var [hasHelpText, setHasHelpText] = useBoolean(); // Let's keep track of when we focus the form element (e.g, `input`)\n\n  var [isFocused, setFocus] = useBoolean();\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps\n  };\n  return context;\n}\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\n\n\nexport var FormControl = /*#__PURE__*/forwardRef(function FormControl(props, ref) {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n      {\n    htmlProps\n  } = _useFormControlProvid,\n      context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"htmlProps\"]);\n\n  var _className = cx(\"chakra-form-control\", props.className);\n\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"group\",\n    ref: ref\n  }, htmlProps, {\n    className: _className,\n    __css: {\n      width: \"100%\",\n      position: \"relative\"\n    }\n  }))));\n});\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\n\n\nexport var FormHelperText = /*#__PURE__*/forwardRef(function FormHelperText(props, ref) {\n  var _props$id;\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  /**\n   * Notify the field context when the help text is rendered on\n   * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n   */\n\n  useSafeLayoutEffect(() => {\n    if (field == null ? void 0 : field.isInvalid) {\n      return undefined;\n    }\n\n    field == null ? void 0 : field.setHasHelpText.on();\n    return () => field == null ? void 0 : field.setHasHelpText.off();\n  }, []);\n\n  if (field == null ? void 0 : field.isInvalid) {\n    return null;\n  }\n\n  var _className = cx(\"chakra-form__helper-text\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles.helperText\n  }, props, {\n    className: _className,\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.helpTextId\n  }));\n});\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutPropertiesLoose","excluded","sourceKeys","keys","indexOf","useBoolean","useId","useSafeLayoutEffect","chakra","forwardRef","omitThemingProps","StylesProvider","useMultiStyleConfig","useStyles","createContext","cx","__DEV__","React","FormControlProvider","useFormControlContext","strict","name","useFormControlProvider","props","id","idProp","isRequired","isInvalid","isDisabled","isLoading","isReadOnly","htmlProps","uuid","labelId","feedbackId","helpTextId","hasHelpText","setHasHelpText","isFocused","setFocus","context","onFocus","on","onBlur","off","FormControl","ref","styles","ownProps","_useFormControlProvid","_className","className","createElement","value","div","role","__css","width","position","displayName","FormHelperText","_props$id","field","undefined","helperText"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/form-control/dist/esm/form-control.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { useBoolean, useId, useSafeLayoutEffect } from \"@chakra-ui/hooks\";\nimport { chakra, forwardRef, omitThemingProps, StylesProvider, useMultiStyleConfig, useStyles } from \"@chakra-ui/system\";\nimport { createContext, cx, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nvar [FormControlProvider, useFormControlContext] = createContext({\n  strict: false,\n  name: \"FormControlContext\"\n});\nexport { useFormControlContext };\n\nfunction useFormControlProvider(props) {\n  var {\n    id: idProp,\n    isRequired,\n    isInvalid,\n    isDisabled,\n    isLoading,\n    isReadOnly\n  } = props,\n      htmlProps = _objectWithoutPropertiesLoose(props, [\"id\", \"isRequired\", \"isInvalid\", \"isDisabled\", \"isLoading\", \"isReadOnly\"]); // Generate all the required ids\n\n\n  var uuid = useId();\n  var id = idProp || \"field-\" + uuid;\n  var labelId = id + \"-label\";\n  var feedbackId = id + \"-feedback\";\n  var helpTextId = id + \"-helptext\";\n  /**\n   * Track of when the `FormHelperText` has been rendered.\n   * We use this to append its id the the `aria-describedby` of the `input`\n   */\n\n  var [hasHelpText, setHasHelpText] = useBoolean(); // Let's keep track of when we focus the form element (e.g, `input`)\n\n  var [isFocused, setFocus] = useBoolean();\n  var context = {\n    isRequired: !!isRequired,\n    isInvalid: !!isInvalid,\n    isLoading: !!isLoading,\n    isReadOnly: !!isReadOnly,\n    isDisabled: !!isDisabled,\n    isFocused: !!isFocused,\n    onFocus: setFocus.on,\n    onBlur: setFocus.off,\n    hasHelpText,\n    setHasHelpText,\n    id,\n    labelId,\n    feedbackId,\n    helpTextId,\n    htmlProps\n  };\n  return context;\n}\n\n/**\n * FormControl provides context such as\n * `isInvalid`, `isDisabled`, and `isRequired` to form elements.\n *\n * This is commonly used in form elements such as `input`,\n * `select`, `textarea`, etc.\n */\nexport var FormControl = /*#__PURE__*/forwardRef(function FormControl(props, ref) {\n  var styles = useMultiStyleConfig(\"Form\", props);\n  var ownProps = omitThemingProps(props);\n\n  var _useFormControlProvid = useFormControlProvider(ownProps),\n      {\n    htmlProps\n  } = _useFormControlProvid,\n      context = _objectWithoutPropertiesLoose(_useFormControlProvid, [\"htmlProps\"]);\n\n  var _className = cx(\"chakra-form-control\", props.className);\n\n  return /*#__PURE__*/React.createElement(FormControlProvider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(StylesProvider, {\n    value: styles\n  }, /*#__PURE__*/React.createElement(chakra.div, _extends({\n    role: \"group\",\n    ref: ref\n  }, htmlProps, {\n    className: _className,\n    __css: {\n      width: \"100%\",\n      position: \"relative\"\n    }\n  }))));\n});\n\nif (__DEV__) {\n  FormControl.displayName = \"FormControl\";\n}\n\n/**\n * FormHelperText\n *\n * Assistive component that conveys additional guidance\n * about the field, such as how it will be used and what\n * types in values should be provided\n */\nexport var FormHelperText = /*#__PURE__*/forwardRef(function FormHelperText(props, ref) {\n  var _props$id;\n\n  var field = useFormControlContext();\n  var styles = useStyles();\n  /**\n   * Notify the field context when the help text is rendered on\n   * screen, so we can apply the correct `aria-describedby` to the field (e.g. input, textarea)\n   */\n\n  useSafeLayoutEffect(() => {\n    if (field == null ? void 0 : field.isInvalid) {\n      return undefined;\n    }\n\n    field == null ? void 0 : field.setHasHelpText.on();\n    return () => field == null ? void 0 : field.setHasHelpText.off();\n  }, []);\n\n  if (field == null ? void 0 : field.isInvalid) {\n    return null;\n  }\n\n  var _className = cx(\"chakra-form__helper-text\", props.className);\n\n  return /*#__PURE__*/React.createElement(chakra.div, _extends({\n    ref: ref,\n    __css: styles.helperText\n  }, props, {\n    className: _className,\n    id: (_props$id = props.id) != null ? _props$id : field == null ? void 0 : field.helpTextId\n  }));\n});\n\nif (__DEV__) {\n  FormHelperText.displayName = \"FormHelperText\";\n}\n//# sourceMappingURL=form-control.js.map"]},"metadata":{},"sourceType":"module"}