{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\nexport const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {\n  const data = [address, network.type];\n\n  if (network.name) {\n    data.push(`name:${network.name}`);\n  }\n\n  if (network.rpcUrl) {\n    data.push(`rpc:${network.rpcUrl}`);\n  }\n\n  yield sodium.ready;\n  const buffer = Buffer.from(sodium.crypto_generichash(10, data.join('-')));\n  return bs58check.encode(buffer);\n});","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,aAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,YAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,QAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,OAAO,KAAKO,MAAZ,MAAwB,oBAAxB;AACA,OAAO,KAAKC,SAAZ,MAA2B,WAA3B;AACA,OAAO,MAAMC,oBAAoB,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsBvB,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;AACrG,QAAMwB,IAAI,GAAG,CAACF,OAAD,EAAUC,OAAO,CAACE,IAAlB,CAAb;;AACA,MAAIF,OAAO,CAACG,IAAZ,EAAkB;AACdF,QAAI,CAACG,IAAL,CAAW,QAAOJ,OAAO,CAACG,IAAK,EAA/B;AACH;;AACD,MAAIH,OAAO,CAACK,MAAZ,EAAoB;AAChBJ,QAAI,CAACG,IAAL,CAAW,OAAMJ,OAAO,CAACK,MAAO,EAAhC;AACH;;AACD,QAAMT,MAAM,CAACU,KAAb;AACA,QAAMC,MAAM,GAAGC,MAAM,CAACC,IAAP,CAAYb,MAAM,CAACc,kBAAP,CAA0B,EAA1B,EAA8BT,IAAI,CAACU,IAAL,CAAU,GAAV,CAA9B,CAAZ,CAAf;AACA,SAAOd,SAAS,CAACe,MAAV,CAAiBL,MAAjB,CAAP;AACH,CAXkE,CAA5D","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","sodium","bs58check","getAccountIdentifier","address","network","data","type","name","push","rpcUrl","ready","buffer","Buffer","from","crypto_generichash","join","encode"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/utils/get-account-identifier.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as sodium from 'libsodium-wrappers';\nimport * as bs58check from 'bs58check';\nexport const getAccountIdentifier = (address, network) => __awaiter(void 0, void 0, void 0, function* () {\n    const data = [address, network.type];\n    if (network.name) {\n        data.push(`name:${network.name}`);\n    }\n    if (network.rpcUrl) {\n        data.push(`rpc:${network.rpcUrl}`);\n    }\n    yield sodium.ready;\n    const buffer = Buffer.from(sodium.crypto_generichash(10, data.join('-')));\n    return bs58check.encode(buffer);\n});\n//# sourceMappingURL=get-account-identifier.js.map"]},"metadata":{},"sourceType":"module"}