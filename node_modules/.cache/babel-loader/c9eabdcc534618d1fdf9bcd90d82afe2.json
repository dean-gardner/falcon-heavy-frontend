{"ast":null,"code":"/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport var findById = (arr, id) => arr.find(toast => toast.id === id);\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\n\nexport function findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(toast => toast.id === id) : -1;\n  return {\n    position,\n    index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\nexport var getToastPosition = (toasts, id) => {\n  var _Object$values$flat$f;\n\n  return (_Object$values$flat$f = Object.values(toasts).flat().find(toast => toast.id === id)) == null ? void 0 : _Object$values$flat$f.position;\n};\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\n\nexport var isVisible = (toasts, id) => !!getToastPosition(toasts, id);\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\n\nexport function getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems\n  };\n}","map":{"version":3,"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,IAAIA,QAAQ,GAAG,CAACC,GAAD,EAAMC,EAAN,KAAaD,GAAG,CAACE,IAAJ,CAASC,KAAK,IAAIA,KAAK,CAACF,EAAN,KAAaA,EAA/B,CAA5B;AACP;AACA;AACA;AACA;;AAEA,OAAO,SAASG,SAAT,CAAmBC,MAAnB,EAA2BJ,EAA3B,EAA+B;AACpC,MAAIK,QAAQ,GAAGC,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CAA/B;AACA,MAAIO,KAAK,GAAGF,QAAQ,GAAGD,MAAM,CAACC,QAAD,CAAN,CAAiBG,SAAjB,CAA2BN,KAAK,IAAIA,KAAK,CAACF,EAAN,KAAaA,EAAjD,CAAH,GAA0D,CAAC,CAA/E;AACA,SAAO;AACLK,YADK;AAELE;AAFK,GAAP;AAID;AACD;AACA;AACA;AACA;;AAEA,OAAO,IAAID,gBAAgB,GAAG,CAACF,MAAD,EAASJ,EAAT,KAAgB;AAC5C,MAAIS,qBAAJ;;AAEA,SAAO,CAACA,qBAAqB,GAAGC,MAAM,CAACC,MAAP,CAAcP,MAAd,EAAsBQ,IAAtB,GAA6BX,IAA7B,CAAkCC,KAAK,IAAIA,KAAK,CAACF,EAAN,KAAaA,EAAxD,CAAzB,KAAyF,IAAzF,GAAgG,KAAK,CAArG,GAAyGS,qBAAqB,CAACJ,QAAtI;AACD,CAJM;AAKP;AACA;AACA;AACA;;AAEA,OAAO,IAAIQ,SAAS,GAAG,CAACT,MAAD,EAASJ,EAAT,KAAgB,CAAC,CAACM,gBAAgB,CAACF,MAAD,EAASJ,EAAT,CAAlD;AACP;AACA;AACA;AACA;;AAEA,OAAO,SAASc,aAAT,CAAuBT,QAAvB,EAAiC;AACtC,MAAIU,QAAQ,GAAGV,QAAQ,CAACW,QAAT,CAAkB,OAAlB,CAAf;AACA,MAAIC,OAAO,GAAGZ,QAAQ,CAACW,QAAT,CAAkB,MAAlB,CAAd;AACA,MAAIE,UAAU,GAAG,QAAjB;AACA,MAAIH,QAAJ,EAAcG,UAAU,GAAG,UAAb;AACd,MAAID,OAAJ,EAAaC,UAAU,GAAG,YAAb;AACb,SAAO;AACLC,WAAO,EAAE,MADJ;AAELC,iBAAa,EAAE,QAFV;AAGLF;AAHK,GAAP;AAKD","names":["findById","arr","id","find","toast","findToast","toasts","position","getToastPosition","index","findIndex","_Object$values$flat$f","Object","values","flat","isVisible","getToastStyle","isRighty","includes","isLefty","alignItems","display","flexDirection"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/toast/dist/esm/toast.utils.js"],"sourcesContent":["/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\nexport var findById = (arr, id) => arr.find(toast => toast.id === id);\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\n\nexport function findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(toast => toast.id === id) : -1;\n  return {\n    position,\n    index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\nexport var getToastPosition = (toasts, id) => {\n  var _Object$values$flat$f;\n\n  return (_Object$values$flat$f = Object.values(toasts).flat().find(toast => toast.id === id)) == null ? void 0 : _Object$values$flat$f.position;\n};\n/**\n * Given the toast manager state, checks if a specific toast is\n * still in the state, which means it is still visible on screen.\n */\n\nexport var isVisible = (toasts, id) => !!getToastPosition(toasts, id);\n/**\n * Get's the styles to be applied to a toast's container\n * based on its position in the manager\n */\n\nexport function getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems\n  };\n}\n//# sourceMappingURL=toast.utils.js.map"]},"metadata":{},"sourceType":"module"}