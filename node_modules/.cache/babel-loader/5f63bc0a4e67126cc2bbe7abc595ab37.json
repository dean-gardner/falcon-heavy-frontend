{"ast":null,"code":"/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n  return function multicastOperatorFunction(source) {\n    var subjectFactory;\n\n    if (typeof subjectOrSubjectFactory === 'function') {\n      subjectFactory = subjectOrSubjectFactory;\n    } else {\n      subjectFactory = function subjectFactory() {\n        return subjectOrSubjectFactory;\n      };\n    }\n\n    if (typeof selector === 'function') {\n      return source.lift(new MulticastOperator(subjectFactory, selector));\n    }\n\n    var connectable = Object.create(source, connectableObservableDescriptor);\n    connectable.source = source;\n    connectable.subjectFactory = subjectFactory;\n    return connectable;\n  };\n}\n\nvar MulticastOperator = /*@__PURE__*/function () {\n  function MulticastOperator(subjectFactory, selector) {\n    this.subjectFactory = subjectFactory;\n    this.selector = selector;\n  }\n\n  MulticastOperator.prototype.call = function (subscriber, source) {\n    var selector = this.selector;\n    var subject = this.subjectFactory();\n    var subscription = selector(subject).subscribe(subscriber);\n    subscription.add(source.subscribe(subject));\n    return subscription;\n  };\n\n  return MulticastOperator;\n}();\n\nexport { MulticastOperator };","map":{"version":3,"mappings":"AAAA;AACA,SAASA,+BAAT,QAAgD,qCAAhD;AACA,OAAO,SAASC,SAAT,CAAmBC,uBAAnB,EAA4CC,QAA5C,EAAsD;AACzD,SAAO,SAASC,yBAAT,CAAmCC,MAAnC,EAA2C;AAC9C,QAAIC,cAAJ;;AACA,QAAI,OAAOJ,uBAAP,KAAmC,UAAvC,EAAmD;AAC/CI,oBAAc,GAAGJ,uBAAjB;AACH,KAFD,MAGK;AACDI,oBAAc,GAAG,SAASA,cAAT,GAA0B;AACvC,eAAOJ,uBAAP;AACH,OAFD;AAGH;;AACD,QAAI,OAAOC,QAAP,KAAoB,UAAxB,EAAoC;AAChC,aAAOE,MAAM,CAACE,IAAP,CAAY,IAAIC,iBAAJ,CAAsBF,cAAtB,EAAsCH,QAAtC,CAAZ,CAAP;AACH;;AACD,QAAIM,WAAW,GAAGC,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBL,+BAAtB,CAAlB;AACAS,eAAW,CAACJ,MAAZ,GAAqBA,MAArB;AACAI,eAAW,CAACH,cAAZ,GAA6BA,cAA7B;AACA,WAAOG,WAAP;AACH,GAjBD;AAkBH;;AACD,IAAID,iBAAiB,GAAG,aAAe,YAAY;AAC/C,WAASA,iBAAT,CAA2BF,cAA3B,EAA2CH,QAA3C,EAAqD;AACjD,SAAKG,cAAL,GAAsBA,cAAtB;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACH;;AACDK,mBAAiB,CAACI,SAAlB,CAA4BC,IAA5B,GAAmC,UAAUC,UAAV,EAAsBT,MAAtB,EAA8B;AAC7D,QAAIF,QAAQ,GAAG,KAAKA,QAApB;AACA,QAAIY,OAAO,GAAG,KAAKT,cAAL,EAAd;AACA,QAAIU,YAAY,GAAGb,QAAQ,CAACY,OAAD,CAAR,CAAkBE,SAAlB,CAA4BH,UAA5B,CAAnB;AACAE,gBAAY,CAACE,GAAb,CAAiBb,MAAM,CAACY,SAAP,CAAiBF,OAAjB,CAAjB;AACA,WAAOC,YAAP;AACH,GAND;;AAOA,SAAOR,iBAAP;AACH,CAbsC,EAAvC;;AAcA,SAASA,iBAAT","names":["connectableObservableDescriptor","multicast","subjectOrSubjectFactory","selector","multicastOperatorFunction","source","subjectFactory","lift","MulticastOperator","connectable","Object","create","prototype","call","subscriber","subject","subscription","subscribe","add"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/multicast.js"],"sourcesContent":["/** PURE_IMPORTS_START _observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ (function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\nexport { MulticastOperator };\n//# sourceMappingURL=multicast.js.map\n"]},"metadata":{},"sourceType":"module"}