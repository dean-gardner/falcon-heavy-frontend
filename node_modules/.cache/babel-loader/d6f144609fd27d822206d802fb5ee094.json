{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n  if (yield ChromeStorage.isSupported()) {\n    logger.log('getStorage', 'USING CHROME STORAGE');\n    return new ChromeStorage();\n  } else if (yield LocalStorage.isSupported()) {\n    logger.log('getStorage', 'USING LOCAL STORAGE');\n    return new LocalStorage();\n  } else {\n    throw new Error('no storage type supported');\n  }\n});","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,aAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,YAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,QAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,MAAT,QAAuB,iBAAvB;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,IAA5C;AACA,MAAMC,MAAM,GAAG,IAAIH,MAAJ,CAAW,SAAX,CAAf;AACA,OAAO,MAAMI,UAAU,GAAG,MAAMvB,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;AAC3E,MAAI,MAAMoB,aAAa,CAACI,WAAd,EAAV,EAAuC;AACnCF,UAAM,CAACG,GAAP,CAAW,YAAX,EAAyB,sBAAzB;AACA,WAAO,IAAIL,aAAJ,EAAP;AACH,GAHD,MAIK,IAAI,MAAMC,YAAY,CAACG,WAAb,EAAV,EAAsC;AACvCF,UAAM,CAACG,GAAP,CAAW,YAAX,EAAyB,qBAAzB;AACA,WAAO,IAAIJ,YAAJ,EAAP;AACH,GAHI,MAIA;AACD,UAAM,IAAIK,KAAJ,CAAU,2BAAV,CAAN;AACH;AACJ,CAZwC,CAAlC","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Logger","ChromeStorage","LocalStorage","logger","getStorage","isSupported","log","Error"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/storage/getStorage.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Logger } from '../utils/Logger';\nimport { ChromeStorage, LocalStorage } from '..';\nconst logger = new Logger('STORAGE');\nexport const getStorage = () => __awaiter(void 0, void 0, void 0, function* () {\n    if (yield ChromeStorage.isSupported()) {\n        logger.log('getStorage', 'USING CHROME STORAGE');\n        return new ChromeStorage();\n    }\n    else if (yield LocalStorage.isSupported()) {\n        logger.log('getStorage', 'USING LOCAL STORAGE');\n        return new LocalStorage();\n    }\n    else {\n        throw new Error('no storage type supported');\n    }\n});\n//# sourceMappingURL=getStorage.js.map"]},"metadata":{},"sourceType":"module"}