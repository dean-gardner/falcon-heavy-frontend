{"ast":null,"code":"import { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param timeout delay (in ms) to switch back to initial state once copied.\n */\n\nexport function useClipboard(text, timeout) {\n  if (timeout === void 0) {\n    timeout = 1500;\n  }\n\n  var [hasCopied, setHasCopied] = useState(false);\n  var onCopy = useCallback(() => {\n    var didCopy = copy(text);\n    setHasCopied(didCopy);\n  }, [text]);\n  useEffect(() => {\n    var timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: text,\n    onCopy,\n    hasCopied\n  };\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,SAAhC,QAAiD,OAAjD;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4BC,OAA5B,EAAqC;AAC1C,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,WAAO,GAAG,IAAV;AACD;;AAED,MAAI,CAACC,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,KAAD,CAAxC;AACA,MAAIS,MAAM,GAAGR,WAAW,CAAC,MAAM;AAC7B,QAAIS,OAAO,GAAGP,IAAI,CAACE,IAAD,CAAlB;AACAG,gBAAY,CAACE,OAAD,CAAZ;AACD,GAHuB,EAGrB,CAACL,IAAD,CAHqB,CAAxB;AAIAH,WAAS,CAAC,MAAM;AACd,QAAIS,SAAS,GAAG,IAAhB;;AAEA,QAAIJ,SAAJ,EAAe;AACbI,eAAS,GAAGC,MAAM,CAACC,UAAP,CAAkB,MAAM;AAClCL,oBAAY,CAAC,KAAD,CAAZ;AACD,OAFW,EAETF,OAFS,CAAZ;AAGD;;AAED,WAAO,MAAM;AACX,UAAIK,SAAJ,EAAe;AACbC,cAAM,CAACE,YAAP,CAAoBH,SAApB;AACD;AACF,KAJD;AAKD,GAdQ,EAcN,CAACL,OAAD,EAAUC,SAAV,CAdM,CAAT;AAeA,SAAO;AACLQ,SAAK,EAAEV,IADF;AAELI,UAFK;AAGLF;AAHK,GAAP;AAKD","names":["useState","useCallback","useEffect","copy","useClipboard","text","timeout","hasCopied","setHasCopied","onCopy","didCopy","timeoutId","window","setTimeout","clearTimeout","value"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-clipboard.js"],"sourcesContent":["import { useState, useCallback, useEffect } from \"react\";\nimport copy from \"copy-to-clipboard\";\n/**\n * React hook to copy content to clipboard\n *\n * @param text the text or value to copy\n * @param timeout delay (in ms) to switch back to initial state once copied.\n */\n\nexport function useClipboard(text, timeout) {\n  if (timeout === void 0) {\n    timeout = 1500;\n  }\n\n  var [hasCopied, setHasCopied] = useState(false);\n  var onCopy = useCallback(() => {\n    var didCopy = copy(text);\n    setHasCopied(didCopy);\n  }, [text]);\n  useEffect(() => {\n    var timeoutId = null;\n\n    if (hasCopied) {\n      timeoutId = window.setTimeout(() => {\n        setHasCopied(false);\n      }, timeout);\n    }\n\n    return () => {\n      if (timeoutId) {\n        window.clearTimeout(timeoutId);\n      }\n    };\n  }, [timeout, hasCopied]);\n  return {\n    value: text,\n    onCopy,\n    hasCopied\n  };\n}\n//# sourceMappingURL=use-clipboard.js.map"]},"metadata":{},"sourceType":"module"}