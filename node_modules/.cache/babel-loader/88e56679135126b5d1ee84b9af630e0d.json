{"ast":null,"code":"var FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\n\nexport function isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\n/**\n * Determine if the event is a valid numeric keyboard event.\n * We use this so we can prevent non-number characters in the input\n */\n\nexport function isValidNumericKeyboardEvent(event) {\n  if (event.key == null) return true;\n  var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n  if (isModifierKey) {\n    return true;\n  }\n\n  var isSingleCharacterKey = event.key.length === 1;\n\n  if (!isSingleCharacterKey) {\n    return true;\n  }\n\n  return isFloatingPointNumericCharacter(event.key);\n}","map":{"version":3,"mappings":"AAAA,IAAIA,oBAAoB,GAAG,eAA3B;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,+BAAT,CAAyCC,SAAzC,EAAoD;AACzD,SAAOF,oBAAoB,CAACG,IAArB,CAA0BD,SAA1B,CAAP;AACD;AACD;AACA;AACA;AACA;;AAEA,OAAO,SAASE,2BAAT,CAAqCC,KAArC,EAA4C;AACjD,MAAIA,KAAK,CAACC,GAAN,IAAa,IAAjB,EAAuB,OAAO,IAAP;AACvB,MAAIC,aAAa,GAAGF,KAAK,CAACG,OAAN,IAAiBH,KAAK,CAACI,MAAvB,IAAiCJ,KAAK,CAACK,OAA3D;;AAEA,MAAIH,aAAJ,EAAmB;AACjB,WAAO,IAAP;AACD;;AAED,MAAII,oBAAoB,GAAGN,KAAK,CAACC,GAAN,CAAUM,MAAV,KAAqB,CAAhD;;AAEA,MAAI,CAACD,oBAAL,EAA2B;AACzB,WAAO,IAAP;AACD;;AAED,SAAOV,+BAA+B,CAACI,KAAK,CAACC,GAAP,CAAtC;AACD","names":["FLOATING_POINT_REGEX","isFloatingPointNumericCharacter","character","test","isValidNumericKeyboardEvent","event","key","isModifierKey","ctrlKey","altKey","metaKey","isSingleCharacterKey","length"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/number-input/dist/esm/utils.js"],"sourcesContent":["var FLOATING_POINT_REGEX = /^[Ee0-9+\\-.]$/;\n/**\n * Determine if a character is a DOM floating point character\n * @see https://www.w3.org/TR/2012/WD-html-markup-20120329/datatypes.html#common.data.float\n */\n\nexport function isFloatingPointNumericCharacter(character) {\n  return FLOATING_POINT_REGEX.test(character);\n}\n/**\n * Determine if the event is a valid numeric keyboard event.\n * We use this so we can prevent non-number characters in the input\n */\n\nexport function isValidNumericKeyboardEvent(event) {\n  if (event.key == null) return true;\n  var isModifierKey = event.ctrlKey || event.altKey || event.metaKey;\n\n  if (isModifierKey) {\n    return true;\n  }\n\n  var isSingleCharacterKey = event.key.length === 1;\n\n  if (!isSingleCharacterKey) {\n    return true;\n  }\n\n  return isFloatingPointNumericCharacter(event.key);\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}