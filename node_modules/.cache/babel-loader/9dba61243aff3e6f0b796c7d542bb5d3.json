{"ast":null,"code":"import { contains, focus, getAllFocusable } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEventListener } from \"./use-event-listener\";\nimport { useUpdateEffect } from \"./use-update-effect\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nexport function useFocusOnShow(target, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  var {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  var element = target && \"current\" in target ? target.current : target;\n  var autoFocus = shouldFocus && visible;\n  var onFocus = React.useCallback(() => {\n    if (!element || !autoFocus) return;\n    if (contains(element, document.activeElement)) return;\n\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll\n      });\n    } else {\n      var tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll\n        });\n      }\n    }\n  }, [autoFocus, preventScroll]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,KAAnB,EAA0BC,eAA1B,QAAiD,kBAAjD;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,SAASC,gBAAT,QAAiC,sBAAjC;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,IAAIC,cAAc,GAAG;AACnBC,eAAa,EAAE,IADI;AAEnBC,aAAW,EAAE;AAFM,CAArB;AAIA,OAAO,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,OAAhC,EAAyC;AAC9C,MAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;AACtBA,WAAO,GAAGL,cAAV;AACD;;AAED,MAAI;AACFM,YADE;AAEFL,iBAFE;AAGFC,eAHE;AAIFK;AAJE,MAKAF,OALJ;AAMA,MAAIG,OAAO,GAAGJ,MAAM,IAAI,aAAaA,MAAvB,GAAgCA,MAAM,CAACK,OAAvC,GAAiDL,MAA/D;AACA,MAAIM,SAAS,GAAGR,WAAW,IAAIK,OAA/B;AACA,MAAII,OAAO,GAAGd,KAAK,CAACe,WAAN,CAAkB,MAAM;AACpC,QAAI,CAACJ,OAAD,IAAY,CAACE,SAAjB,EAA4B;AAC5B,QAAIhB,QAAQ,CAACc,OAAD,EAAUK,QAAQ,CAACC,aAAnB,CAAZ,EAA+C;;AAE/C,QAAIR,QAAQ,IAAI,IAAZ,GAAmB,KAAK,CAAxB,GAA4BA,QAAQ,CAACG,OAAzC,EAAkD;AAChDd,WAAK,CAACW,QAAQ,CAACG,OAAV,EAAmB;AACtBR;AADsB,OAAnB,CAAL;AAGD,KAJD,MAIO;AACL,UAAIc,WAAW,GAAGnB,eAAe,CAACY,OAAD,CAAjC;;AAEA,UAAIO,WAAW,CAACC,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BrB,aAAK,CAACoB,WAAW,CAAC,CAAD,CAAZ,EAAiB;AACpBd;AADoB,SAAjB,CAAL;AAGD;AACF;AACF,GAjBa,EAiBX,CAACS,SAAD,EAAYT,aAAZ,CAjBW,CAAd;AAkBAF,iBAAe,CAAC,MAAM;AACpBY,WAAO;AACR,GAFc,EAEZ,CAACA,OAAD,CAFY,CAAf;AAGAb,kBAAgB,CAAC,eAAD,EAAkBa,OAAlB,EAA2BH,OAA3B,CAAhB;AACD","names":["contains","focus","getAllFocusable","React","useEventListener","useUpdateEffect","defaultOptions","preventScroll","shouldFocus","useFocusOnShow","target","options","focusRef","visible","element","current","autoFocus","onFocus","useCallback","document","activeElement","tabbableEls","length"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-focus-on-show.js"],"sourcesContent":["import { contains, focus, getAllFocusable } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { useEventListener } from \"./use-event-listener\";\nimport { useUpdateEffect } from \"./use-update-effect\";\nvar defaultOptions = {\n  preventScroll: true,\n  shouldFocus: false\n};\nexport function useFocusOnShow(target, options) {\n  if (options === void 0) {\n    options = defaultOptions;\n  }\n\n  var {\n    focusRef,\n    preventScroll,\n    shouldFocus,\n    visible\n  } = options;\n  var element = target && \"current\" in target ? target.current : target;\n  var autoFocus = shouldFocus && visible;\n  var onFocus = React.useCallback(() => {\n    if (!element || !autoFocus) return;\n    if (contains(element, document.activeElement)) return;\n\n    if (focusRef == null ? void 0 : focusRef.current) {\n      focus(focusRef.current, {\n        preventScroll\n      });\n    } else {\n      var tabbableEls = getAllFocusable(element);\n\n      if (tabbableEls.length > 0) {\n        focus(tabbableEls[0], {\n          preventScroll\n        });\n      }\n    }\n  }, [autoFocus, preventScroll]);\n  useUpdateEffect(() => {\n    onFocus();\n  }, [onFocus]);\n  useEventListener(\"transitionend\", onFocus, element);\n}\n//# sourceMappingURL=use-focus-on-show.js.map"]},"metadata":{},"sourceType":"module"}