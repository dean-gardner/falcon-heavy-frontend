{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { addListener, getColorScheme, syncBodyClassName, root } from \"./color-mode.utils\";\nimport { localStorageManager } from \"./storage-manager\";\nexport var ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nexport var useColorMode = () => {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\n\nexport function ColorModeProvider(props) {\n  var {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode\n    },\n    colorModeManager = localStorageManager\n  } = props;\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var [colorMode, rawSetColorMode] = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(initialColorMode) : initialColorMode);\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var mode = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();\n\n      if (mode) {\n        rawSetColorMode(mode);\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode]);\n  React.useEffect(() => {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode]);\n  var setColorMode = React.useCallback(value => {\n    colorModeManager.set(value);\n    rawSetColorMode(value);\n  }, [colorModeManager]);\n  var toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(() => {\n    var removeListener;\n\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode]); // presence of `value` indicates a controlled context\n\n  var context = {\n    colorMode: value != null ? value : colorMode,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode\n  };\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nexport var DarkMode = props => /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n  value: {\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop\n  }\n}, props));\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nexport var LightMode = props => /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n  value: {\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop\n  }\n}, props));\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nexport function useColorModeValue(light, dark) {\n  var {\n    colorMode\n  } = useColorMode();\n  return colorMode === \"light\" ? light : dark;\n}","map":{"version":3,"mappings":"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","names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","isBrowser","noop","__DEV__","React","addListener","getColorScheme","syncBodyClassName","root","localStorageManager","ColorModeContext","createContext","displayName","useColorMode","context","useContext","undefined","Error","ColorModeProvider","props","value","children","options","useSystemColorMode","initialColorMode","colorModeManager","colorMode","rawSetColorMode","useState","type","get","useEffect","mode","isDark","set","setColorMode","useCallback","toggleColorMode","removeListener","createElement","Provider","DarkMode","LightMode","useColorModeValue","light","dark"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/react/node_modules/@chakra-ui/color-mode/dist/esm/color-mode-provider.js"],"sourcesContent":["function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport { isBrowser, noop, __DEV__ } from \"@chakra-ui/utils\";\nimport * as React from \"react\";\nimport { addListener, getColorScheme, syncBodyClassName, root } from \"./color-mode.utils\";\nimport { localStorageManager } from \"./storage-manager\";\nexport var ColorModeContext = /*#__PURE__*/React.createContext({});\n\nif (__DEV__) {\n  ColorModeContext.displayName = \"ColorModeContext\";\n}\n/**\n * React hook that reads from `ColorModeProvider` context\n * Returns the color mode and function to toggle it\n */\n\n\nexport var useColorMode = () => {\n  var context = React.useContext(ColorModeContext);\n\n  if (context === undefined) {\n    throw new Error(\"useColorMode must be used within a ColorModeProvider\");\n  }\n\n  return context;\n};\n\n/**\n * Provides context for the color mode based on config in `theme`\n * Returns the color mode and function to toggle the color mode\n */\nexport function ColorModeProvider(props) {\n  var {\n    value,\n    children,\n    options: {\n      useSystemColorMode,\n      initialColorMode\n    },\n    colorModeManager = localStorageManager\n  } = props;\n  /**\n   * Only attempt to retrieve if we're on the server. Else this will result\n   * in a hydration mismatch warning and partially invalid visuals.\n   *\n   * Else fallback safely to `theme.config.initialColormode` (default light)\n   */\n\n  var [colorMode, rawSetColorMode] = React.useState(colorModeManager.type === \"cookie\" ? colorModeManager.get(initialColorMode) : initialColorMode);\n  React.useEffect(() => {\n    /**\n     * Since we cannot initially retrieve localStorage to due above mentioned\n     * reasons, do so after hydration.\n     *\n     * Priority:\n     * - system color mode\n     * - defined value on <ColorModeScript />, if present\n     * - previously stored value\n     */\n    if (isBrowser && colorModeManager.type === \"localStorage\") {\n      var mode = useSystemColorMode ? getColorScheme(initialColorMode) : root.get() || colorModeManager.get();\n\n      if (mode) {\n        rawSetColorMode(mode);\n      }\n    }\n  }, [colorModeManager, useSystemColorMode, initialColorMode]);\n  React.useEffect(() => {\n    var isDark = colorMode === \"dark\";\n    syncBodyClassName(isDark);\n    root.set(isDark ? \"dark\" : \"light\");\n  }, [colorMode]);\n  var setColorMode = React.useCallback(value => {\n    colorModeManager.set(value);\n    rawSetColorMode(value);\n  }, [colorModeManager]);\n  var toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === \"light\" ? \"dark\" : \"light\");\n  }, [colorMode, setColorMode]);\n  React.useEffect(() => {\n    var removeListener;\n\n    if (useSystemColorMode) {\n      removeListener = addListener(setColorMode);\n    }\n\n    return () => {\n      if (removeListener && useSystemColorMode) {\n        removeListener();\n      }\n    };\n  }, [setColorMode, useSystemColorMode]); // presence of `value` indicates a controlled context\n\n  var context = {\n    colorMode: value != null ? value : colorMode,\n    toggleColorMode: value ? noop : toggleColorMode,\n    setColorMode: value ? noop : setColorMode\n  };\n  return /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n    value: context\n  }, children);\n}\n\nif (__DEV__) {\n  ColorModeProvider.displayName = \"ColorModeProvider\";\n}\n/**\n * Locks the color mode to `dark`, without any way to change it.\n */\n\n\nexport var DarkMode = props => /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n  value: {\n    colorMode: \"dark\",\n    toggleColorMode: noop,\n    setColorMode: noop\n  }\n}, props));\n\nif (__DEV__) {\n  DarkMode.displayName = \"DarkMode\";\n}\n/**\n * Locks the color mode to `light` without any way to change it.\n */\n\n\nexport var LightMode = props => /*#__PURE__*/React.createElement(ColorModeContext.Provider, _extends({\n  value: {\n    colorMode: \"light\",\n    toggleColorMode: noop,\n    setColorMode: noop\n  }\n}, props));\n\nif (__DEV__) {\n  LightMode.displayName = \"LightMode\";\n}\n/**\n * Change value based on color mode.\n *\n * @param light the light mode value\n * @param dark the dark mode value\n *\n * @example\n *\n * ```js\n * const Icon = useColorModeValue(MoonIcon, SunIcon)\n * ```\n */\n\n\nexport function useColorModeValue(light, dark) {\n  var {\n    colorMode\n  } = useColorMode();\n  return colorMode === \"light\" ? light : dark;\n}\n//# sourceMappingURL=color-mode-provider.js.map"]},"metadata":{},"sourceType":"module"}