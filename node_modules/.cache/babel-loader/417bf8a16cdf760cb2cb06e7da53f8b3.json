{"ast":null,"code":"import * as React from \"react\";\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\n\nfunction isPrintableCharacter(event) {\n  var {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\n\n\nexport function useShortcut(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  var [keys, setKeys] = React.useState([]);\n  var timeoutRef = React.useRef();\n\n  var flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  var clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n\n  React.useEffect(() => {\n    return flush;\n  }, []);\n\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        var keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n\n      if (isPrintableCharacter(event)) {\n        var _keysCopy = keys.concat(event.key);\n\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        setKeys(_keysCopy);\n        fn(_keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n\n  return onKeyDown;\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA;AACA;AACA;AACA;;AAEA,SAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,MAAI;AACFC;AADE,MAEAD,KAFJ;AAGA,SAAOC,GAAG,CAACC,MAAJ,KAAe,CAAf,IAAoBD,GAAG,CAACC,MAAJ,GAAa,CAAb,IAAkB,eAAeC,IAAf,CAAoBF,GAApB,CAA7C;AACD;AAED;AACA;AACA;AACA;;;AACA,OAAO,SAASG,WAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;AACpBA,SAAK,GAAG,EAAR;AACD;;AAED,MAAI;AACFC,WAAO,GAAG,GADR;AAEFC,kBAAc,GAAG,MAAM;AAFrB,MAGAF,KAHJ;AAIA,MAAI,CAACG,IAAD,EAAOC,OAAP,IAAkBX,KAAK,CAACY,QAAN,CAAe,EAAf,CAAtB;AACA,MAAIC,UAAU,GAAGb,KAAK,CAACc,MAAN,EAAjB;;AAEA,MAAIC,KAAK,GAAG,MAAM;AAChB,QAAIF,UAAU,CAACG,OAAf,EAAwB;AACtBC,kBAAY,CAACJ,UAAU,CAACG,OAAZ,CAAZ;AACAH,gBAAU,CAACG,OAAX,GAAqB,IAArB;AACD;AACF,GALD;;AAOA,MAAIE,mBAAmB,GAAG,MAAM;AAC9BH,SAAK;AACLF,cAAU,CAACG,OAAX,GAAqBG,UAAU,CAAC,MAAM;AACpCR,aAAO,CAAC,EAAD,CAAP;AACAE,gBAAU,CAACG,OAAX,GAAqB,IAArB;AACD,KAH8B,EAG5BR,OAH4B,CAA/B;AAID,GAND;;AAQAR,OAAK,CAACoB,SAAN,CAAgB,MAAM;AACpB,WAAOL,KAAP;AACD,GAFD,EAEG,EAFH;;AAIA,WAASM,SAAT,CAAmBC,EAAnB,EAAuB;AACrB,WAAOpB,KAAK,IAAI;AACd,UAAIA,KAAK,CAACC,GAAN,KAAc,WAAlB,EAA+B;AAC7B,YAAIoB,QAAQ,GAAG,CAAC,GAAGb,IAAJ,CAAf;AACAa,gBAAQ,CAACC,GAAT;AACAb,eAAO,CAACY,QAAD,CAAP;AACA;AACD;;AAED,UAAItB,oBAAoB,CAACC,KAAD,CAAxB,EAAiC;AAC/B,YAAIuB,SAAS,GAAGf,IAAI,CAACgB,MAAL,CAAYxB,KAAK,CAACC,GAAlB,CAAhB;;AAEA,YAAIM,cAAc,CAACP,KAAD,CAAlB,EAA2B;AACzBA,eAAK,CAACO,cAAN;AACAP,eAAK,CAACyB,eAAN;AACD;;AAEDhB,eAAO,CAACc,SAAD,CAAP;AACAH,UAAE,CAACG,SAAS,CAACG,IAAV,CAAe,EAAf,CAAD,CAAF;AACAV,2BAAmB;AACpB;AACF,KApBD;AAqBD;;AAED,SAAOG,SAAP;AACD","names":["React","isPrintableCharacter","event","key","length","test","useShortcut","props","timeout","preventDefault","keys","setKeys","useState","timeoutRef","useRef","flush","current","clearTimeout","clearKeysAfterDelay","setTimeout","useEffect","onKeyDown","fn","keysCopy","pop","_keysCopy","concat","stopPropagation","join"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-shortcut.js"],"sourcesContent":["import * as React from \"react\";\n/**\n * Checks if the key pressed is a printable character\n * and can be used for shortcut navigation\n */\n\nfunction isPrintableCharacter(event) {\n  var {\n    key\n  } = event;\n  return key.length === 1 || key.length > 1 && /[^a-zA-Z0-9]/.test(key);\n}\n\n/**\n * React hook that provides an enhanced keydown handler,\n * that's used for key navigation within menus, select dropdowns.\n */\nexport function useShortcut(props) {\n  if (props === void 0) {\n    props = {};\n  }\n\n  var {\n    timeout = 300,\n    preventDefault = () => true\n  } = props;\n  var [keys, setKeys] = React.useState([]);\n  var timeoutRef = React.useRef();\n\n  var flush = () => {\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  var clearKeysAfterDelay = () => {\n    flush();\n    timeoutRef.current = setTimeout(() => {\n      setKeys([]);\n      timeoutRef.current = null;\n    }, timeout);\n  };\n\n  React.useEffect(() => {\n    return flush;\n  }, []);\n\n  function onKeyDown(fn) {\n    return event => {\n      if (event.key === \"Backspace\") {\n        var keysCopy = [...keys];\n        keysCopy.pop();\n        setKeys(keysCopy);\n        return;\n      }\n\n      if (isPrintableCharacter(event)) {\n        var _keysCopy = keys.concat(event.key);\n\n        if (preventDefault(event)) {\n          event.preventDefault();\n          event.stopPropagation();\n        }\n\n        setKeys(_keysCopy);\n        fn(_keysCopy.join(\"\"));\n        clearKeysAfterDelay();\n      }\n    };\n  }\n\n  return onKeyDown;\n}\n//# sourceMappingURL=use-shortcut.js.map"]},"metadata":{},"sourceType":"module"}