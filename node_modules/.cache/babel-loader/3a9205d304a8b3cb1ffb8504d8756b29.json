{"ast":null,"code":"import { isNumber, memoizedGet as get } from \"@chakra-ui/utils\";\nimport { createParser, system } from \"@styled-system/core\";\n\nfunction transform(value, scale) {\n  var defaultValue = !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n  return get(scale, value, defaultValue);\n}\n\nvar config = {\n  width: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform\n  },\n  w: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform\n  },\n  height: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  h: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  boxSize: {\n    properties: [\"width\", \"height\"],\n    scale: \"sizes\"\n  },\n  minWidth: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  minW: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  minHeight: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  minH: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  maxWidth: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  maxW: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  maxHeight: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  maxH: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  d: {\n    property: \"display\"\n  },\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true\n};\n/**\n * Types for layout related CSS properties\n */\n\nexport var layout = system(config);\nexport var layoutParser = createParser(config);","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAW,IAAIC,GAAlC,QAA6C,kBAA7C;AACA,SAASC,YAAT,EAAuBC,MAAvB,QAAqC,qBAArC;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0BC,KAA1B,EAAiC;AAC/B,MAAIC,YAAY,GAAG,CAACR,QAAQ,CAACM,KAAD,CAAT,IAAoBA,KAAK,GAAG,CAA5B,GAAgCA,KAAhC,GAAwCA,KAAK,GAAG,GAAR,GAAc,GAAzE;AACA,SAAOJ,GAAG,CAACK,KAAD,EAAQD,KAAR,EAAeE,YAAf,CAAV;AACD;;AAED,IAAIC,MAAM,GAAG;AACXC,OAAK,EAAE;AACLC,YAAQ,EAAE,OADL;AAELJ,SAAK,EAAE,OAFF;AAGLF;AAHK,GADI;AAMXO,GAAC,EAAE;AACDD,YAAQ,EAAE,OADT;AAEDJ,SAAK,EAAE,OAFN;AAGDF;AAHC,GANQ;AAWXQ,QAAM,EAAE;AACNF,YAAQ,EAAE,QADJ;AAENJ,SAAK,EAAE;AAFD,GAXG;AAeXO,GAAC,EAAE;AACDH,YAAQ,EAAE,QADT;AAEDJ,SAAK,EAAE;AAFN,GAfQ;AAmBXQ,SAAO,EAAE;AACPC,cAAU,EAAE,CAAC,OAAD,EAAU,QAAV,CADL;AAEPT,SAAK,EAAE;AAFA,GAnBE;AAuBXU,UAAQ,EAAE;AACRN,YAAQ,EAAE,UADF;AAERJ,SAAK,EAAE;AAFC,GAvBC;AA2BXW,MAAI,EAAE;AACJP,YAAQ,EAAE,UADN;AAEJJ,SAAK,EAAE;AAFH,GA3BK;AA+BXY,WAAS,EAAE;AACTR,YAAQ,EAAE,WADD;AAETJ,SAAK,EAAE;AAFE,GA/BA;AAmCXa,MAAI,EAAE;AACJT,YAAQ,EAAE,WADN;AAEJJ,SAAK,EAAE;AAFH,GAnCK;AAuCXc,UAAQ,EAAE;AACRV,YAAQ,EAAE,UADF;AAERJ,SAAK,EAAE;AAFC,GAvCC;AA2CXe,MAAI,EAAE;AACJX,YAAQ,EAAE,UADN;AAEJJ,SAAK,EAAE;AAFH,GA3CK;AA+CXgB,WAAS,EAAE;AACTZ,YAAQ,EAAE,WADD;AAETJ,SAAK,EAAE;AAFE,GA/CA;AAmDXiB,MAAI,EAAE;AACJb,YAAQ,EAAE,WADN;AAEJJ,SAAK,EAAE;AAFH,GAnDK;AAuDXkB,GAAC,EAAE;AACDd,YAAQ,EAAE;AADT,GAvDQ;AA0DXe,UAAQ,EAAE,IA1DC;AA2DXC,WAAS,EAAE,IA3DA;AA4DXC,WAAS,EAAE,IA5DA;AA6DXC,SAAO,EAAE,IA7DE;AA8DXC,eAAa,EAAE,IA9DJ;AA+DXC,WAAS,EAAE;AA/DA,CAAb;AAiEA;AACA;AACA;;AAEA,OAAO,IAAIC,MAAM,GAAG5B,MAAM,CAACK,MAAD,CAAnB;AACP,OAAO,IAAIwB,YAAY,GAAG9B,YAAY,CAACM,MAAD,CAA/B","names":["isNumber","memoizedGet","get","createParser","system","transform","value","scale","defaultValue","config","width","property","w","height","h","boxSize","properties","minWidth","minW","minHeight","minH","maxWidth","maxW","maxHeight","maxH","d","overflow","overflowX","overflowY","display","verticalAlign","boxSizing","layout","layoutParser"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/skeleton/node_modules/@chakra-ui/styled-system/dist/esm/config/layout.js"],"sourcesContent":["import { isNumber, memoizedGet as get } from \"@chakra-ui/utils\";\nimport { createParser, system } from \"@styled-system/core\";\n\nfunction transform(value, scale) {\n  var defaultValue = !isNumber(value) || value > 1 ? value : value * 100 + \"%\";\n  return get(scale, value, defaultValue);\n}\n\nvar config = {\n  width: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform\n  },\n  w: {\n    property: \"width\",\n    scale: \"sizes\",\n    transform\n  },\n  height: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  h: {\n    property: \"height\",\n    scale: \"sizes\"\n  },\n  boxSize: {\n    properties: [\"width\", \"height\"],\n    scale: \"sizes\"\n  },\n  minWidth: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  minW: {\n    property: \"minWidth\",\n    scale: \"sizes\"\n  },\n  minHeight: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  minH: {\n    property: \"minHeight\",\n    scale: \"sizes\"\n  },\n  maxWidth: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  maxW: {\n    property: \"maxWidth\",\n    scale: \"sizes\"\n  },\n  maxHeight: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  maxH: {\n    property: \"maxHeight\",\n    scale: \"sizes\"\n  },\n  d: {\n    property: \"display\"\n  },\n  overflow: true,\n  overflowX: true,\n  overflowY: true,\n  display: true,\n  verticalAlign: true,\n  boxSizing: true\n};\n/**\n * Types for layout related CSS properties\n */\n\nexport var layout = system(config);\nexport var layoutParser = createParser(config);\n//# sourceMappingURL=layout.js.map"]},"metadata":{},"sourceType":"module"}