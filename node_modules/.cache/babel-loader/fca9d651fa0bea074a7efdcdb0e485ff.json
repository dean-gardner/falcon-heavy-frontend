{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { NetworkType } from '..';\nexport const getAccountBlockExplorerLinkForNetwork = (network, address) => __awaiter(void 0, void 0, void 0, function* () {\n  const urls = {\n    [NetworkType.MAINNET]: 'https://tezblock.io/account/',\n    [NetworkType.CARTHAGENET]: 'https://carthagenet.tezblock.io/account/',\n    [NetworkType.DELPHINET]: 'https://delphinet.tezblock.io/account/',\n    [NetworkType.CUSTOM]: 'https://delphinet.tezblock.io/account/'\n  };\n  const url = urls[network ? network.type : NetworkType.MAINNET];\n  return `${url}${address}`;\n});\nexport const getTransactionBlockExplorerLinkForNetwork = (network, transactionHash) => __awaiter(void 0, void 0, void 0, function* () {\n  const urls = {\n    [NetworkType.MAINNET]: 'https://tezblock.io/transaction/',\n    [NetworkType.CARTHAGENET]: 'https://carthagenet.tezblock.io/transaction/',\n    [NetworkType.DELPHINET]: 'https://delphinet.tezblock.io/transaction/',\n    [NetworkType.CUSTOM]: 'https://delphinet.tezblock.io/transaction/'\n  };\n  const url = urls[network ? network.type : NetworkType.MAINNET];\n  return `${url}${transactionHash}`;\n});","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,aAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,YAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,QAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,WAAT,QAA4B,IAA5B;AACA,OAAO,MAAMC,qCAAqC,GAAG,CAACC,OAAD,EAAUC,OAAV,KAAsBtB,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;AACtH,QAAMuB,IAAI,GAAG;AACT,KAACJ,WAAW,CAACK,OAAb,GAAuB,8BADd;AAET,KAACL,WAAW,CAACM,WAAb,GAA2B,0CAFlB;AAGT,KAACN,WAAW,CAACO,SAAb,GAAyB,wCAHhB;AAIT,KAACP,WAAW,CAACQ,MAAb,GAAsB;AAJb,GAAb;AAMA,QAAMC,GAAG,GAAGL,IAAI,CAACF,OAAO,GAAGA,OAAO,CAACQ,IAAX,GAAkBV,WAAW,CAACK,OAAtC,CAAhB;AACA,SAAQ,GAAEI,GAAI,GAAEN,OAAQ,EAAxB;AACH,CATmF,CAA7E;AAUP,OAAO,MAAMQ,yCAAyC,GAAG,CAACT,OAAD,EAAUU,eAAV,KAA8B/B,SAAS,CAAC,KAAK,CAAN,EAAS,KAAK,CAAd,EAAiB,KAAK,CAAtB,EAAyB,aAAa;AAClI,QAAMuB,IAAI,GAAG;AACT,KAACJ,WAAW,CAACK,OAAb,GAAuB,kCADd;AAET,KAACL,WAAW,CAACM,WAAb,GAA2B,8CAFlB;AAGT,KAACN,WAAW,CAACO,SAAb,GAAyB,4CAHhB;AAIT,KAACP,WAAW,CAACQ,MAAb,GAAsB;AAJb,GAAb;AAMA,QAAMC,GAAG,GAAGL,IAAI,CAACF,OAAO,GAAGA,OAAO,CAACQ,IAAX,GAAkBV,WAAW,CAACK,OAAtC,CAAhB;AACA,SAAQ,GAAEI,GAAI,GAAEG,eAAgB,EAAhC;AACH,CAT+F,CAAzF","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","NetworkType","getAccountBlockExplorerLinkForNetwork","network","address","urls","MAINNET","CARTHAGENET","DELPHINET","CUSTOM","url","type","getTransactionBlockExplorerLinkForNetwork","transactionHash"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/utils/block-explorer.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { NetworkType } from '..';\nexport const getAccountBlockExplorerLinkForNetwork = (network, address) => __awaiter(void 0, void 0, void 0, function* () {\n    const urls = {\n        [NetworkType.MAINNET]: 'https://tezblock.io/account/',\n        [NetworkType.CARTHAGENET]: 'https://carthagenet.tezblock.io/account/',\n        [NetworkType.DELPHINET]: 'https://delphinet.tezblock.io/account/',\n        [NetworkType.CUSTOM]: 'https://delphinet.tezblock.io/account/'\n    };\n    const url = urls[network ? network.type : NetworkType.MAINNET];\n    return `${url}${address}`;\n});\nexport const getTransactionBlockExplorerLinkForNetwork = (network, transactionHash) => __awaiter(void 0, void 0, void 0, function* () {\n    const urls = {\n        [NetworkType.MAINNET]: 'https://tezblock.io/transaction/',\n        [NetworkType.CARTHAGENET]: 'https://carthagenet.tezblock.io/transaction/',\n        [NetworkType.DELPHINET]: 'https://delphinet.tezblock.io/transaction/',\n        [NetworkType.CUSTOM]: 'https://delphinet.tezblock.io/transaction/'\n    };\n    const url = urls[network ? network.type : NetworkType.MAINNET];\n    return `${url}${transactionHash}`;\n});\n//# sourceMappingURL=block-explorer.js.map"]},"metadata":{},"sourceType":"module"}