{"ast":null,"code":"import { useTheme } from \"@chakra-ui/system\";\nimport { arrayToObjectNotation, fromEntries, isArray, isCustomBreakpoint } from \"@chakra-ui/utils\";\nimport { getClosestValue } from \"./media-query.utils\";\nimport { useBreakpoint } from \"./use-breakpoint\";\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nexport function useBreakpointValue(values) {\n  var breakpoint = useBreakpoint();\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints).filter(isCustomBreakpoint);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map(_ref => {\n    var [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,qBAAT,EAAgCC,WAAhC,EAA6CC,OAA7C,EAAsDC,kBAAtD,QAAgF,kBAAhF;AACA,SAASC,eAAT,QAAgC,qBAAhC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,kBAAT,CAA4BC,MAA5B,EAAoC;AACzC,MAAIC,UAAU,GAAGH,aAAa,EAA9B;AACA,MAAII,KAAK,GAAGV,QAAQ,EAApB;AACA,MAAI,CAACS,UAAL,EAAiB,OAAOE,SAAP;AACjB;AACF;AACA;;AAEE,MAAIC,WAAW,GAAGC,MAAM,CAACC,IAAP,CAAYJ,KAAK,CAACE,WAAlB,EAA+BG,MAA/B,CAAsCX,kBAAtC,CAAlB;AACA,MAAIY,GAAG,GAAGb,OAAO,CAACK,MAAD,CAAP,GAAkBN,WAAW,CAACW,MAAM,CAACI,OAAP,CAAehB,qBAAqB,CAACO,MAAD,EAASI,WAAT,CAApC,EAA2DM,GAA3D,CAAgEC,IAAD,IAAU;AAC/G,QAAI,CAACC,GAAD,EAAMC,KAAN,IAAeF,IAAnB;AACA,WAAO,CAACC,GAAD,EAAMC,KAAN,CAAP;AACD,GAHuC,CAAD,CAA7B,GAGJb,MAHN;AAIA,SAAOH,eAAe,CAACW,GAAD,EAAMP,UAAN,EAAkBG,WAAlB,CAAtB;AACD","names":["useTheme","arrayToObjectNotation","fromEntries","isArray","isCustomBreakpoint","getClosestValue","useBreakpoint","useBreakpointValue","values","breakpoint","theme","undefined","breakpoints","Object","keys","filter","obj","entries","map","_ref","key","value"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/media-query/dist/esm/use-breakpoint-value.js"],"sourcesContent":["import { useTheme } from \"@chakra-ui/system\";\nimport { arrayToObjectNotation, fromEntries, isArray, isCustomBreakpoint } from \"@chakra-ui/utils\";\nimport { getClosestValue } from \"./media-query.utils\";\nimport { useBreakpoint } from \"./use-breakpoint\";\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n */\n\nexport function useBreakpointValue(values) {\n  var breakpoint = useBreakpoint();\n  var theme = useTheme();\n  if (!breakpoint) return undefined;\n  /**\n   * Get the non-number breakpoint keys from the provided breakpoints\n   */\n\n  var breakpoints = Object.keys(theme.breakpoints).filter(isCustomBreakpoint);\n  var obj = isArray(values) ? fromEntries(Object.entries(arrayToObjectNotation(values, breakpoints)).map((_ref) => {\n    var [key, value] = _ref;\n    return [key, value];\n  })) : values;\n  return getClosestValue(obj, breakpoint, breakpoints);\n}\n//# sourceMappingURL=use-breakpoint-value.js.map"]},"metadata":{},"sourceType":"module"}