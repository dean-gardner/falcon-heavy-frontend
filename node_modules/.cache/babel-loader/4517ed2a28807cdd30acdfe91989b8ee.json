{"ast":null,"code":"import { useId as useUID } from \"@reach/auto-id\";\n\nfunction generatePrefix(prefix, id) {\n  return prefix + \"-\" + id;\n}\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\n\n\nexport function useId(idProp, prefix) {\n  var uuid = useUID();\n  var id = idProp != null ? idProp : uuid;\n  var result = prefix ? generatePrefix(prefix, id) : id;\n  return result;\n}\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\n\nexport function useIds(idProp) {\n  var id = useId(idProp);\n\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  var ids = prefixes.map(prefix => generatePrefix(prefix, id));\n  return ids;\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,IAAIC,MAAlB,QAAgC,gBAAhC;;AAEA,SAASC,cAAT,CAAwBC,MAAxB,EAAgCC,EAAhC,EAAoC;AAClC,SAAOD,MAAM,GAAG,GAAT,GAAeC,EAAtB;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,SAASJ,KAAT,CAAeK,MAAf,EAAuBF,MAAvB,EAA+B;AACpC,MAAIG,IAAI,GAAGL,MAAM,EAAjB;AACA,MAAIG,EAAE,GAAGC,MAAM,IAAI,IAAV,GAAiBA,MAAjB,GAA0BC,IAAnC;AACA,MAAIC,MAAM,GAAGJ,MAAM,GAAGD,cAAc,CAACC,MAAD,EAASC,EAAT,CAAjB,GAAgCA,EAAnD;AACA,SAAOG,MAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,MAAT,CAAgBH,MAAhB,EAAwB;AAC7B,MAAID,EAAE,GAAGJ,KAAK,CAACK,MAAD,CAAd;;AAEA,OAAK,IAAII,IAAI,GAAGC,SAAS,CAACC,MAArB,EAA6BC,QAAQ,GAAG,IAAIC,KAAJ,CAAUJ,IAAI,GAAG,CAAP,GAAWA,IAAI,GAAG,CAAlB,GAAsB,CAAhC,CAAxC,EAA4EK,IAAI,GAAG,CAAxF,EAA2FA,IAAI,GAAGL,IAAlG,EAAwGK,IAAI,EAA5G,EAAgH;AAC9GF,YAAQ,CAACE,IAAI,GAAG,CAAR,CAAR,GAAqBJ,SAAS,CAACI,IAAD,CAA9B;AACD;;AAED,MAAIC,GAAG,GAAGH,QAAQ,CAACI,GAAT,CAAab,MAAM,IAAID,cAAc,CAACC,MAAD,EAASC,EAAT,CAArC,CAAV;AACA,SAAOW,GAAP;AACD","names":["useId","useUID","generatePrefix","prefix","id","idProp","uuid","result","useIds","_len","arguments","length","prefixes","Array","_key","ids","map"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@chakra-ui/hooks/dist/esm/use-id.js"],"sourcesContent":["import { useId as useUID } from \"@reach/auto-id\";\n\nfunction generatePrefix(prefix, id) {\n  return prefix + \"-\" + id;\n}\n/**\n * Reack hook to generate unique id\n *\n * @param idProp the external id passed from the user\n * @param prefix prefix to append before the id\n */\n\n\nexport function useId(idProp, prefix) {\n  var uuid = useUID();\n  var id = idProp != null ? idProp : uuid;\n  var result = prefix ? generatePrefix(prefix, id) : id;\n  return result;\n}\n/**\n * Reack hook to generate ids for use in compound components\n *\n * @param idProp the external id passed from the user\n * @param prefixes array of prefixes to use\n *\n * @example\n *\n * ```js\n * const [buttonId, menuId] = useIds(\"52\", \"button\", \"menu\")\n *\n * // buttonId will be `button-52`\n * // menuId will be `menu-52`\n * ```\n */\n\nexport function useIds(idProp) {\n  var id = useId(idProp);\n\n  for (var _len = arguments.length, prefixes = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    prefixes[_key - 1] = arguments[_key];\n  }\n\n  var ids = prefixes.map(prefix => generatePrefix(prefix, id));\n  return ids;\n}\n//# sourceMappingURL=use-id.js.map"]},"metadata":{},"sourceType":"module"}