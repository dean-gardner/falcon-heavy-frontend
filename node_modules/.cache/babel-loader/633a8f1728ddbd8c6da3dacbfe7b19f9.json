{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\nexport const usePendingPromise = (fetcher, transformer) => {\n  _s();\n\n  const [fetching, setFetching] = useState();\n  const [error, setError] = useState();\n  const [data, setStorage] = useState();\n  useEffect(() => {\n    let isUnmounted = false;\n\n    (async () => {\n      try {\n        setFetching(true);\n        setError(undefined);\n        const result = await fetcher();\n        !isUnmounted && setStorage(transformer ? transformer(result) : result);\n      } catch (e) {\n        !isUnmounted && setError(\"Something went wrong while fetching storage: \" + e.toString());\n      } finally {\n        !isUnmounted && setFetching(false);\n      }\n    })();\n\n    return () => {\n      isUnmounted = true;\n    };\n  }, [fetcher, transformer]);\n  return {\n    fetching,\n    error,\n    data\n  };\n};\n\n_s(usePendingPromise, \"B98hMKohF9LalBymFdqCGwzuGtg=\");","map":{"version":3,"sources":["D:/work/projects/plenty/falcon-heavy-frontend/src/hooks/usePendingPromise.ts"],"names":["useState","useEffect","usePendingPromise","fetcher","transformer","fetching","setFetching","error","setError","data","setStorage","isUnmounted","undefined","result","e","toString"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAC/BC,OAD+B,EAE/BC,WAF+B,KAG5B;AAAA;;AACH,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BN,QAAQ,EAAxC;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBR,QAAQ,EAAlC;AACA,QAAM,CAACS,IAAD,EAAOC,UAAP,IAAqBV,QAAQ,EAAnC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIU,WAAW,GAAG,KAAlB;;AACA,KAAC,YAAY;AACX,UAAI;AACFL,QAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,QAAAA,QAAQ,CAACI,SAAD,CAAR;AAEA,cAAMC,MAAM,GAAG,MAAMV,OAAO,EAA5B;AACA,SAACQ,WAAD,IAAgBD,UAAU,CAACN,WAAW,GAAGA,WAAW,CAACS,MAAD,CAAd,GAAyBA,MAArC,CAA1B;AACD,OAND,CAME,OAAOC,CAAP,EAAU;AACV,SAACH,WAAD,IACEH,QAAQ,CACN,kDAAkDM,CAAC,CAACC,QAAF,EAD5C,CADV;AAID,OAXD,SAWU;AACR,SAACJ,WAAD,IAAgBL,WAAW,CAAC,KAAD,CAA3B;AACD;AACF,KAfD;;AAiBA,WAAO,MAAM;AACXK,MAAAA,WAAW,GAAG,IAAd;AACD,KAFD;AAGD,GAtBQ,EAsBN,CAACR,OAAD,EAAUC,WAAV,CAtBM,CAAT;AAwBA,SAAO;AAAEC,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACD,CAjCM;;GAAMP,iB","sourcesContent":["import { useState, useEffect } from \"react\";\n\nexport const usePendingPromise = <T extends unknown>(\n  fetcher: () => Promise<T>,\n  transformer?: (result: T) => any\n) => {\n  const [fetching, setFetching] = useState<boolean>();\n  const [error, setError] = useState<string>();\n  const [data, setStorage] = useState<string>();\n\n  useEffect(() => {\n    let isUnmounted = false;\n    (async () => {\n      try {\n        setFetching(true);\n        setError(undefined);\n\n        const result = await fetcher();\n        !isUnmounted && setStorage(transformer ? transformer(result) : result);\n      } catch (e) {\n        !isUnmounted &&\n          setError(\n            \"Something went wrong while fetching storage: \" + e.toString()\n          );\n      } finally {\n        !isUnmounted && setFetching(false);\n      }\n    })();\n\n    return () => {\n      isUnmounted = true;\n    };\n  }, [fetcher, transformer]);\n\n  return { fetching, error, data };\n};\n"]},"metadata":{},"sourceType":"module"}