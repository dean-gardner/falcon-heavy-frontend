{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return function (source) {\n    return source.lift(new SampleTimeOperator(period, scheduler));\n  };\n}\n\nvar SampleTimeOperator = /*@__PURE__*/function () {\n  function SampleTimeOperator(period, scheduler) {\n    this.period = period;\n    this.scheduler = scheduler;\n  }\n\n  SampleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  };\n\n  return SampleTimeOperator;\n}();\n\nvar SampleTimeSubscriber = /*@__PURE__*/function (_super) {\n  tslib_1.__extends(SampleTimeSubscriber, _super);\n\n  function SampleTimeSubscriber(destination, period, scheduler) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.period = period;\n    _this.scheduler = scheduler;\n    _this.hasValue = false;\n\n    _this.add(scheduler.schedule(dispatchNotification, period, {\n      subscriber: _this,\n      period: period\n    }));\n\n    return _this;\n  }\n\n  SampleTimeSubscriber.prototype._next = function (value) {\n    this.lastValue = value;\n    this.hasValue = true;\n  };\n\n  SampleTimeSubscriber.prototype.notifyNext = function () {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  };\n\n  return SampleTimeSubscriber;\n}(Subscriber);\n\nfunction dispatchNotification(state) {\n  var subscriber = state.subscriber,\n      period = state.period;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAO,KAAKA,OAAZ,MAAyB,OAAzB;AACA,SAASC,UAAT,QAA2B,eAA3B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,SAA5B,EAAuC;AAC1C,MAAIA,SAAS,KAAK,KAAK,CAAvB,EAA0B;AACtBA,aAAS,GAAGH,KAAZ;AACH;;AACD,SAAO,UAAUI,MAAV,EAAkB;AAAE,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBJ,MAAvB,EAA+BC,SAA/B,CAAZ,CAAP;AAAgE,GAA3F;AACH;;AACD,IAAIG,kBAAkB,GAAG,aAAe,YAAY;AAChD,WAASA,kBAAT,CAA4BJ,MAA5B,EAAoCC,SAApC,EAA+C;AAC3C,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AACDG,oBAAkB,CAACC,SAAnB,CAA6BC,IAA7B,GAAoC,UAAUC,UAAV,EAAsBL,MAAtB,EAA8B;AAC9D,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKP,MAA1C,EAAkD,KAAKC,SAAvD,CAAjB,CAAP;AACH,GAFD;;AAGA,SAAOG,kBAAP;AACH,CATuC,EAAxC;;AAUA,IAAIK,oBAAoB,GAAG,aAAe,UAAUC,MAAV,EAAkB;AACxDd,SAAO,CAACe,SAAR,CAAkBF,oBAAlB,EAAwCC,MAAxC;;AACA,WAASD,oBAAT,CAA8BG,WAA9B,EAA2CZ,MAA3C,EAAmDC,SAAnD,EAA8D;AAC1D,QAAIY,KAAK,GAAGH,MAAM,CAACJ,IAAP,CAAY,IAAZ,EAAkBM,WAAlB,KAAkC,IAA9C;;AACAC,SAAK,CAACb,MAAN,GAAeA,MAAf;AACAa,SAAK,CAACZ,SAAN,GAAkBA,SAAlB;AACAY,SAAK,CAACC,QAAN,GAAiB,KAAjB;;AACAD,SAAK,CAACE,GAAN,CAAUd,SAAS,CAACe,QAAV,CAAmBC,oBAAnB,EAAyCjB,MAAzC,EAAiD;AAAEO,gBAAU,EAAEM,KAAd;AAAqBb,YAAM,EAAEA;AAA7B,KAAjD,CAAV;;AACA,WAAOa,KAAP;AACH;;AACDJ,sBAAoB,CAACJ,SAArB,CAA+Ba,KAA/B,GAAuC,UAAUC,KAAV,EAAiB;AACpD,SAAKC,SAAL,GAAiBD,KAAjB;AACA,SAAKL,QAAL,GAAgB,IAAhB;AACH,GAHD;;AAIAL,sBAAoB,CAACJ,SAArB,CAA+BgB,UAA/B,GAA4C,YAAY;AACpD,QAAI,KAAKP,QAAT,EAAmB;AACf,WAAKA,QAAL,GAAgB,KAAhB;AACA,WAAKF,WAAL,CAAiBU,IAAjB,CAAsB,KAAKF,SAA3B;AACH;AACJ,GALD;;AAMA,SAAOX,oBAAP;AACH,CArByC,CAqBxCZ,UArBwC,CAA1C;;AAsBA,SAASoB,oBAAT,CAA8BM,KAA9B,EAAqC;AACjC,MAAIhB,UAAU,GAAGgB,KAAK,CAAChB,UAAvB;AAAA,MAAmCP,MAAM,GAAGuB,KAAK,CAACvB,MAAlD;AACAO,YAAU,CAACc,UAAX;AACA,OAAKL,QAAL,CAAcO,KAAd,EAAqBvB,MAArB;AACH","names":["tslib_1","Subscriber","async","sampleTime","period","scheduler","source","lift","SampleTimeOperator","prototype","call","subscriber","subscribe","SampleTimeSubscriber","_super","__extends","destination","_this","hasValue","add","schedule","dispatchNotification","_next","value","lastValue","notifyNext","next","state"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/rxjs/_esm5/internal/operators/sampleTime.js"],"sourcesContent":["/** PURE_IMPORTS_START tslib,_Subscriber,_scheduler_async PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return function (source) { return source.lift(new SampleTimeOperator(period, scheduler)); };\n}\nvar SampleTimeOperator = /*@__PURE__*/ (function () {\n    function SampleTimeOperator(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    SampleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    };\n    return SampleTimeOperator;\n}());\nvar SampleTimeSubscriber = /*@__PURE__*/ (function (_super) {\n    tslib_1.__extends(SampleTimeSubscriber, _super);\n    function SampleTimeSubscriber(destination, period, scheduler) {\n        var _this = _super.call(this, destination) || this;\n        _this.period = period;\n        _this.scheduler = scheduler;\n        _this.hasValue = false;\n        _this.add(scheduler.schedule(dispatchNotification, period, { subscriber: _this, period: period }));\n        return _this;\n    }\n    SampleTimeSubscriber.prototype._next = function (value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    };\n    SampleTimeSubscriber.prototype.notifyNext = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    };\n    return SampleTimeSubscriber;\n}(Subscriber));\nfunction dispatchNotification(state) {\n    var subscriber = state.subscriber, period = state.period;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n//# sourceMappingURL=sampleTime.js.map\n"]},"metadata":{},"sourceType":"module"}