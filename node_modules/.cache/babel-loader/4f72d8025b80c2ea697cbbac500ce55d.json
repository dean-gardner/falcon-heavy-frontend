{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\nexport class MatrixEventService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.cachedPromises = new Map();\n  }\n\n  sync(accessToken, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return this.withCache('sync', () => this.httpClient.get('/sync', {\n        timeout: options ? options.pollingTimeout : undefined,\n        since: options ? options.syncToken : undefined\n      }, {\n        accessToken\n      }));\n    });\n  }\n\n  sendMessage(accessToken, room, content, txnId) {\n    return __awaiter(this, void 0, void 0, function* () {\n      return new Promise((resolve, reject) => this.scheduleEvent({\n        accessToken,\n        room,\n        type: 'm.room.message',\n        content,\n        txnId,\n        onSuccess: resolve,\n        onError: reject\n      }));\n    });\n  }\n\n  scheduleEvent(event) {\n    // TODO: actual scheduling\n    this.sendEvent(event);\n  }\n\n  sendEvent(scheduledEvent) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        room,\n        type,\n        txnId,\n        content,\n        accessToken\n      } = scheduledEvent;\n\n      if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n        return Promise.reject(`User is not a member of room ${room.id}.`);\n      }\n\n      try {\n        const response = yield this.httpClient.put(`/rooms/${room.id}/send/${type}/${txnId}`, content, {\n          accessToken\n        });\n        scheduledEvent.onSuccess(response);\n      } catch (error) {\n        scheduledEvent.onError(error);\n      }\n    });\n  }\n\n  withCache(key, promiseProvider) {\n    let promise = this.cachedPromises.get(key);\n\n    if (!promise) {\n      promise = promiseProvider().finally(() => {\n        this.cachedPromises.delete(key);\n      });\n      this.cachedPromises.set(key, promise);\n    }\n\n    return promise;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,OAAV,EAAmBC,UAAnB,EAA+BC,CAA/B,EAAkCC,SAAlC,EAA6C;AACrF,WAASC,KAAT,CAAeC,KAAf,EAAsB;AAAE,WAAOA,KAAK,YAAYH,CAAjB,GAAqBG,KAArB,GAA6B,IAAIH,CAAJ,CAAM,UAAUI,OAAV,EAAmB;AAAEA,aAAO,CAACD,KAAD,CAAP;AAAiB,KAA5C,CAApC;AAAoF;;AAC5G,SAAO,KAAKH,CAAC,KAAKA,CAAC,GAAGK,OAAT,CAAN,EAAyB,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AACvD,aAASC,SAAT,CAAmBJ,KAAnB,EAA0B;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAACQ,IAAV,CAAeN,KAAf,CAAD,CAAJ;AAA8B,OAApC,CAAqC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC3F,aAASC,QAAT,CAAkBR,KAAlB,EAAyB;AAAE,UAAI;AAAEK,YAAI,CAACP,SAAS,CAAC,OAAD,CAAT,CAAmBE,KAAnB,CAAD,CAAJ;AAAkC,OAAxC,CAAyC,OAAOO,CAAP,EAAU;AAAEJ,cAAM,CAACI,CAAD,CAAN;AAAY;AAAE;;AAC9F,aAASF,IAAT,CAAcI,MAAd,EAAsB;AAAEA,YAAM,CAACC,IAAP,GAAcT,OAAO,CAACQ,MAAM,CAACT,KAAR,CAArB,GAAsCD,KAAK,CAACU,MAAM,CAACT,KAAR,CAAL,CAAoBW,IAApB,CAAyBP,SAAzB,EAAoCI,QAApC,CAAtC;AAAsF;;AAC9GH,QAAI,CAAC,CAACP,SAAS,GAAGA,SAAS,CAACc,KAAV,CAAgBjB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAb,EAAyDU,IAAzD,EAAD,CAAJ;AACH,GALM,CAAP;AAMH,CARD;;AASA,SAASO,gBAAT,QAAiC,sBAAjC;AACA,OAAO,MAAMC,kBAAN,CAAyB;AAC5BC,aAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsB,IAAIC,GAAJ,EAAtB;AACH;;AACDC,MAAI,CAACC,WAAD,EAAcC,OAAd,EAAuB;AACvB,WAAO3B,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,aAAO,KAAK4B,SAAL,CAAe,MAAf,EAAuB,MAAM,KAAKN,UAAL,CAAgBO,GAAhB,CAAoB,OAApB,EAA6B;AAC7DC,eAAO,EAAEH,OAAO,GAAGA,OAAO,CAACI,cAAX,GAA4BC,SADiB;AAE7DC,aAAK,EAAEN,OAAO,GAAGA,OAAO,CAACO,SAAX,GAAuBF;AAFwB,OAA7B,EAGjC;AAAEN;AAAF,OAHiC,CAA7B,CAAP;AAIH,KALe,CAAhB;AAMH;;AACDS,aAAW,CAACT,WAAD,EAAcU,IAAd,EAAoBC,OAApB,EAA6BC,KAA7B,EAAoC;AAC3C,WAAOtC,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,aAAO,IAAIQ,OAAJ,CAAY,CAACD,OAAD,EAAUE,MAAV,KAAqB,KAAK8B,aAAL,CAAmB;AACvDb,mBADuD;AAEvDU,YAFuD;AAGvDI,YAAI,EAAE,gBAHiD;AAIvDH,eAJuD;AAKvDC,aALuD;AAMvDG,iBAAS,EAAElC,OAN4C;AAOvDmC,eAAO,EAAEjC;AAP8C,OAAnB,CAAjC,CAAP;AASH,KAVe,CAAhB;AAWH;;AACD8B,eAAa,CAACI,KAAD,EAAQ;AACjB;AACA,SAAKC,SAAL,CAAeD,KAAf;AACH;;AACDC,WAAS,CAACC,cAAD,EAAiB;AACtB,WAAO7C,SAAS,CAAC,IAAD,EAAO,KAAK,CAAZ,EAAe,KAAK,CAApB,EAAuB,aAAa;AAChD,YAAM;AAAEoC,YAAF;AAAQI,YAAR;AAAcF,aAAd;AAAqBD,eAArB;AAA8BX;AAA9B,UAA8CmB,cAApD;;AACA,UAAIT,IAAI,CAACU,MAAL,KAAgB3B,gBAAgB,CAAC4B,MAAjC,IAA2CX,IAAI,CAACU,MAAL,KAAgB3B,gBAAgB,CAAC6B,OAAhF,EAAyF;AACrF,eAAOxC,OAAO,CAACC,MAAR,CAAgB,gCAA+B2B,IAAI,CAACa,EAAG,GAAvD,CAAP;AACH;;AACD,UAAI;AACA,cAAMC,QAAQ,GAAG,MAAM,KAAK5B,UAAL,CAAgB6B,GAAhB,CAAqB,UAASf,IAAI,CAACa,EAAG,SAAQT,IAAK,IAAGF,KAAM,EAA5D,EAA+DD,OAA/D,EAAwE;AAAEX;AAAF,SAAxE,CAAvB;AACAmB,sBAAc,CAACJ,SAAf,CAAyBS,QAAzB;AACH,OAHD,CAIA,OAAOE,KAAP,EAAc;AACVP,sBAAc,CAACH,OAAf,CAAuBU,KAAvB;AACH;AACJ,KAZe,CAAhB;AAaH;;AACDxB,WAAS,CAACyB,GAAD,EAAMC,eAAN,EAAuB;AAC5B,QAAIC,OAAO,GAAG,KAAKhC,cAAL,CAAoBM,GAApB,CAAwBwB,GAAxB,CAAd;;AACA,QAAI,CAACE,OAAL,EAAc;AACVA,aAAO,GAAGD,eAAe,GAAGE,OAAlB,CAA0B,MAAM;AACtC,aAAKjC,cAAL,CAAoBkC,MAApB,CAA2BJ,GAA3B;AACH,OAFS,CAAV;AAGA,WAAK9B,cAAL,CAAoBmC,GAApB,CAAwBL,GAAxB,EAA6BE,OAA7B;AACH;;AACD,WAAOA,OAAP;AACH;;AAtD2B","names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","MatrixRoomStatus","MatrixEventService","constructor","httpClient","cachedPromises","Map","sync","accessToken","options","withCache","get","timeout","pollingTimeout","undefined","since","syncToken","sendMessage","room","content","txnId","scheduleEvent","type","onSuccess","onError","event","sendEvent","scheduledEvent","status","JOINED","UNKNOWN","id","response","put","error","key","promiseProvider","promise","finally","delete","set"],"sourceRoot":"","sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@airgap/beacon-sdk/dist/esm/matrix-client/services/MatrixEventService.js"],"sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { MatrixRoomStatus } from '../models/MatrixRoom';\nexport class MatrixEventService {\n    constructor(httpClient) {\n        this.httpClient = httpClient;\n        this.cachedPromises = new Map();\n    }\n    sync(accessToken, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.withCache('sync', () => this.httpClient.get('/sync', {\n                timeout: options ? options.pollingTimeout : undefined,\n                since: options ? options.syncToken : undefined\n            }, { accessToken }));\n        });\n    }\n    sendMessage(accessToken, room, content, txnId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => this.scheduleEvent({\n                accessToken,\n                room,\n                type: 'm.room.message',\n                content,\n                txnId,\n                onSuccess: resolve,\n                onError: reject\n            }));\n        });\n    }\n    scheduleEvent(event) {\n        // TODO: actual scheduling\n        this.sendEvent(event);\n    }\n    sendEvent(scheduledEvent) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { room, type, txnId, content, accessToken } = scheduledEvent;\n            if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {\n                return Promise.reject(`User is not a member of room ${room.id}.`);\n            }\n            try {\n                const response = yield this.httpClient.put(`/rooms/${room.id}/send/${type}/${txnId}`, content, { accessToken });\n                scheduledEvent.onSuccess(response);\n            }\n            catch (error) {\n                scheduledEvent.onError(error);\n            }\n        });\n    }\n    withCache(key, promiseProvider) {\n        let promise = this.cachedPromises.get(key);\n        if (!promise) {\n            promise = promiseProvider().finally(() => {\n                this.cachedPromises.delete(key);\n            });\n            this.cachedPromises.set(key, promise);\n        }\n        return promise;\n    }\n}\n//# sourceMappingURL=MatrixEventService.js.map"]},"metadata":{},"sourceType":"module"}