{"ast":null,"code":"/**\r\n * Hypertext Transfer Protocol (HTTP) response status codes.\r\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\r\n */\nvar STATUS_CODE;\n\n(function (STATUS_CODE) {\n  /**\r\n   * The server has received the request headers and the client should proceed to send the request body\r\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\r\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\r\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\r\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\r\n   */\n  STATUS_CODE[STATUS_CODE[\"CONTINUE\"] = 100] = \"CONTINUE\";\n  /**\r\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SWITCHING_PROTOCOLS\"] = 101] = \"SWITCHING_PROTOCOLS\";\n  /**\r\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\r\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\r\n   * This prevents the client from timing out and assuming the request was lost.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PROCESSING\"] = 102] = \"PROCESSING\";\n  /**\r\n   * Standard response for successful HTTP requests.\r\n   * The actual response will depend on the request method used.\r\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\r\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"OK\"] = 200] = \"OK\";\n  /**\r\n   * The request has been fulfilled, resulting in the creation of a new resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"CREATED\"] = 201] = \"CREATED\";\n  /**\r\n   * The request has been accepted for processing, but the processing has not been completed.\r\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"ACCEPTED\"] = 202] = \"ACCEPTED\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * The server is a transforming proxy that received a 200 OK from its origin,\r\n   * but is returning a modified version of the origin's response.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NON_AUTHORITATIVE_INFORMATION\"] = 203] = \"NON_AUTHORITATIVE_INFORMATION\";\n  /**\r\n   * The server successfully processed the request and is not returning any content.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NO_CONTENT\"] = 204] = \"NO_CONTENT\";\n  /**\r\n   * The server successfully processed the request, but is not returning any content.\r\n   * Unlike a 204 response, this response requires that the requester reset the document view.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"RESET_CONTENT\"] = 205] = \"RESET_CONTENT\";\n  /**\r\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\r\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\r\n   * or split a download into multiple simultaneous streams.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PARTIAL_CONTENT\"] = 206] = \"PARTIAL_CONTENT\";\n  /**\r\n   * The message body that follows is an XML message and can contain a number of separate response codes,\r\n   * depending on how many sub-requests were made.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MULTI_STATUS\"] = 207] = \"MULTI_STATUS\";\n  /**\r\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\r\n   * and are not being included again.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"ALREADY_REPORTED\"] = 208] = \"ALREADY_REPORTED\";\n  /**\r\n   * The server has fulfilled a request for the resource,\r\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"IM_USED\"] = 226] = \"IM_USED\";\n  /**\r\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\r\n   * For example, this code could be used to present multiple video format options,\r\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MULTIPLE_CHOICES\"] = 300] = \"MULTIPLE_CHOICES\";\n  /**\r\n   * This and all future requests should be directed to the given URI.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MOVED_PERMANENTLY\"] = 301] = \"MOVED_PERMANENTLY\";\n  /**\r\n   * This is an example of industry practice contradicting the standard.\r\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\r\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\r\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\r\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\r\n   * use the 302 status code as if it were the 303.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"FOUND\"] = 302] = \"FOUND\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * The response to the request can be found under another URI using a GET method.\r\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\r\n   * the server has received the data and should issue a redirect with a separate GET message.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SEE_OTHER\"] = 303] = \"SEE_OTHER\";\n  /**\r\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\r\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_MODIFIED\"] = 304] = \"NOT_MODIFIED\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\r\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"USE_PROXY\"] = 305] = \"USE_PROXY\";\n  /**\r\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SWITCH_PROXY\"] = 306] = \"SWITCH_PROXY\";\n  /**\r\n   * SINCE HTTP/1.1\r\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\r\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\r\n   * For example, a POST request should be repeated using another POST request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"TEMPORARY_REDIRECT\"] = 307] = \"TEMPORARY_REDIRECT\";\n  /**\r\n   * The request and all future requests should be repeated using another URI.\r\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\r\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PERMANENT_REDIRECT\"] = 308] = \"PERMANENT_REDIRECT\";\n  /**\r\n   * The server cannot or will not process the request due to an apparent client error\r\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\n  /**\r\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\r\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\r\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\r\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNAUTHORIZED\"] = 401] = \"UNAUTHORIZED\";\n  /**\r\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\r\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\r\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PAYMENT_REQUIRED\"] = 402] = \"PAYMENT_REQUIRED\";\n  /**\r\n   * The request was valid, but the server is refusing action.\r\n   * The user might not have the necessary permissions for a resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"FORBIDDEN\"] = 403] = \"FORBIDDEN\";\n  /**\r\n   * The requested resource could not be found but may be available in the future.\r\n   * Subsequent requests by the client are permissible.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\n  /**\r\n   * A request method is not supported for the requested resource;\r\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"METHOD_NOT_ALLOWED\"] = 405] = \"METHOD_NOT_ALLOWED\";\n  /**\r\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_ACCEPTABLE\"] = 406] = \"NOT_ACCEPTABLE\";\n  /**\r\n   * The client must first authenticate itself with the proxy.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PROXY_AUTHENTICATION_REQUIRED\"] = 407] = \"PROXY_AUTHENTICATION_REQUIRED\";\n  /**\r\n   * The server timed out waiting for the request.\r\n   * According to HTTP specifications:\r\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"REQUEST_TIMEOUT\"] = 408] = \"REQUEST_TIMEOUT\";\n  /**\r\n   * Indicates that the request could not be processed because of conflict in the request,\r\n   * such as an edit conflict between multiple simultaneous updates.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"CONFLICT\"] = 409] = \"CONFLICT\";\n  /**\r\n   * Indicates that the resource requested is no longer available and will not be available again.\r\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\r\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\r\n   * Clients such as search engines should remove the resource from their indices.\r\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"GONE\"] = 410] = \"GONE\";\n  /**\r\n   * The request did not specify the length of its content, which is required by the requested resource.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"LENGTH_REQUIRED\"] = 411] = \"LENGTH_REQUIRED\";\n  /**\r\n   * The server does not meet one of the preconditions that the requester put on the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PRECONDITION_FAILED\"] = 412] = \"PRECONDITION_FAILED\";\n  /**\r\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PAYLOAD_TOO_LARGE\"] = 413] = \"PAYLOAD_TOO_LARGE\";\n  /**\r\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\r\n   * in which case it should be converted to a POST request.\r\n   * Called \"Request-URI Too Long\" previously.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"URI_TOO_LONG\"] = 414] = \"URI_TOO_LONG\";\n  /**\r\n   * The request entity has a media type which the server or resource does not support.\r\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNSUPPORTED_MEDIA_TYPE\"] = 415] = \"UNSUPPORTED_MEDIA_TYPE\";\n  /**\r\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\r\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\r\n   * Called \"Requested Range Not Satisfiable\" previously.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"RANGE_NOT_SATISFIABLE\"] = 416] = \"RANGE_NOT_SATISFIABLE\";\n  /**\r\n   * The server cannot meet the requirements of the Expect request-header field.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"EXPECTATION_FAILED\"] = 417] = \"EXPECTATION_FAILED\";\n  /**\r\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\r\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\r\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"I_AM_A_TEAPOT\"] = 418] = \"I_AM_A_TEAPOT\";\n  /**\r\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"MISDIRECTED_REQUEST\"] = 421] = \"MISDIRECTED_REQUEST\";\n  /**\r\n   * The request was well-formed but was unable to be followed due to semantic errors.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNPROCESSABLE_ENTITY\"] = 422] = \"UNPROCESSABLE_ENTITY\";\n  /**\r\n   * The resource that is being accessed is locked.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"LOCKED\"] = 423] = \"LOCKED\";\n  /**\r\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"FAILED_DEPENDENCY\"] = 424] = \"FAILED_DEPENDENCY\";\n  /**\r\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UPGRADE_REQUIRED\"] = 426] = \"UPGRADE_REQUIRED\";\n  /**\r\n   * The origin server requires the request to be conditional.\r\n   * Intended to prevent \"the 'lost update' problem, where a client\r\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\r\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"PRECONDITION_REQUIRED\"] = 428] = \"PRECONDITION_REQUIRED\";\n  /**\r\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\n  /**\r\n   * The server is unwilling to process the request because either an individual header field,\r\n   * or all the header fields collectively, are too large.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"REQUEST_HEADER_FIELDS_TOO_LARGE\"] = 431] = \"REQUEST_HEADER_FIELDS_TOO_LARGE\";\n  /**\r\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\r\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"UNAVAILABLE_FOR_LEGAL_REASONS\"] = 451] = \"UNAVAILABLE_FOR_LEGAL_REASONS\";\n  /**\r\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\n  /**\r\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\r\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_IMPLEMENTED\"] = 501] = \"NOT_IMPLEMENTED\";\n  /**\r\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"BAD_GATEWAY\"] = 502] = \"BAD_GATEWAY\";\n  /**\r\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\r\n   * Generally, this is a temporary state.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"SERVICE_UNAVAILABLE\"] = 503] = \"SERVICE_UNAVAILABLE\";\n  /**\r\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"GATEWAY_TIMEOUT\"] = 504] = \"GATEWAY_TIMEOUT\";\n  /**\r\n   * The server does not support the HTTP protocol version used in the request\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"HTTP_VERSION_NOT_SUPPORTED\"] = 505] = \"HTTP_VERSION_NOT_SUPPORTED\";\n  /**\r\n   * Transparent content negotiation for the request results in a circular reference.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"VARIANT_ALSO_NEGOTIATES\"] = 506] = \"VARIANT_ALSO_NEGOTIATES\";\n  /**\r\n   * The server is unable to store the representation needed to complete the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"INSUFFICIENT_STORAGE\"] = 507] = \"INSUFFICIENT_STORAGE\";\n  /**\r\n   * The server detected an infinite loop while processing the request.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"LOOP_DETECTED\"] = 508] = \"LOOP_DETECTED\";\n  /**\r\n   * Further extensions to the request are required for the server to fulfill it.\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NOT_EXTENDED\"] = 510] = \"NOT_EXTENDED\";\n  /**\r\n   * The client needs to authenticate to gain network access.\r\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\r\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\r\n   */\n\n  STATUS_CODE[STATUS_CODE[\"NETWORK_AUTHENTICATION_REQUIRED\"] = 511] = \"NETWORK_AUTHENTICATION_REQUIRED\";\n})(STATUS_CODE || (STATUS_CODE = {})); // tslint:disable: strict-type-predicates\n\n\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null; // tslint:enable: strict-type-predicates\n\nvar XMLHttpRequestCTOR = isNode ? require('xhr2-cookies').XMLHttpRequest : XMLHttpRequest;\nvar defaultTimeout = 30000;\n\nvar HttpResponseError =\n/** @class */\nfunction () {\n  function HttpResponseError(message, status, statusText, body, url) {\n    this.message = message;\n    this.status = status;\n    this.statusText = statusText;\n    this.body = body;\n    this.url = url;\n    this.name = 'HttpResponse';\n  }\n\n  return HttpResponseError;\n}();\n\nvar HttpRequestFailed =\n/** @class */\nfunction () {\n  function HttpRequestFailed(url, innerEvent) {\n    this.url = url;\n    this.innerEvent = innerEvent;\n    this.name = 'HttpRequestFailed';\n    this.message = \"Request to \" + url + \" failed\";\n  }\n\n  return HttpRequestFailed;\n}();\n\nvar HttpBackend =\n/** @class */\nfunction () {\n  function HttpBackend() {}\n\n  HttpBackend.prototype.serialize = function (obj) {\n    if (!obj) {\n      return '';\n    }\n\n    var str = [];\n\n    var _loop_1 = function (p) {\n      if (obj.hasOwnProperty(p) && obj[p]) {\n        var prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p]; // query arguments can have no value so we need some way of handling that\n        // example https://domain.com/query?all\n\n        if (prop === null) {\n          str.push(encodeURIComponent(p));\n          return \"continue\";\n        } // another use case is multiple arguments with the same name\n        // they are passed as array\n\n\n        if (Array.isArray(prop)) {\n          prop.forEach(function (item) {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\n          });\n          return \"continue\";\n        }\n\n        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\n      }\n    };\n\n    for (var p in obj) {\n      _loop_1(p);\n    }\n\n    var serialized = str.join('&');\n\n    if (serialized) {\n      return \"?\" + serialized;\n    } else {\n      return '';\n    }\n  };\n\n  HttpBackend.prototype.createXHR = function () {\n    return new XMLHttpRequestCTOR();\n  };\n  /**\r\n   *\r\n   * @param options contains options to be passed for the HTTP request (url, method and timeout)\r\n   */\n\n\n  HttpBackend.prototype.createRequest = function (_a, data) {\n    var _this = this;\n\n    var url = _a.url,\n        method = _a.method,\n        timeout = _a.timeout,\n        query = _a.query,\n        _b = _a.headers,\n        headers = _b === void 0 ? {} : _b,\n        _c = _a.json,\n        json = _c === void 0 ? true : _c;\n    return new Promise(function (resolve, reject) {\n      var request = _this.createXHR();\n\n      request.open(method || 'GET', \"\" + url + _this.serialize(query));\n      request.setRequestHeader('Content-Type', 'application/json');\n\n      for (var k in headers) {\n        request.setRequestHeader(k, headers[k]);\n      }\n\n      request.timeout = timeout || defaultTimeout;\n\n      request.onload = function () {\n        if (this.status >= 200 && this.status < 300) {\n          if (json) {\n            try {\n              resolve(JSON.parse(request.response));\n            } catch (ex) {\n              reject(new Error(\"Unable to parse response: \" + request.response));\n            }\n          } else {\n            resolve(request.response);\n          }\n        } else {\n          reject(new HttpResponseError(\"Http error response: (\" + this.status + \") \" + request.response, this.status, request.statusText, request.response, url));\n        }\n      };\n\n      request.ontimeout = function () {\n        reject(new Error(\"Request timed out after: \" + request.timeout + \"ms\"));\n      };\n\n      request.onerror = function (err) {\n        reject(new HttpRequestFailed(url, err));\n      };\n\n      if (data) {\n        var dataStr = JSON.stringify(data);\n        request.send(dataStr);\n      } else {\n        request.send();\n      }\n    });\n  };\n\n  return HttpBackend;\n}();\n\nexport { HttpBackend, HttpRequestFailed, HttpResponseError, STATUS_CODE };","map":{"version":3,"mappings":"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","names":["STATUS_CODE","isNode","process","versions","node","XMLHttpRequestCTOR","require","XMLHttpRequest","defaultTimeout","HttpResponseError","message","status","statusText","body","url","name","HttpRequestFailed","innerEvent","HttpBackend","prototype","serialize","obj","str","_loop_1","p","hasOwnProperty","prop","toJSON","push","encodeURIComponent","Array","isArray","forEach","item","serialized","join","createXHR","createRequest","_a","data","_this","method","timeout","query","_b","headers","_c","json","Promise","resolve","reject","request","open","setRequestHeader","k","onload","JSON","parse","response","ex","Error","ontimeout","onerror","err","dataStr","stringify","send"],"sources":["D:/work/projects/plenty/falcon-heavy-frontend/node_modules/@taquito/http-utils/dist/taquito-http-utils.es5.js"],"sourcesContent":["/**\r\n * Hypertext Transfer Protocol (HTTP) response status codes.\r\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\r\n */\r\nvar STATUS_CODE;\r\n(function (STATUS_CODE) {\r\n    /**\r\n     * The server has received the request headers and the client should proceed to send the request body\r\n     * (in the case of a request for which a body needs to be sent; for example, a POST request).\r\n     * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\r\n     * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\r\n     * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"CONTINUE\"] = 100] = \"CONTINUE\";\r\n    /**\r\n     * The requester has asked the server to switch protocols and the server has agreed to do so.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"SWITCHING_PROTOCOLS\"] = 101] = \"SWITCHING_PROTOCOLS\";\r\n    /**\r\n     * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\r\n     * This code indicates that the server has received and is processing the request, but no response is available yet.\r\n     * This prevents the client from timing out and assuming the request was lost.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PROCESSING\"] = 102] = \"PROCESSING\";\r\n    /**\r\n     * Standard response for successful HTTP requests.\r\n     * The actual response will depend on the request method used.\r\n     * In a GET request, the response will contain an entity corresponding to the requested resource.\r\n     * In a POST request, the response will contain an entity describing or containing the result of the action.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"OK\"] = 200] = \"OK\";\r\n    /**\r\n     * The request has been fulfilled, resulting in the creation of a new resource.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"CREATED\"] = 201] = \"CREATED\";\r\n    /**\r\n     * The request has been accepted for processing, but the processing has not been completed.\r\n     * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"ACCEPTED\"] = 202] = \"ACCEPTED\";\r\n    /**\r\n     * SINCE HTTP/1.1\r\n     * The server is a transforming proxy that received a 200 OK from its origin,\r\n     * but is returning a modified version of the origin's response.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NON_AUTHORITATIVE_INFORMATION\"] = 203] = \"NON_AUTHORITATIVE_INFORMATION\";\r\n    /**\r\n     * The server successfully processed the request and is not returning any content.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NO_CONTENT\"] = 204] = \"NO_CONTENT\";\r\n    /**\r\n     * The server successfully processed the request, but is not returning any content.\r\n     * Unlike a 204 response, this response requires that the requester reset the document view.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"RESET_CONTENT\"] = 205] = \"RESET_CONTENT\";\r\n    /**\r\n     * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\r\n     * The range header is used by HTTP clients to enable resuming of interrupted downloads,\r\n     * or split a download into multiple simultaneous streams.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PARTIAL_CONTENT\"] = 206] = \"PARTIAL_CONTENT\";\r\n    /**\r\n     * The message body that follows is an XML message and can contain a number of separate response codes,\r\n     * depending on how many sub-requests were made.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"MULTI_STATUS\"] = 207] = \"MULTI_STATUS\";\r\n    /**\r\n     * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\r\n     * and are not being included again.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"ALREADY_REPORTED\"] = 208] = \"ALREADY_REPORTED\";\r\n    /**\r\n     * The server has fulfilled a request for the resource,\r\n     * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"IM_USED\"] = 226] = \"IM_USED\";\r\n    /**\r\n     * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\r\n     * For example, this code could be used to present multiple video format options,\r\n     * to list files with different filename extensions, or to suggest word-sense disambiguation.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"MULTIPLE_CHOICES\"] = 300] = \"MULTIPLE_CHOICES\";\r\n    /**\r\n     * This and all future requests should be directed to the given URI.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"MOVED_PERMANENTLY\"] = 301] = \"MOVED_PERMANENTLY\";\r\n    /**\r\n     * This is an example of industry practice contradicting the standard.\r\n     * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\r\n     * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\r\n     * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\r\n     * to distinguish between the two behaviours. However, some Web applications and frameworks\r\n     * use the 302 status code as if it were the 303.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"FOUND\"] = 302] = \"FOUND\";\r\n    /**\r\n     * SINCE HTTP/1.1\r\n     * The response to the request can be found under another URI using a GET method.\r\n     * When received in response to a POST (or PUT/DELETE), the client should presume that\r\n     * the server has received the data and should issue a redirect with a separate GET message.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"SEE_OTHER\"] = 303] = \"SEE_OTHER\";\r\n    /**\r\n     * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\r\n     * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NOT_MODIFIED\"] = 304] = \"NOT_MODIFIED\";\r\n    /**\r\n     * SINCE HTTP/1.1\r\n     * The requested resource is available only through a proxy, the address for which is provided in the response.\r\n     * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"USE_PROXY\"] = 305] = \"USE_PROXY\";\r\n    /**\r\n     * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"SWITCH_PROXY\"] = 306] = \"SWITCH_PROXY\";\r\n    /**\r\n     * SINCE HTTP/1.1\r\n     * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\r\n     * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\r\n     * For example, a POST request should be repeated using another POST request.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"TEMPORARY_REDIRECT\"] = 307] = \"TEMPORARY_REDIRECT\";\r\n    /**\r\n     * The request and all future requests should be repeated using another URI.\r\n     * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\r\n     * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PERMANENT_REDIRECT\"] = 308] = \"PERMANENT_REDIRECT\";\r\n    /**\r\n     * The server cannot or will not process the request due to an apparent client error\r\n     * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"BAD_REQUEST\"] = 400] = \"BAD_REQUEST\";\r\n    /**\r\n     * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\r\n     * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\r\n     * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\r\n     * \"unauthenticated\",i.e. the user does not have the necessary credentials.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"UNAUTHORIZED\"] = 401] = \"UNAUTHORIZED\";\r\n    /**\r\n     * Reserved for future use. The original intention was that this code might be used as part of some form of digital\r\n     * cash or micro payment scheme, but that has not happened, and this code is not usually used.\r\n     * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PAYMENT_REQUIRED\"] = 402] = \"PAYMENT_REQUIRED\";\r\n    /**\r\n     * The request was valid, but the server is refusing action.\r\n     * The user might not have the necessary permissions for a resource.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"FORBIDDEN\"] = 403] = \"FORBIDDEN\";\r\n    /**\r\n     * The requested resource could not be found but may be available in the future.\r\n     * Subsequent requests by the client are permissible.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NOT_FOUND\"] = 404] = \"NOT_FOUND\";\r\n    /**\r\n     * A request method is not supported for the requested resource;\r\n     * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"METHOD_NOT_ALLOWED\"] = 405] = \"METHOD_NOT_ALLOWED\";\r\n    /**\r\n     * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NOT_ACCEPTABLE\"] = 406] = \"NOT_ACCEPTABLE\";\r\n    /**\r\n     * The client must first authenticate itself with the proxy.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PROXY_AUTHENTICATION_REQUIRED\"] = 407] = \"PROXY_AUTHENTICATION_REQUIRED\";\r\n    /**\r\n     * The server timed out waiting for the request.\r\n     * According to HTTP specifications:\r\n     * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"REQUEST_TIMEOUT\"] = 408] = \"REQUEST_TIMEOUT\";\r\n    /**\r\n     * Indicates that the request could not be processed because of conflict in the request,\r\n     * such as an edit conflict between multiple simultaneous updates.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"CONFLICT\"] = 409] = \"CONFLICT\";\r\n    /**\r\n     * Indicates that the resource requested is no longer available and will not be available again.\r\n     * This should be used when a resource has been intentionally removed and the resource should be purged.\r\n     * Upon receiving a 410 status code, the client should not request the resource in the future.\r\n     * Clients such as search engines should remove the resource from their indices.\r\n     * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"GONE\"] = 410] = \"GONE\";\r\n    /**\r\n     * The request did not specify the length of its content, which is required by the requested resource.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"LENGTH_REQUIRED\"] = 411] = \"LENGTH_REQUIRED\";\r\n    /**\r\n     * The server does not meet one of the preconditions that the requester put on the request.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PRECONDITION_FAILED\"] = 412] = \"PRECONDITION_FAILED\";\r\n    /**\r\n     * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PAYLOAD_TOO_LARGE\"] = 413] = \"PAYLOAD_TOO_LARGE\";\r\n    /**\r\n     * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\r\n     * in which case it should be converted to a POST request.\r\n     * Called \"Request-URI Too Long\" previously.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"URI_TOO_LONG\"] = 414] = \"URI_TOO_LONG\";\r\n    /**\r\n     * The request entity has a media type which the server or resource does not support.\r\n     * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"UNSUPPORTED_MEDIA_TYPE\"] = 415] = \"UNSUPPORTED_MEDIA_TYPE\";\r\n    /**\r\n     * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\r\n     * For example, if the client asked for a part of the file that lies beyond the end of the file.\r\n     * Called \"Requested Range Not Satisfiable\" previously.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"RANGE_NOT_SATISFIABLE\"] = 416] = \"RANGE_NOT_SATISFIABLE\";\r\n    /**\r\n     * The server cannot meet the requirements of the Expect request-header field.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"EXPECTATION_FAILED\"] = 417] = \"EXPECTATION_FAILED\";\r\n    /**\r\n     * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\r\n     * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\r\n     * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"I_AM_A_TEAPOT\"] = 418] = \"I_AM_A_TEAPOT\";\r\n    /**\r\n     * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"MISDIRECTED_REQUEST\"] = 421] = \"MISDIRECTED_REQUEST\";\r\n    /**\r\n     * The request was well-formed but was unable to be followed due to semantic errors.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"UNPROCESSABLE_ENTITY\"] = 422] = \"UNPROCESSABLE_ENTITY\";\r\n    /**\r\n     * The resource that is being accessed is locked.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"LOCKED\"] = 423] = \"LOCKED\";\r\n    /**\r\n     * The request failed due to failure of a previous request (e.g., a PROPPATCH).\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"FAILED_DEPENDENCY\"] = 424] = \"FAILED_DEPENDENCY\";\r\n    /**\r\n     * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"UPGRADE_REQUIRED\"] = 426] = \"UPGRADE_REQUIRED\";\r\n    /**\r\n     * The origin server requires the request to be conditional.\r\n     * Intended to prevent \"the 'lost update' problem, where a client\r\n     * GETs a resource's state, modifies it, and PUTs it back to the server,\r\n     * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"PRECONDITION_REQUIRED\"] = 428] = \"PRECONDITION_REQUIRED\";\r\n    /**\r\n     * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"TOO_MANY_REQUESTS\"] = 429] = \"TOO_MANY_REQUESTS\";\r\n    /**\r\n     * The server is unwilling to process the request because either an individual header field,\r\n     * or all the header fields collectively, are too large.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"REQUEST_HEADER_FIELDS_TOO_LARGE\"] = 431] = \"REQUEST_HEADER_FIELDS_TOO_LARGE\";\r\n    /**\r\n     * A server operator has received a legal demand to deny access to a resource or to a set of resources\r\n     * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"UNAVAILABLE_FOR_LEGAL_REASONS\"] = 451] = \"UNAVAILABLE_FOR_LEGAL_REASONS\";\r\n    /**\r\n     * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"INTERNAL_SERVER_ERROR\"] = 500] = \"INTERNAL_SERVER_ERROR\";\r\n    /**\r\n     * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\r\n     * Usually this implies future availability (e.g., a new feature of a web-service API).\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NOT_IMPLEMENTED\"] = 501] = \"NOT_IMPLEMENTED\";\r\n    /**\r\n     * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"BAD_GATEWAY\"] = 502] = \"BAD_GATEWAY\";\r\n    /**\r\n     * The server is currently unavailable (because it is overloaded or down for maintenance).\r\n     * Generally, this is a temporary state.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"SERVICE_UNAVAILABLE\"] = 503] = \"SERVICE_UNAVAILABLE\";\r\n    /**\r\n     * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"GATEWAY_TIMEOUT\"] = 504] = \"GATEWAY_TIMEOUT\";\r\n    /**\r\n     * The server does not support the HTTP protocol version used in the request\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"HTTP_VERSION_NOT_SUPPORTED\"] = 505] = \"HTTP_VERSION_NOT_SUPPORTED\";\r\n    /**\r\n     * Transparent content negotiation for the request results in a circular reference.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"VARIANT_ALSO_NEGOTIATES\"] = 506] = \"VARIANT_ALSO_NEGOTIATES\";\r\n    /**\r\n     * The server is unable to store the representation needed to complete the request.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"INSUFFICIENT_STORAGE\"] = 507] = \"INSUFFICIENT_STORAGE\";\r\n    /**\r\n     * The server detected an infinite loop while processing the request.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"LOOP_DETECTED\"] = 508] = \"LOOP_DETECTED\";\r\n    /**\r\n     * Further extensions to the request are required for the server to fulfill it.\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NOT_EXTENDED\"] = 510] = \"NOT_EXTENDED\";\r\n    /**\r\n     * The client needs to authenticate to gain network access.\r\n     * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\r\n     * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\r\n     */\r\n    STATUS_CODE[STATUS_CODE[\"NETWORK_AUTHENTICATION_REQUIRED\"] = 511] = \"NETWORK_AUTHENTICATION_REQUIRED\";\r\n})(STATUS_CODE || (STATUS_CODE = {}));\n\n// tslint:disable: strict-type-predicates\r\nvar isNode = typeof process !== 'undefined' && process.versions != null && process.versions.node != null;\r\n// tslint:enable: strict-type-predicates\r\nvar XMLHttpRequestCTOR = isNode ? require('xhr2-cookies').XMLHttpRequest : XMLHttpRequest;\r\nvar defaultTimeout = 30000;\r\nvar HttpResponseError = /** @class */ (function () {\r\n    function HttpResponseError(message, status, statusText, body, url) {\r\n        this.message = message;\r\n        this.status = status;\r\n        this.statusText = statusText;\r\n        this.body = body;\r\n        this.url = url;\r\n        this.name = 'HttpResponse';\r\n    }\r\n    return HttpResponseError;\r\n}());\r\nvar HttpRequestFailed = /** @class */ (function () {\r\n    function HttpRequestFailed(url, innerEvent) {\r\n        this.url = url;\r\n        this.innerEvent = innerEvent;\r\n        this.name = 'HttpRequestFailed';\r\n        this.message = \"Request to \" + url + \" failed\";\r\n    }\r\n    return HttpRequestFailed;\r\n}());\r\nvar HttpBackend = /** @class */ (function () {\r\n    function HttpBackend() {\r\n    }\r\n    HttpBackend.prototype.serialize = function (obj) {\r\n        if (!obj) {\r\n            return '';\r\n        }\r\n        var str = [];\r\n        var _loop_1 = function (p) {\r\n            if (obj.hasOwnProperty(p) && obj[p]) {\r\n                var prop = typeof obj[p].toJSON === 'function' ? obj[p].toJSON() : obj[p];\r\n                // query arguments can have no value so we need some way of handling that\r\n                // example https://domain.com/query?all\r\n                if (prop === null) {\r\n                    str.push(encodeURIComponent(p));\r\n                    return \"continue\";\r\n                }\r\n                // another use case is multiple arguments with the same name\r\n                // they are passed as array\r\n                if (Array.isArray(prop)) {\r\n                    prop.forEach(function (item) {\r\n                        str.push(encodeURIComponent(p) + '=' + encodeURIComponent(item));\r\n                    });\r\n                    return \"continue\";\r\n                }\r\n                str.push(encodeURIComponent(p) + '=' + encodeURIComponent(prop));\r\n            }\r\n        };\r\n        for (var p in obj) {\r\n            _loop_1(p);\r\n        }\r\n        var serialized = str.join('&');\r\n        if (serialized) {\r\n            return \"?\" + serialized;\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    };\r\n    HttpBackend.prototype.createXHR = function () {\r\n        return new XMLHttpRequestCTOR();\r\n    };\r\n    /**\r\n     *\r\n     * @param options contains options to be passed for the HTTP request (url, method and timeout)\r\n     */\r\n    HttpBackend.prototype.createRequest = function (_a, data) {\r\n        var _this = this;\r\n        var url = _a.url, method = _a.method, timeout = _a.timeout, query = _a.query, _b = _a.headers, headers = _b === void 0 ? {} : _b, _c = _a.json, json = _c === void 0 ? true : _c;\r\n        return new Promise(function (resolve, reject) {\r\n            var request = _this.createXHR();\r\n            request.open(method || 'GET', \"\" + url + _this.serialize(query));\r\n            request.setRequestHeader('Content-Type', 'application/json');\r\n            for (var k in headers) {\r\n                request.setRequestHeader(k, headers[k]);\r\n            }\r\n            request.timeout = timeout || defaultTimeout;\r\n            request.onload = function () {\r\n                if (this.status >= 200 && this.status < 300) {\r\n                    if (json) {\r\n                        try {\r\n                            resolve(JSON.parse(request.response));\r\n                        }\r\n                        catch (ex) {\r\n                            reject(new Error(\"Unable to parse response: \" + request.response));\r\n                        }\r\n                    }\r\n                    else {\r\n                        resolve(request.response);\r\n                    }\r\n                }\r\n                else {\r\n                    reject(new HttpResponseError(\"Http error response: (\" + this.status + \") \" + request.response, this.status, request.statusText, request.response, url));\r\n                }\r\n            };\r\n            request.ontimeout = function () {\r\n                reject(new Error(\"Request timed out after: \" + request.timeout + \"ms\"));\r\n            };\r\n            request.onerror = function (err) {\r\n                reject(new HttpRequestFailed(url, err));\r\n            };\r\n            if (data) {\r\n                var dataStr = JSON.stringify(data);\r\n                request.send(dataStr);\r\n            }\r\n            else {\r\n                request.send();\r\n            }\r\n        });\r\n    };\r\n    return HttpBackend;\r\n}());\n\nexport { HttpBackend, HttpRequestFailed, HttpResponseError, STATUS_CODE };\n//# sourceMappingURL=taquito-http-utils.es5.js.map\n"]},"metadata":{},"sourceType":"module"}