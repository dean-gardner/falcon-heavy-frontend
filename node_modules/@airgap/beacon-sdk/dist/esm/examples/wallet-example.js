var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { WalletClient, BeaconMessageType, PermissionScope } from '..'; // Replace '..' with '@airgap/beacon-sdk'
const connectApp = () => __awaiter(void 0, void 0, void 0, function* () {
    const client = new WalletClient({ name: 'My Wallet' });
    yield client.init(); // Establish P2P connection
    client
        .connect((message) => __awaiter(void 0, void 0, void 0, function* () {
        console.log('beacon message', message);
        // Let's assume it's a permission request, but we obviously need to handle all request types
        if (message.type === BeaconMessageType.PermissionRequest) {
            // Here we would show a UI to the user where he can confirm everything that has been requested in the beacon message
            // We hardcode a response
            const response = {
                type: BeaconMessageType.PermissionResponse,
                network: message.network,
                scopes: [PermissionScope.OPERATION_REQUEST],
                id: message.id,
                publicKey: 'tezos public key'
            };
            yield client.respond(response);
        }
    }))
        .catch((error) => console.error('connect error', error));
});
connectApp().catch((error) => console.error('connect error', error));
//# sourceMappingURL=wallet-example.js.map