var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { DAppClient, NetworkType, PermissionScope, TezosOperationType } from '..'; // Replace '..' with '@airgap/beacon-sdk'
const client = new DAppClient({ name: 'My Sample DApp' });
const network = {
    type: NetworkType.CUSTOM,
    name: 'MyLocalNetwork',
    rpcUrl: 'http://localhost:8888/'
};
const scopes = [
    PermissionScope.OPERATION_REQUEST,
    PermissionScope.SIGN,
    PermissionScope.THRESHOLD
];
client
    .requestPermissions({
    network,
    scopes
})
    .then((permissionResponse) => __awaiter(void 0, void 0, void 0, function* () {
    if (permissionResponse.scopes.some((permission) => permission === PermissionScope.OPERATION_REQUEST)) {
        const operation = {
            kind: TezosOperationType.TRANSACTION,
            amount: '1234567',
            destination: 'tz1MJx9vhaNRSimcuXPK2rW4fLccQnDAnVKJ'
        };
        const operationResponse = yield client.requestOperation({
            operationDetails: [operation]
        });
        console.log('operation was successfully broadcast to the network with the hash: ', operationResponse.transactionHash);
    }
}))
    .catch((permissionError) => console.error(permissionError));
//# sourceMappingURL=using-custom-network.js.map