import { Client, WalletClientOptions, TransportType, BeaconRequestOutputMessage, BeaconResponseInputMessage, AppMetadata, PermissionInfo, P2PPairInfo } from '../..';
import { ConnectionContext } from '../../types/ConnectionContext';
export declare class WalletClient extends Client {
    private readonly permissionManager;
    private readonly appMetadataManager;
    private pendingRequests;
    constructor(config: WalletClientOptions);
    init(): Promise<TransportType>;
    connect(newMessageCallback: (message: BeaconRequestOutputMessage, connectionInfo: ConnectionContext) => void): Promise<boolean>;
    respond(message: BeaconResponseInputMessage): Promise<void>;
    getAppMetadataList(): Promise<AppMetadata[]>;
    getAppMetadata(beaconId: string): Promise<AppMetadata | undefined>;
    removeAppMetadata(beaconId: string): Promise<void>;
    removeAllAppMetadata(): Promise<void>;
    getPermissions(): Promise<PermissionInfo[]>;
    getPermission(accountIdentifier: string): Promise<PermissionInfo | undefined>;
    removePermission(accountIdentifier: string): Promise<void>;
    removeAllPermissions(): Promise<void>;
    removePeer(id: P2PPairInfo): Promise<void>;
    removeAllPeers(): Promise<void>;
    private removePermissionsForPeers;
    private respondToMessage;
}
