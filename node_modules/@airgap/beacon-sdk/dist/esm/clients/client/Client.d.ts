import { ExposedPromise } from '../../utils/exposed-promise';
import { ConnectionContext } from '../../types/ConnectionContext';
import { Transport, TransportType, BeaconMessage, AccountInfo, P2PPairInfo } from '../..';
import { BeaconEventHandler } from '../../events';
import { BeaconClient } from '../beacon-client/BeaconClient';
import { AccountManager } from '../../managers/AccountManager';
import { ClientOptions } from './ClientOptions';
export declare abstract class Client extends BeaconClient {
    protected readonly accountManager: AccountManager;
    protected requestCounter: number[];
    protected handleResponse: (_event: BeaconMessage, connectionInfo: ConnectionContext) => void;
    protected readonly rateLimit: number;
    protected readonly rateLimitWindowInSeconds: number;
    protected readonly events: BeaconEventHandler;
    protected _transport: ExposedPromise<Transport>;
    protected get transport(): Promise<Transport>;
    protected readonly _isConnected: ExposedPromise<boolean>;
    get isConnected(): Promise<boolean>;
    get ready(): Promise<void>;
    constructor(config: ClientOptions);
    getAccounts(): Promise<AccountInfo[]>;
    getAccount(accountIdentifier: string): Promise<AccountInfo | undefined>;
    removeAccount(accountIdentifier: string): Promise<void>;
    removeAllAccounts(): Promise<void>;
    addRequestAndCheckIfRateLimited(): Promise<boolean>;
    init(isDapp?: boolean, transport?: Transport): Promise<TransportType>;
    getPeers(): Promise<P2PPairInfo[]>;
    addPeer(id: P2PPairInfo): Promise<void>;
    protected _connect(): Promise<boolean>;
    private setTransport;
}
