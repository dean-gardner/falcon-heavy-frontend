var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Logger } from '../utils/Logger';
import { Transport } from '..';
const logger = new Logger('LocalTransport');
// Only used for testing
export class LocalTransport extends Transport {
    constructor() {
        super(...arguments);
        this.transformer = (message) => Promise.resolve(message);
    }
    static isAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(false);
        });
    }
    send(message) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('send', message);
            const transformedMessage = this.transformer ? this.transformer(message) : message;
            yield this.notifyListeners(transformedMessage, {});
            return;
        });
    }
}
//# sourceMappingURL=LocalTransport.js.map