var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Logger } from '../utils/Logger';
import { TransportType, TransportStatus } from '..';
const logger = new Logger('Transport');
export class Transport {
    constructor(name) {
        this.type = TransportType.POST_MESSAGE;
        this._isConnected = TransportStatus.NOT_CONNECTED;
        this.listeners = [];
        this.name = name;
    }
    get connectionStatus() {
        return this._isConnected;
    }
    static isAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.resolve(false);
        });
    }
    connect() {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('connect');
            this._isConnected = TransportStatus.CONNECTED;
            return;
        });
    }
    reconnect() {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('reconnect');
            return;
        });
    }
    send(message, recipient) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('send', message, recipient);
            return;
        });
    }
    addListener(listener) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('addListener');
            this.listeners.push(listener);
            return;
        });
    }
    removeListener(listener) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('removeListener');
            this.listeners = this.listeners.filter((element) => element !== listener);
            return;
        });
    }
    notifyListeners(message, connectionInfo) {
        return __awaiter(this, void 0, void 0, function* () {
            logger.log('notifyListeners');
            if (this.listeners.length === 0) {
                logger.warn('notifyListeners', '0 listeners notified!', this);
            }
            else {
                logger.log(`Notifying ${this.listeners.length} listeners`, this);
            }
            this.listeners.forEach((listener) => {
                listener(message, connectionInfo);
            });
            return;
        });
    }
}
//# sourceMappingURL=Transport.js.map