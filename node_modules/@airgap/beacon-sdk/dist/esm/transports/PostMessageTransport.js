var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { myWindow } from '../MockWindow';
import { ExtensionMessageTarget, TransportType } from '..';
import { Origin } from '../types/Origin';
import { Transport } from './Transport';
export class PostMessageTransport extends Transport {
    constructor(name) {
        super(name);
        this.type = TransportType.POST_MESSAGE;
        this.init().catch((error) => console.error(error));
    }
    static isAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const fn = (event) => {
                    const data = event.data;
                    if (data && data.payload === 'pong') {
                        resolve(true);
                        myWindow.removeEventListener('message', fn);
                    }
                };
                myWindow.addEventListener('message', fn);
                const message = {
                    target: ExtensionMessageTarget.EXTENSION,
                    payload: 'ping'
                };
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                myWindow.postMessage(message, '*');
            });
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            myWindow.addEventListener('message', (message) => {
                if (typeof message === 'object' && message) {
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    const data = message.data;
                    if (data.message && data.message.target === ExtensionMessageTarget.PAGE) {
                        this.notifyListeners(data.message.payload, {
                            origin: Origin.EXTENSION,
                            id: data.sender.id || ''
                        }).catch((error) => {
                            throw error;
                        });
                    }
                }
            });
        });
    }
    send(message, _recipient) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = {
                target: ExtensionMessageTarget.EXTENSION,
                payload: message
            };
            // eslint-disable-next-line @typescript-eslint/no-explicit-any
            myWindow.postMessage(data, '*');
        });
    }
}
//# sourceMappingURL=PostMessageTransport.js.map