// eslint-disable-next-line spaced-comment
/// <reference types="chrome"/>
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { Logger } from '../utils/Logger';
import { ExtensionMessageTarget, Transport, TransportType, Origin } from '..';
const logger = new Logger('ChromeMessageTransport');
export class ChromeMessageTransport extends Transport {
    constructor(name) {
        super(name);
        this.type = TransportType.CHROME_MESSAGE;
        this.init().catch((error) => console.error(error));
    }
    static isAvailable() {
        return __awaiter(this, void 0, void 0, function* () {
            const isAvailable = !!(window.chrome && chrome.runtime && chrome.runtime.id);
            return Promise.resolve(isAvailable);
        });
    }
    send(payload) {
        return __awaiter(this, void 0, void 0, function* () {
            const message = {
                target: ExtensionMessageTarget.PAGE,
                payload
            };
            chrome.runtime.sendMessage(message, (data) => {
                logger.log('send', 'got response', data);
            });
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
                logger.log('init', 'receiving chrome message', message, sender);
                const connectionContext = {
                    origin: Origin.WEBSITE,
                    id: sender.url ? sender.url : '',
                    extras: { sender, sendResponse }
                };
                this.notifyListeners(message, connectionContext).catch((error) => logger.error(error));
                // return true from the event listener to indicate you wish to send a response asynchronously
                // (this will keep the message channel open to the other end until sendResponse is called).
                return true;
            });
        });
    }
}
//# sourceMappingURL=ChromeMessageTransport.js.map