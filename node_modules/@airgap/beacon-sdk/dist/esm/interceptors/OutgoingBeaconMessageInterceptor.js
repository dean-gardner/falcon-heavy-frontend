var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BeaconMessageType } from '..';
import { BEACON_VERSION } from '../constants';
import { getAddressFromPublicKey } from '../utils/crypto';
import { getAccountIdentifier } from '../utils/get-account-identifier';
export class OutgoingBeaconMessageInterceptor {
    static intercept(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const { beaconId, request, message, permissionManager, appMetadataManager, interceptorCallback } = config;
            const errorMessage = message;
            if (errorMessage.errorType) {
                const response = {
                    type: message.type,
                    version: BEACON_VERSION,
                    beaconId,
                    id: message.id,
                    errorType: errorMessage.errorType
                };
                interceptorCallback(response);
                return;
            }
            switch (message.type) {
                case BeaconMessageType.PermissionResponse: {
                    const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);
                    // TODO: Migration code. Remove before 1.0.0 release.
                    const publicKey = response.publicKey || response.pubkey || response.pubKey;
                    const address = yield getAddressFromPublicKey(publicKey);
                    const appMetadata = yield appMetadataManager.getAppMetadata(request.beaconId);
                    if (!appMetadata) {
                        throw new Error('AppMetadata not found');
                    }
                    const permission = {
                        accountIdentifier: yield getAccountIdentifier(address, response.network),
                        beaconId: request.beaconId,
                        appMetadata,
                        website: '',
                        address,
                        publicKey,
                        network: response.network,
                        scopes: response.scopes,
                        connectedAt: new Date().getTime()
                    };
                    permissionManager.addPermission(permission).catch(console.error);
                    interceptorCallback(response);
                    break;
                }
                case BeaconMessageType.OperationResponse:
                    {
                        const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);
                        interceptorCallback(response);
                    }
                    break;
                case BeaconMessageType.SignPayloadResponse:
                    {
                        const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);
                        interceptorCallback(response);
                    }
                    break;
                case BeaconMessageType.BroadcastResponse:
                    {
                        const response = Object.assign({ beaconId, version: BEACON_VERSION }, message);
                        interceptorCallback(response);
                    }
                    break;
                default:
                    console.log('Message not handled');
            }
        });
    }
}
//# sourceMappingURL=OutgoingBeaconMessageInterceptor.js.map