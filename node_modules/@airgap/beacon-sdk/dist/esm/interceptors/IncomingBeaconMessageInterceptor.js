var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { BeaconMessageType } from '..';
export class IncomingBeaconMessageInterceptor {
    static intercept(config) {
        return __awaiter(this, void 0, void 0, function* () {
            const { message, connectionInfo, appMetadataManager, interceptorCallback } = config;
            switch (message.type) {
                case BeaconMessageType.PermissionRequest:
                    {
                        yield appMetadataManager.addAppMetadata(message.appMetadata);
                        const request = message;
                        interceptorCallback(request, connectionInfo);
                    }
                    break;
                case BeaconMessageType.OperationRequest:
                    {
                        const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);
                        const request = Object.assign({ appMetadata }, message);
                        interceptorCallback(request, connectionInfo);
                    }
                    break;
                case BeaconMessageType.SignPayloadRequest:
                    {
                        const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);
                        const request = Object.assign({ appMetadata }, message);
                        interceptorCallback(request, connectionInfo);
                    }
                    break;
                case BeaconMessageType.BroadcastRequest:
                    {
                        const appMetadata = yield IncomingBeaconMessageInterceptor.getAppMetadata(appMetadataManager, message.beaconId);
                        const request = Object.assign({ appMetadata }, message);
                        interceptorCallback(request, connectionInfo);
                    }
                    break;
                default:
                    console.log('Message not handled');
            }
        });
    }
    static getAppMetadata(appMetadataManager, beaconId) {
        return __awaiter(this, void 0, void 0, function* () {
            const appMetadata = yield appMetadataManager.getAppMetadata(beaconId);
            if (!appMetadata) {
                throw new Error('AppMetadata not found');
            }
            return appMetadata;
        });
    }
}
//# sourceMappingURL=IncomingBeaconMessageInterceptor.js.map