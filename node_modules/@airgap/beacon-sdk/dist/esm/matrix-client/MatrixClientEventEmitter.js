import { EventEmitter } from 'events';
import { keys } from '../utils/utils';
import { MatrixRoomStatus } from './models/MatrixRoom';
import { MatrixClientEventType } from './models/MatrixClientEvent';
export class MatrixClientEventEmitter extends EventEmitter {
    constructor() {
        super(...arguments);
        this.eventEmitProviders = new Map([
            [MatrixClientEventType.INVITE, () => [this.isInvite, this.emitInvite.bind(this)]],
            [MatrixClientEventType.MESSAGE, () => [this.isMessage, this.emitMessage.bind(this)]]
        ]);
    }
    onStateChanged(_oldState, _newState, stateChange) {
        for (const event of keys(MatrixClientEventType)) {
            this.emitIfEvent(MatrixClientEventType[event], stateChange);
        }
    }
    emitIfEvent(eventType, object) {
        const provider = this.eventEmitProviders.get(eventType);
        if (provider) {
            const [predicate, emitter] = provider();
            if (predicate(object)) {
                emitter(eventType, object);
            }
        }
    }
    emitClientEvent(eventType, content) {
        this.emit(eventType, {
            type: eventType,
            content
        });
    }
    isInvite(stateChange) {
        return stateChange.rooms
            ? stateChange.rooms.some((room) => room.status === MatrixRoomStatus.INVITED)
            : false;
    }
    emitInvite(eventType, stateChange) {
        stateChange.rooms
            .filter((room) => room.status === MatrixRoomStatus.INVITED)
            .map((room) => room.id)
            .forEach((id) => {
            this.emitClientEvent(eventType, {
                roomId: id
            });
        });
    }
    isMessage(stateChange) {
        return stateChange.rooms ? stateChange.rooms.some((room) => room.messages.length > 0) : false;
    }
    emitMessage(eventType, stateChange) {
        stateChange.rooms
            .filter((room) => room.messages.length > 0)
            .map((room) => room.messages.map((message) => [room.id, message]))
            .reduce((flatten, toFlatten) => flatten.concat(toFlatten), [])
            .forEach(([roomId, message]) => {
            this.emitClientEvent(eventType, {
                roomId,
                message
            });
        });
    }
}
//# sourceMappingURL=MatrixClientEventEmitter.js.map