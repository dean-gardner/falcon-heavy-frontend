import { MatrixRoom } from './models/MatrixRoom';
interface MatrixStateStorage {
    getItem(key: string): string | null;
    setItem(key: string, value: string): void;
}
interface MatrixState {
    isRunning: boolean;
    userId: string | undefined;
    deviceId: string | undefined;
    txnNo: number;
    accessToken: string | undefined;
    syncToken: string | undefined;
    pollingTimeout: number | undefined;
    pollingRetries: number;
    rooms: MatrixRoom[] | Record<string, MatrixRoom>;
}
declare type OnStateChangedListener = (oldState: MatrixStateStore, newState: MatrixStateStore, stateChange: Partial<MatrixStateUpdate>) => void;
export interface MatrixStateStore extends MatrixState {
    rooms: Record<string, MatrixRoom>;
}
export interface MatrixStateUpdate extends MatrixState {
    rooms: MatrixRoom[];
}
export declare class MatrixClientStore {
    private readonly storage?;
    static createLocal(): MatrixClientStore;
    private state;
    private readonly onStateChangedListeners;
    constructor(storage?: MatrixStateStorage | undefined);
    get<T extends keyof MatrixStateStore>(key: T): MatrixStateStore[T];
    getRoom(roomOrId: string | MatrixRoom): MatrixRoom;
    update(stateUpdate: Partial<MatrixStateUpdate>): void;
    onStateChanged(listener: OnStateChangedListener, ...subscribed: (keyof MatrixState)[]): void;
    private initFromStorage;
    private prepareData;
    private updateStorage;
    private setState;
    private mergeRooms;
    private notifyListeners;
}
export {};
