import { MatrixClientStore } from './MatrixClientStore';
import { MatrixRoom } from './models/MatrixRoom';
import { MatrixRoomService } from './services/MatrixRoomService';
import { MatrixUserService } from './services/MatrixUserService';
import { MatrixEventService } from './services/MatrixEventService';
import { MatrixClientEventEmitter } from './MatrixClientEventEmitter';
import { MatrixClientEventType, MatrixClientEvent } from './models/MatrixClientEvent';
interface MatrixClientOptions {
    baseUrl: string;
}
interface MatrixLoginConfig {
    id: string;
    password: string;
    deviceId: string;
}
export declare class MatrixClient {
    private readonly store;
    private readonly eventEmitter;
    private readonly userService;
    private readonly roomService;
    private readonly eventService;
    static create(config: MatrixClientOptions): MatrixClient;
    get joinedRooms(): MatrixRoom[];
    get invitedRooms(): MatrixRoom[];
    get leftRooms(): MatrixRoom[];
    constructor(store: MatrixClientStore, eventEmitter: MatrixClientEventEmitter, userService: MatrixUserService, roomService: MatrixRoomService, eventService: MatrixEventService);
    start(user: MatrixLoginConfig): Promise<void>;
    subscribe<T extends MatrixClientEventType>(event: T, listener: (event: MatrixClientEvent<T>) => void): void;
    unsubscribe(event: MatrixClientEventType, listener?: (event: MatrixClientEvent<any>) => void): void;
    getRoomById(id: string): MatrixRoom;
    createTrustedPrivateRoom(...members: string[]): Promise<string>;
    inviteToRooms(user: string, ...roomsOrIds: string[] | MatrixRoom[]): Promise<void>;
    joinRooms(...roomsOrIds: string[] | MatrixRoom[]): Promise<void>;
    sendTextMessage(roomOrId: string | MatrixRoom, message: string): Promise<void>;
    private poll;
    private sync;
    private requiresAuthorization;
    private createTxnId;
}
export {};
