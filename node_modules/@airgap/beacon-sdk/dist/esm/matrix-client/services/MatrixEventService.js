var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { MatrixRoomStatus } from '../models/MatrixRoom';
export class MatrixEventService {
    constructor(httpClient) {
        this.httpClient = httpClient;
        this.cachedPromises = new Map();
    }
    sync(accessToken, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.withCache('sync', () => this.httpClient.get('/sync', {
                timeout: options ? options.pollingTimeout : undefined,
                since: options ? options.syncToken : undefined
            }, { accessToken }));
        });
    }
    sendMessage(accessToken, room, content, txnId) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => this.scheduleEvent({
                accessToken,
                room,
                type: 'm.room.message',
                content,
                txnId,
                onSuccess: resolve,
                onError: reject
            }));
        });
    }
    scheduleEvent(event) {
        // TODO: actual scheduling
        this.sendEvent(event);
    }
    sendEvent(scheduledEvent) {
        return __awaiter(this, void 0, void 0, function* () {
            const { room, type, txnId, content, accessToken } = scheduledEvent;
            if (room.status !== MatrixRoomStatus.JOINED && room.status !== MatrixRoomStatus.UNKNOWN) {
                return Promise.reject(`User is not a member of room ${room.id}.`);
            }
            try {
                const response = yield this.httpClient.put(`/rooms/${room.id}/send/${type}/${txnId}`, content, { accessToken });
                scheduledEvent.onSuccess(response);
            }
            catch (error) {
                scheduledEvent.onError(error);
            }
        });
    }
    withCache(key, promiseProvider) {
        let promise = this.cachedPromises.get(key);
        if (!promise) {
            promise = promiseProvider().finally(() => {
                this.cachedPromises.delete(key);
            });
            this.cachedPromises.set(key, promise);
        }
        return promise;
    }
}
//# sourceMappingURL=MatrixEventService.js.map