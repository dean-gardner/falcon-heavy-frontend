import { keys } from '../utils/utils';
import { MatrixRoom, MatrixRoomStatus } from './models/MatrixRoom';
const STORAGE_KEY = 'beacon:sdk-matrix-preserved-state';
const PRESERVED_FIELDS = ['syncToken', 'rooms'];
export class MatrixClientStore {
    constructor(storage) {
        this.storage = storage;
        this.state = {
            isRunning: false,
            userId: undefined,
            deviceId: undefined,
            txnNo: 0,
            accessToken: undefined,
            syncToken: undefined,
            pollingTimeout: undefined,
            pollingRetries: 0,
            rooms: {}
        };
        this.onStateChangedListeners = new Map();
        this.initFromStorage();
    }
    static createLocal() {
        const localStorage = global.localStorage;
        return new MatrixClientStore(localStorage);
    }
    get(key) {
        return this.state[key];
    }
    getRoom(roomOrId) {
        const room = MatrixRoom.from(roomOrId, MatrixRoomStatus.UNKNOWN);
        return this.state.rooms[room.id] || room;
    }
    update(stateUpdate) {
        const oldState = Object.assign({}, this.state);
        this.setState(stateUpdate);
        this.updateStorage(stateUpdate);
        this.notifyListeners(oldState, this.state, stateUpdate);
    }
    onStateChanged(listener, ...subscribed) {
        if (subscribed.length > 0) {
            subscribed.forEach((key) => {
                this.onStateChangedListeners.set(key, listener);
            });
        }
        else {
            this.onStateChangedListeners.set('all', listener);
        }
    }
    initFromStorage() {
        if (this.storage) {
            const preserved = this.storage.getItem(STORAGE_KEY);
            this.setState(preserved ? JSON.parse(preserved) : {});
        }
    }
    prepareData(toStore) {
        const requiresPreparation = ['rooms'];
        const toStoreCopy = requiresPreparation.some((key) => toStore[key] !== undefined)
            ? JSON.parse(JSON.stringify(toStore))
            : toStore;
        // there is no need for saving messages in a persistent storage
        Object.values(toStoreCopy.rooms || {}).forEach((room) => {
            room.messages = [];
        });
        return toStoreCopy;
    }
    updateStorage(stateUpdate) {
        const updatedCachedFields = Object.entries(stateUpdate).filter(([key, value]) => PRESERVED_FIELDS.includes(key) && Boolean(value));
        if (this.storage && updatedCachedFields.length > 0) {
            const filteredState = {};
            PRESERVED_FIELDS.forEach((key) => {
                filteredState[key] = this.state[key];
            });
            this.storage.setItem(STORAGE_KEY, JSON.stringify(this.prepareData(filteredState)));
        }
    }
    setState(partialState) {
        this.state = {
            isRunning: partialState.isRunning || this.state.isRunning,
            userId: partialState.userId || this.state.userId,
            deviceId: partialState.deviceId || this.state.deviceId,
            txnNo: partialState.txnNo || this.state.txnNo,
            accessToken: partialState.accessToken || this.state.accessToken,
            syncToken: partialState.syncToken || this.state.syncToken,
            pollingTimeout: partialState.pollingTimeout || this.state.pollingTimeout,
            pollingRetries: partialState.pollingRetries || this.state.pollingRetries,
            rooms: this.mergeRooms(this.state.rooms, partialState.rooms)
        };
    }
    mergeRooms(oldRooms, _newRooms) {
        if (!_newRooms) {
            return oldRooms;
        }
        const newRooms = Array.isArray(_newRooms) ? _newRooms : Object.values(_newRooms);
        const merged = Object.assign({}, oldRooms);
        newRooms.forEach((newRoom) => {
            merged[newRoom.id] = MatrixRoom.merge(newRoom, oldRooms[newRoom.id]);
        });
        return merged;
    }
    notifyListeners(oldState, newState, stateChange) {
        const listenForAll = this.onStateChangedListeners.get('all');
        if (listenForAll) {
            listenForAll(oldState, newState, stateChange);
        }
        keys(stateChange)
            .filter((key) => stateChange[key] !== undefined)
            .forEach((key) => {
            const listener = this.onStateChangedListeners.get(key);
            if (listener) {
                listener(oldState, newState, stateChange);
            }
        });
    }
}
//# sourceMappingURL=MatrixClientStore.js.map