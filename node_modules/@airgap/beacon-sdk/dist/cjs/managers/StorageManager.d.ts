import { StorageKey, Storage, StorageKeyReturnType } from '..';
/** Type workaround for https://github.com/Microsoft/TypeScript/issues/7294#issuecomment-465794460 */
declare type ArrayElem<A> = A extends (infer Elem)[] ? Elem : never;
export declare class StorageManager<T extends StorageKey.ACCOUNTS | StorageKey.APP_METADATA_LIST | StorageKey.PERMISSION_LIST | StorageKey.TRANSPORT_P2P_PEERS> {
    private readonly storage;
    private readonly storageKey;
    constructor(storage: Storage, storageKey: T);
    getAll(): Promise<StorageKeyReturnType[T]>;
    getOne(predicate: (element: ArrayElem<StorageKeyReturnType[T]>) => boolean): Promise<ArrayElem<StorageKeyReturnType[T]> | undefined>;
    addOne(element: ArrayElem<StorageKeyReturnType[T]>, predicate: (element: ArrayElem<StorageKeyReturnType[T]>) => boolean, overwrite?: boolean): Promise<void>;
    remove(predicate: (element: ArrayElem<StorageKeyReturnType[T]>) => boolean): Promise<void>;
    removeAll(): Promise<void>;
}
export {};
