import * as sodium from 'libsodium-wrappers';
import { Storage, Transport, TransportType, P2PPairInfo } from '..';
import { BeaconEventHandler } from '../events';
export declare class P2PTransport extends Transport {
    readonly type: TransportType;
    private readonly events;
    private readonly isDapp;
    private readonly storage;
    private readonly keyPair;
    private readonly client;
    private listeningForChannelOpenings;
    private readonly peerManager;
    constructor(name: string, keyPair: sodium.KeyPair, storage: Storage, events: BeaconEventHandler, isDapp: boolean);
    static isAvailable(): Promise<boolean>;
    connect(): Promise<void>;
    reconnect(): Promise<void>;
    connectNewPeer(): Promise<void>;
    getPeers(): Promise<P2PPairInfo[]>;
    addPeer(newPeer: P2PPairInfo): Promise<void>;
    removePeer(peerToBeRemoved: P2PPairInfo): Promise<void>;
    removeAllPeers(): Promise<void>;
    send(message: string, recipient?: string): Promise<void>;
    private listen;
}
