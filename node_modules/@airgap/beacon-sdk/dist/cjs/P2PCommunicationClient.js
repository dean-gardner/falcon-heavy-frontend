"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.P2PCommunicationClient = void 0;
var sodium = __importStar(require("libsodium-wrappers"));
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var crypto_1 = require("./utils/crypto");
var MatrixClient_1 = require("./matrix-client/MatrixClient");
var MatrixClientEvent_1 = require("./matrix-client/models/MatrixClientEvent");
var MatrixMessage_1 = require("./matrix-client/models/MatrixMessage");
var P2PCommunicationClient = /** @class */ (function () {
    function P2PCommunicationClient(name, keyPair, replicationCount, debug) {
        if (debug === void 0) { debug = false; }
        this.name = name;
        this.keyPair = keyPair;
        this.replicationCount = replicationCount;
        this.debug = debug;
        this.clients = [];
        this.KNOWN_RELAY_SERVERS = [
            'matrix.papers.tech'
            // 'matrix.tez.ie',
            // 'matrix-dev.papers.tech',
            // "matrix.stove-labs.com",
            // "yadayada.cryptonomic-infra.tech"
        ];
        this.activeListeners = new Map();
    }
    P2PCommunicationClient.prototype.getHandshakeInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = {
                            name: this.name
                        };
                        return [4 /*yield*/, this.getPublicKey()];
                    case 1:
                        _a.publicKey = _b.sent();
                        return [4 /*yield*/, this.getRelayServer()];
                    case 2: return [2 /*return*/, (_a.relayServer = _b.sent(),
                            _a)];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getRelayServer = function (publicKeyHash, nonce) {
        if (nonce === void 0) { nonce = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var hash, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.keyPair) {
                            throw new Error('KeyPair not available');
                        }
                        _a = publicKeyHash;
                        if (_a) return [3 /*break*/, 2];
                        return [4 /*yield*/, crypto_1.getHexHash(this.keyPair.publicKey)];
                    case 1:
                        _a = (_b.sent());
                        _b.label = 2;
                    case 2:
                        hash = _a;
                        return [2 /*return*/, this.KNOWN_RELAY_SERVERS.reduce(function (prevPromise, curr) { return __awaiter(_this, void 0, void 0, function () {
                                var prev, prevRelayServerHash, currRelayServerHash, prevBigInt, currBigInt;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, prevPromise];
                                        case 1:
                                            prev = _a.sent();
                                            return [4 /*yield*/, crypto_1.getHexHash(prev + nonce)];
                                        case 2:
                                            prevRelayServerHash = _a.sent();
                                            return [4 /*yield*/, crypto_1.getHexHash(curr + nonce)];
                                        case 3:
                                            currRelayServerHash = _a.sent();
                                            return [4 /*yield*/, this.getAbsoluteBigIntDifference(hash, prevRelayServerHash)];
                                        case 4:
                                            prevBigInt = _a.sent();
                                            return [4 /*yield*/, this.getAbsoluteBigIntDifference(hash, currRelayServerHash)];
                                        case 5:
                                            currBigInt = _a.sent();
                                            return [2 /*return*/, prevBigInt.isLessThan(currBigInt) ? prev : curr];
                                    }
                                });
                            }); }, Promise.resolve(this.KNOWN_RELAY_SERVERS[0]))];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var loginRawDigest, rawSignature, _loop_1, this_1, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.log('starting client')];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, sodium.ready];
                    case 2:
                        _a.sent();
                        loginRawDigest = sodium.crypto_generichash(32, sodium.from_string("login:" + Math.floor(Date.now() / 1000 / (5 * 60))));
                        rawSignature = sodium.crypto_sign_detached(loginRawDigest, this.keyPair.privateKey);
                        return [4 /*yield*/, this.log("connecting to " + this.replicationCount + " servers")];
                    case 3:
                        _a.sent();
                        _loop_1 = function (i) {
                            var client, _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q;
                            return __generator(this, function (_r) {
                                switch (_r.label) {
                                    case 0:
                                        _b = (_a = MatrixClient_1.MatrixClient).create;
                                        _c = {};
                                        _d = "https://";
                                        _f = (_e = this_1).getRelayServer;
                                        return [4 /*yield*/, this_1.getPublicKeyHash()];
                                    case 1: return [4 /*yield*/, _f.apply(_e, [_r.sent(), i.toString()])];
                                    case 2:
                                        client = _b.apply(_a, [(_c.baseUrl = _d + (_r.sent()),
                                                _c)]);
                                        client.subscribe(MatrixClientEvent_1.MatrixClientEventType.INVITE, function (event) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, client.joinRooms(event.content.roomId)];
                                                    case 1:
                                                        _a.sent();
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); });
                                        _h = (_g = this_1).log;
                                        _j = ['login'];
                                        return [4 /*yield*/, this_1.getPublicKeyHash()];
                                    case 3:
                                        _j = _j.concat([_r.sent(), 'on']);
                                        _l = (_k = this_1).getRelayServer;
                                        return [4 /*yield*/, this_1.getPublicKeyHash()];
                                    case 4: return [4 /*yield*/, _l.apply(_k, [_r.sent(), i.toString()])];
                                    case 5: return [4 /*yield*/, _h.apply(_g, _j.concat([_r.sent()]))];
                                    case 6:
                                        _r.sent();
                                        _o = (_m = client).start;
                                        _p = {};
                                        return [4 /*yield*/, this_1.getPublicKeyHash()];
                                    case 7:
                                        _p.id = _r.sent();
                                        _q = "ed:" + crypto_1.toHex(rawSignature) + ":";
                                        return [4 /*yield*/, this_1.getPublicKey()];
                                    case 8: return [4 /*yield*/, _o.apply(_m, [(_p.password = _q + (_r.sent()),
                                                _p.deviceId = crypto_1.toHex(this_1.keyPair.publicKey),
                                                _p)])
                                            .catch(function (error) { return _this.log(error); })];
                                    case 9:
                                        _r.sent();
                                        return [4 /*yield*/, client.joinRooms.apply(client, client.invitedRooms).catch(function (error) { return _this.log(error); })];
                                    case 10:
                                        _r.sent();
                                        this_1.clients.push(client);
                                        return [2 /*return*/];
                                }
                            });
                        };
                        this_1 = this;
                        i = 0;
                        _a.label = 4;
                    case 4:
                        if (!(i < this.replicationCount)) return [3 /*break*/, 7];
                        return [5 /*yield**/, _loop_1(i)];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6:
                        i++;
                        return [3 /*break*/, 4];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.listenForEncryptedMessage = function (senderPublicKey, messageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var sharedRx, callbackFunction, _i, _a, client;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.keyPair) {
                            throw new Error('KeyPair not available');
                        }
                        return [4 /*yield*/, this.createCryptoBoxServer(senderPublicKey, this.keyPair.privateKey)];
                    case 1:
                        sharedRx = (_b.sent()).sharedRx;
                        if (this.activeListeners.has(senderPublicKey)) {
                            return [2 /*return*/];
                        }
                        callbackFunction = function (event) { return __awaiter(_this, void 0, void 0, function () {
                            var _a, payload, _b, decryptionError_1;
                            return __generator(this, function (_c) {
                                switch (_c.label) {
                                    case 0:
                                        _a = this.isTextMessage(event.content);
                                        if (!_a) return [3 /*break*/, 2];
                                        return [4 /*yield*/, this.isSender(event, senderPublicKey)];
                                    case 1:
                                        _a = (_c.sent());
                                        _c.label = 2;
                                    case 2:
                                        if (!_a) return [3 /*break*/, 6];
                                        payload = Buffer.from(event.content.message.content, 'hex');
                                        if (!(payload.length >=
                                            sodium.crypto_secretbox_NONCEBYTES + sodium.crypto_secretbox_MACBYTES)) return [3 /*break*/, 6];
                                        _c.label = 3;
                                    case 3:
                                        _c.trys.push([3, 5, , 6]);
                                        _b = messageCallback;
                                        return [4 /*yield*/, crypto_1.decryptCryptoboxPayload(payload, sharedRx)];
                                    case 4:
                                        _b.apply(void 0, [_c.sent()]);
                                        return [3 /*break*/, 6];
                                    case 5:
                                        decryptionError_1 = _c.sent();
                                        return [3 /*break*/, 6];
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); };
                        this.activeListeners.set(senderPublicKey, callbackFunction);
                        for (_i = 0, _a = this.clients; _i < _a.length; _i++) {
                            client = _a[_i];
                            client.subscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, callbackFunction);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.unsubscribeFromEncryptedMessage = function (senderPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var listener, _i, _a, client;
            return __generator(this, function (_b) {
                listener = this.activeListeners.get(senderPublicKey);
                if (!listener) {
                    return [2 /*return*/];
                }
                for (_i = 0, _a = this.clients; _i < _a.length; _i++) {
                    client = _a[_i];
                    client.unsubscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, listener);
                }
                this.activeListeners.delete(senderPublicKey);
                return [2 /*return*/];
            });
        });
    };
    P2PCommunicationClient.prototype.unsubscribeFromEncryptedMessages = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, client;
            return __generator(this, function (_b) {
                for (_i = 0, _a = this.clients; _i < _a.length; _i++) {
                    client = _a[_i];
                    client.unsubscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE);
                }
                this.activeListeners.clear();
                return [2 /*return*/];
            });
        });
    };
    P2PCommunicationClient.prototype.sendMessage = function (recipientPublicKey, message) {
        return __awaiter(this, void 0, void 0, function () {
            var sharedTx, i, recipientHash, recipient, _a, _b, _i, _c, client, room, _d, _e, _f;
            var _this = this;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        if (!this.keyPair) {
                            throw new Error('KeyPair not available');
                        }
                        return [4 /*yield*/, this.createCryptoBoxClient(recipientPublicKey, this.keyPair.privateKey)];
                    case 1:
                        sharedTx = (_g.sent()).sharedTx;
                        i = 0;
                        _g.label = 2;
                    case 2:
                        if (!(i < this.replicationCount)) return [3 /*break*/, 10];
                        return [4 /*yield*/, crypto_1.getHexHash(Buffer.from(recipientPublicKey, 'hex'))];
                    case 3:
                        recipientHash = _g.sent();
                        _a = crypto_1.recipientString;
                        _b = [recipientHash];
                        return [4 /*yield*/, this.getRelayServer(recipientHash, i.toString())];
                    case 4:
                        recipient = _a.apply(void 0, _b.concat([_g.sent()]));
                        _i = 0, _c = this.clients;
                        _g.label = 5;
                    case 5:
                        if (!(_i < _c.length)) return [3 /*break*/, 9];
                        client = _c[_i];
                        return [4 /*yield*/, this.getRelevantRoom(client, recipient)];
                    case 6:
                        room = _g.sent();
                        _e = (_d = client).sendTextMessage;
                        _f = [room.id];
                        return [4 /*yield*/, crypto_1.encryptCryptoboxPayload(message, sharedTx)];
                    case 7:
                        _e.apply(_d, _f.concat([_g.sent()]))
                            .catch(function (error) { return _this.log(error); });
                        _g.label = 8;
                    case 8:
                        _i++;
                        return [3 /*break*/, 5];
                    case 9:
                        i++;
                        return [3 /*break*/, 2];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.listenForChannelOpening = function (messageCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, client;
            var _this = this;
            return __generator(this, function (_b) {
                for (_i = 0, _a = this.clients; _i < _a.length; _i++) {
                    client = _a[_i];
                    client.subscribe(MatrixClientEvent_1.MatrixClientEventType.MESSAGE, function (event) { return __awaiter(_this, void 0, void 0, function () {
                        var _a, splits, payload, _b, decryptionError_2;
                        return __generator(this, function (_c) {
                            switch (_c.label) {
                                case 0: return [4 /*yield*/, this.log('channel opening', event)];
                                case 1:
                                    _c.sent();
                                    _a = this.isTextMessage(event.content);
                                    if (!_a) return [3 /*break*/, 3];
                                    return [4 /*yield*/, this.isChannelOpenMessage(event.content)];
                                case 2:
                                    _a = (_c.sent());
                                    _c.label = 3;
                                case 3:
                                    if (!_a) return [3 /*break*/, 8];
                                    if (!this.keyPair) {
                                        throw new Error('KeyPair not available');
                                    }
                                    return [4 /*yield*/, this.log('new channel open event!')];
                                case 4:
                                    _c.sent();
                                    splits = event.content.message.content.split(':');
                                    payload = Buffer.from(splits[splits.length - 1], 'hex');
                                    if (!(payload.length >=
                                        sodium.crypto_secretbox_NONCEBYTES + sodium.crypto_secretbox_MACBYTES)) return [3 /*break*/, 8];
                                    _c.label = 5;
                                case 5:
                                    _c.trys.push([5, 7, , 8]);
                                    _b = messageCallback;
                                    return [4 /*yield*/, crypto_1.openCryptobox(payload, this.keyPair.publicKey, this.keyPair.privateKey)];
                                case 6:
                                    _b.apply(void 0, [_c.sent()]);
                                    return [3 /*break*/, 8];
                                case 7:
                                    decryptionError_2 = _c.sent();
                                    return [3 /*break*/, 8];
                                case 8: return [2 /*return*/];
                            }
                        });
                    }); });
                }
                return [2 /*return*/];
            });
        });
    };
    P2PCommunicationClient.prototype.openChannel = function (recipientPublicKey, relayServer) {
        return __awaiter(this, void 0, void 0, function () {
            var recipientHash, recipient, _i, _a, client, room, encryptedMessage, _b;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, this.log('open channel')];
                    case 1:
                        _c.sent();
                        return [4 /*yield*/, crypto_1.getHexHash(Buffer.from(recipientPublicKey, 'hex'))];
                    case 2:
                        recipientHash = _c.sent();
                        recipient = crypto_1.recipientString(recipientHash, relayServer);
                        return [4 /*yield*/, this.log("currently there are " + this.clients.length + " clients open")];
                    case 3:
                        _c.sent();
                        _i = 0, _a = this.clients;
                        _c.label = 4;
                    case 4:
                        if (!(_i < _a.length)) return [3 /*break*/, 9];
                        client = _a[_i];
                        return [4 /*yield*/, this.getRelevantRoom(client, recipient)];
                    case 5:
                        room = _c.sent();
                        _b = crypto_1.sealCryptobox;
                        return [4 /*yield*/, this.getPublicKey()];
                    case 6: return [4 /*yield*/, _b.apply(void 0, [_c.sent(), Buffer.from(recipientPublicKey, 'hex')])];
                    case 7:
                        encryptedMessage = _c.sent();
                        client
                            .sendTextMessage(room.id, ['@channel-open', recipient, encryptedMessage].join(':'))
                            .catch(function (error) { return _this.log(error); });
                        _c.label = 8;
                    case 8:
                        _i++;
                        return [3 /*break*/, 4];
                    case 9: return [2 /*return*/];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.isTextMessage = function (content) {
        return content.message.type === MatrixMessage_1.MatrixMessageType.TEXT;
    };
    P2PCommunicationClient.prototype.isChannelOpenMessage = function (content) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0:
                        _b = (_a = content.message.content).startsWith;
                        _c = "@channel-open:@";
                        _d = crypto_1.getHexHash;
                        _f = (_e = Buffer).from;
                        return [4 /*yield*/, this.getPublicKey()];
                    case 1: return [4 /*yield*/, _d.apply(void 0, [_f.apply(_e, [_g.sent(), 'hex'])])];
                    case 2: return [2 /*return*/, _b.apply(_a, [_c + (_g.sent())])];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.isSender = function (event, senderPublicKey) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _b = (_a = event.content.message.sender).startsWith;
                        _c = "@";
                        return [4 /*yield*/, crypto_1.getHexHash(Buffer.from(senderPublicKey, 'hex'))];
                    case 1: return [2 /*return*/, _b.apply(_a, [_c + (_d.sent())])];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getPublicKey = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.keyPair) {
                    throw new Error('KeyPair not available');
                }
                return [2 /*return*/, crypto_1.toHex(this.keyPair.publicKey)];
            });
        });
    };
    P2PCommunicationClient.prototype.getPublicKeyHash = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.keyPair) {
                    throw new Error('KeyPair not available');
                }
                return [2 /*return*/, crypto_1.getHexHash(this.keyPair.publicKey)];
            });
        });
    };
    P2PCommunicationClient.prototype.getAbsoluteBigIntDifference = function (firstHash, secondHash) {
        return __awaiter(this, void 0, void 0, function () {
            var difference;
            return __generator(this, function (_a) {
                difference = new bignumber_js_1.default("0x" + firstHash).minus("0x" + secondHash);
                return [2 /*return*/, difference.absoluteValue()];
            });
        });
    };
    P2PCommunicationClient.prototype.createCryptoBox = function (otherPublicKey, selfPrivateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var kxSelfPrivateKey, kxSelfPublicKey, kxOtherPublicKey;
            return __generator(this, function (_a) {
                kxSelfPrivateKey = sodium.crypto_sign_ed25519_sk_to_curve25519(Buffer.from(selfPrivateKey)) // Secret bytes to scalar bytes
                ;
                kxSelfPublicKey = sodium.crypto_sign_ed25519_pk_to_curve25519(Buffer.from(selfPrivateKey).slice(32, 64)) // Secret bytes to scalar bytes
                ;
                kxOtherPublicKey = sodium.crypto_sign_ed25519_pk_to_curve25519(Buffer.from(otherPublicKey, 'hex')) // Secret bytes to scalar bytes
                ;
                return [2 /*return*/, [
                        Buffer.from(kxSelfPublicKey),
                        Buffer.from(kxSelfPrivateKey),
                        Buffer.from(kxOtherPublicKey)
                    ]];
            });
        });
    };
    P2PCommunicationClient.prototype.createCryptoBoxServer = function (otherPublicKey, selfPrivateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCryptoBox(otherPublicKey, selfPrivateKey)];
                    case 1:
                        keys = _a.sent();
                        return [2 /*return*/, sodium.crypto_kx_server_session_keys.apply(sodium, keys)];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.createCryptoBoxClient = function (otherPublicKey, selfPrivateKey) {
        return __awaiter(this, void 0, void 0, function () {
            var keys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createCryptoBox(otherPublicKey, selfPrivateKey)];
                    case 1:
                        keys = _a.sent();
                        return [2 /*return*/, sodium.crypto_kx_client_session_keys.apply(sodium, keys)];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.getRelevantRoom = function (client, recipient) {
        return __awaiter(this, void 0, void 0, function () {
            var joinedRooms, relevantRooms, room, roomId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        joinedRooms = client.joinedRooms;
                        relevantRooms = joinedRooms.filter(function (roomElement) {
                            return roomElement.members.some(function (member) { return member === recipient; });
                        });
                        if (!(relevantRooms.length === 0)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.log("no relevant rooms found")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, client.createTrustedPrivateRoom(recipient)];
                    case 2:
                        roomId = _a.sent();
                        room = client.getRoomById(roomId);
                        return [3 /*break*/, 5];
                    case 3:
                        room = relevantRooms[0];
                        return [4 /*yield*/, this.log("channel already open, reusing room " + room.id)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [2 /*return*/, room];
                }
            });
        });
    };
    P2PCommunicationClient.prototype.log = function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.debug) {
                    console.log.apply(console, __spreadArrays(["--- [P2PCommunicationClient]:" + this.name + ": "], args));
                }
                return [2 /*return*/];
            });
        });
    };
    return P2PCommunicationClient;
}());
exports.P2PCommunicationClient = P2PCommunicationClient;
//# sourceMappingURL=P2PCommunicationClient.js.map