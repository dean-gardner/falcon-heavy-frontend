"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.BeaconEventHandler = exports.defaultEventCallbacks = exports.BeaconEvent = void 0;
var Toast_1 = require("./alert/Toast");
var Alert_1 = require("./alert/Alert");
var qr_1 = require("./utils/qr");
var Logger_1 = require("./utils/Logger");
var BeaconError_1 = require("./errors/BeaconError");
var block_explorer_1 = require("./utils/block-explorer");
var _1 = require(".");
var logger = new Logger_1.Logger('BeaconEvents');
var BeaconEvent;
(function (BeaconEvent) {
    BeaconEvent["PERMISSION_REQUEST_SENT"] = "PERMISSION_REQUEST_SENT";
    BeaconEvent["PERMISSION_REQUEST_SUCCESS"] = "PERMISSION_REQUEST_SUCCESS";
    BeaconEvent["PERMISSION_REQUEST_ERROR"] = "PERMISSION_REQUEST_ERROR";
    BeaconEvent["OPERATION_REQUEST_SENT"] = "OPERATION_REQUEST_SENT";
    BeaconEvent["OPERATION_REQUEST_SUCCESS"] = "OPERATION_REQUEST_SUCCESS";
    BeaconEvent["OPERATION_REQUEST_ERROR"] = "OPERATION_REQUEST_ERROR";
    BeaconEvent["SIGN_REQUEST_SENT"] = "SIGN_REQUEST_SENT";
    BeaconEvent["SIGN_REQUEST_SUCCESS"] = "SIGN_REQUEST_SUCCESS";
    BeaconEvent["SIGN_REQUEST_ERROR"] = "SIGN_REQUEST_ERROR";
    BeaconEvent["BROADCAST_REQUEST_SENT"] = "BROADCAST_REQUEST_SENT";
    BeaconEvent["BROADCAST_REQUEST_SUCCESS"] = "BROADCAST_REQUEST_SUCCESS";
    BeaconEvent["BROADCAST_REQUEST_ERROR"] = "BROADCAST_REQUEST_ERROR";
    BeaconEvent["LOCAL_RATE_LIMIT_REACHED"] = "LOCAL_RATE_LIMIT_REACHED";
    BeaconEvent["NO_PERMISSIONS"] = "NO_PERMISSIONS";
    BeaconEvent["ACTIVE_ACCOUNT_SET"] = "ACTIVE_ACCOUNT_SET";
    BeaconEvent["ACTIVE_TRANSPORT_SET"] = "ACTIVE_TRANSPORT_SET";
    BeaconEvent["P2P_CHANNEL_CONNECT_SUCCESS"] = "P2P_CHANNEL_CONNECT_SUCCESS";
    BeaconEvent["P2P_LISTEN_FOR_CHANNEL_OPEN"] = "P2P_LISTEN_FOR_CHANNEL_OPEN";
    BeaconEvent["INTERNAL_ERROR"] = "INTERNAL_ERROR";
    BeaconEvent["UNKNOWN"] = "UNKNOWN";
})(BeaconEvent = exports.BeaconEvent || (exports.BeaconEvent = {}));
var showSentToast = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        Toast_1.openToast({ body: 'Request sent', timer: 3000 }).catch(function (toastError) { return console.error(toastError); });
        return [2 /*return*/];
    });
}); };
var showNoPermissionAlert = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Alert_1.openAlert({
                    title: 'No Permission',
                    body: 'Please allow the wallet to handle this type of request.'
                })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showErrorAlert = function (beaconError) { return __awaiter(void 0, void 0, void 0, function () {
    var error;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                error = beaconError.errorType
                    ? BeaconError_1.BeaconError.getError(beaconError.errorType)
                    : new _1.UnknownBeaconError();
                return [4 /*yield*/, Alert_1.openAlert({
                        title: error.title,
                        body: error.description
                    })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showRateLimitReached = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        Toast_1.openToast({
            body: 'Rate limit reached. Please slow down',
            timer: 3000
        }).catch(function (toastError) { return console.error(toastError); });
        return [2 /*return*/];
    });
}); };
var showBeaconConnectedAlert = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, Alert_1.openAlert({
                    title: 'Success',
                    body: 'A wallet has been paired over the beacon network.',
                    confirmButtonText: 'Done',
                    timer: 1500
                })];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showInternalErrorAlert = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var alertConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                alertConfig = {
                    title: 'Internal Error',
                    confirmButtonText: 'Done',
                    body: "" + data,
                    confirmCallback: function () { return undefined; }
                };
                return [4 /*yield*/, Alert_1.openAlert(alertConfig)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showQrCode = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var dataString, alertConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                dataString = JSON.stringify(data);
                console.log(dataString);
                alertConfig = {
                    title: 'Pair with Wallet',
                    confirmButtonText: 'Done',
                    body: qr_1.getQrData(dataString, 'svg') + "<p>Connect wallet by scanning the QR code or clicking the link button <a href=\"https://docs.walletbeacon.io/supported-wallets.html\" target=\"_blank\">Learn&nbsp;more</a></p>",
                    confirmCallback: function () { return undefined; }
                };
                return [4 /*yield*/, Alert_1.openAlert(alertConfig)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showPermissionSuccessAlert = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var account, output, alertConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                account = data.account, output = data.output;
                alertConfig = {
                    title: 'Permission Granted',
                    body: "We received permissions for the address <strong>" + output.address + "</strong>\n    <br>\n    <br>\n    Network: <strong>" + output.network.type + "</strong>\n    <br>\n    Permissions: <strong>" + output.scopes + "</strong>",
                    confirmButtonText: 'Done',
                    confirmCallback: function () { return undefined; },
                    actionButtonText: 'Open Blockexplorer',
                    actionCallback: function () { return __awaiter(void 0, void 0, void 0, function () {
                        var link;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, block_explorer_1.getAccountBlockExplorerLinkForNetwork(account.network, output.address)];
                                case 1:
                                    link = _a.sent();
                                    window.open(link, '_blank');
                                    return [2 /*return*/];
                            }
                        });
                    }); }
                };
                return [4 /*yield*/, Alert_1.openAlert(alertConfig)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showOperationSuccessAlert = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var account, output, alertConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                account = data.account, output = data.output;
                alertConfig = {
                    title: 'Operation Broadcasted',
                    body: "The transaction has successfully been broadcasted to the network with the following hash. <strong>" + output.transactionHash + "</strong>",
                    confirmButtonText: 'Done',
                    confirmCallback: function () { return undefined; },
                    actionButtonText: 'Open Blockexplorer',
                    actionCallback: function () { return __awaiter(void 0, void 0, void 0, function () {
                        var link;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, block_explorer_1.getTransactionBlockExplorerLinkForNetwork(account.network, output.transactionHash)];
                                case 1:
                                    link = _a.sent();
                                    window.open(link, '_blank');
                                    return [2 /*return*/];
                            }
                        });
                    }); }
                };
                return [4 /*yield*/, Alert_1.openAlert(alertConfig)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showSignSuccessAlert = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var output, alertConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                output = data.output;
                alertConfig = {
                    title: 'Payload signed',
                    body: "The payload has successfully been signed.\n    <br>\n    Signature: <strong>" + output.signature + "</strong>",
                    confirmButtonText: 'Done',
                    confirmCallback: function () { return undefined; }
                };
                return [4 /*yield*/, Alert_1.openAlert(alertConfig)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var showBroadcastSuccessAlert = function (data) { return __awaiter(void 0, void 0, void 0, function () {
    var network, output, alertConfig;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                network = data.network, output = data.output;
                alertConfig = {
                    title: 'Broadcasted',
                    body: "The transaction has successfully been broadcasted to the network with the following hash. <strong>" + output.transactionHash + "</strong>",
                    confirmButtonText: 'Done',
                    confirmCallback: function () { return undefined; },
                    actionButtonText: 'Open Blockexplorer',
                    actionCallback: function () { return __awaiter(void 0, void 0, void 0, function () {
                        var link;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, block_explorer_1.getTransactionBlockExplorerLinkForNetwork(network, output.transactionHash)];
                                case 1:
                                    link = _a.sent();
                                    window.open(link, '_blank');
                                    return [2 /*return*/];
                            }
                        });
                    }); }
                };
                return [4 /*yield*/, Alert_1.openAlert(alertConfig)];
            case 1:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); };
var emptyHandler = function (eventType) { return function (data) { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        logger.log('emptyHandler', eventType, data);
        return [2 /*return*/];
    });
}); }; };
exports.defaultEventCallbacks = (_a = {},
    _a[BeaconEvent.PERMISSION_REQUEST_SENT] = showSentToast,
    _a[BeaconEvent.PERMISSION_REQUEST_SUCCESS] = showPermissionSuccessAlert,
    _a[BeaconEvent.PERMISSION_REQUEST_ERROR] = showErrorAlert,
    _a[BeaconEvent.OPERATION_REQUEST_SENT] = showSentToast,
    _a[BeaconEvent.OPERATION_REQUEST_SUCCESS] = showOperationSuccessAlert,
    _a[BeaconEvent.OPERATION_REQUEST_ERROR] = showErrorAlert,
    _a[BeaconEvent.SIGN_REQUEST_SENT] = showSentToast,
    _a[BeaconEvent.SIGN_REQUEST_SUCCESS] = showSignSuccessAlert,
    _a[BeaconEvent.SIGN_REQUEST_ERROR] = showErrorAlert,
    _a[BeaconEvent.BROADCAST_REQUEST_SENT] = showSentToast,
    _a[BeaconEvent.BROADCAST_REQUEST_SUCCESS] = showBroadcastSuccessAlert,
    _a[BeaconEvent.BROADCAST_REQUEST_ERROR] = showErrorAlert,
    _a[BeaconEvent.LOCAL_RATE_LIMIT_REACHED] = showRateLimitReached,
    _a[BeaconEvent.NO_PERMISSIONS] = showNoPermissionAlert,
    _a[BeaconEvent.ACTIVE_ACCOUNT_SET] = emptyHandler(BeaconEvent.ACTIVE_ACCOUNT_SET),
    _a[BeaconEvent.ACTIVE_TRANSPORT_SET] = emptyHandler(BeaconEvent.ACTIVE_TRANSPORT_SET),
    _a[BeaconEvent.P2P_CHANNEL_CONNECT_SUCCESS] = showBeaconConnectedAlert,
    _a[BeaconEvent.P2P_LISTEN_FOR_CHANNEL_OPEN] = showQrCode,
    _a[BeaconEvent.INTERNAL_ERROR] = showInternalErrorAlert,
    _a[BeaconEvent.UNKNOWN] = emptyHandler(BeaconEvent.UNKNOWN),
    _a);
var BeaconEventHandler = /** @class */ (function () {
    function BeaconEventHandler(eventsToOverride) {
        var _a;
        if (eventsToOverride === void 0) { eventsToOverride = {}; }
        this.callbackMap = (_a = {},
            _a[BeaconEvent.PERMISSION_REQUEST_SENT] = [exports.defaultEventCallbacks.PERMISSION_REQUEST_SENT],
            _a[BeaconEvent.PERMISSION_REQUEST_SUCCESS] = [exports.defaultEventCallbacks.PERMISSION_REQUEST_SUCCESS],
            _a[BeaconEvent.PERMISSION_REQUEST_ERROR] = [exports.defaultEventCallbacks.PERMISSION_REQUEST_ERROR],
            _a[BeaconEvent.OPERATION_REQUEST_SENT] = [exports.defaultEventCallbacks.OPERATION_REQUEST_SENT],
            _a[BeaconEvent.OPERATION_REQUEST_SUCCESS] = [exports.defaultEventCallbacks.OPERATION_REQUEST_SUCCESS],
            _a[BeaconEvent.OPERATION_REQUEST_ERROR] = [exports.defaultEventCallbacks.OPERATION_REQUEST_ERROR],
            _a[BeaconEvent.SIGN_REQUEST_SENT] = [exports.defaultEventCallbacks.SIGN_REQUEST_SENT],
            _a[BeaconEvent.SIGN_REQUEST_SUCCESS] = [exports.defaultEventCallbacks.SIGN_REQUEST_SUCCESS],
            _a[BeaconEvent.SIGN_REQUEST_ERROR] = [exports.defaultEventCallbacks.SIGN_REQUEST_ERROR],
            _a[BeaconEvent.BROADCAST_REQUEST_SENT] = [exports.defaultEventCallbacks.BROADCAST_REQUEST_SENT],
            _a[BeaconEvent.BROADCAST_REQUEST_SUCCESS] = [exports.defaultEventCallbacks.BROADCAST_REQUEST_SUCCESS],
            _a[BeaconEvent.BROADCAST_REQUEST_ERROR] = [exports.defaultEventCallbacks.BROADCAST_REQUEST_ERROR],
            _a[BeaconEvent.LOCAL_RATE_LIMIT_REACHED] = [exports.defaultEventCallbacks.LOCAL_RATE_LIMIT_REACHED],
            _a[BeaconEvent.NO_PERMISSIONS] = [exports.defaultEventCallbacks.NO_PERMISSIONS],
            _a[BeaconEvent.ACTIVE_ACCOUNT_SET] = [exports.defaultEventCallbacks.ACTIVE_ACCOUNT_SET],
            _a[BeaconEvent.ACTIVE_TRANSPORT_SET] = [exports.defaultEventCallbacks.ACTIVE_TRANSPORT_SET],
            _a[BeaconEvent.P2P_CHANNEL_CONNECT_SUCCESS] = [exports.defaultEventCallbacks.P2P_CHANNEL_CONNECT_SUCCESS],
            _a[BeaconEvent.P2P_LISTEN_FOR_CHANNEL_OPEN] = [exports.defaultEventCallbacks.P2P_LISTEN_FOR_CHANNEL_OPEN],
            _a[BeaconEvent.INTERNAL_ERROR] = [exports.defaultEventCallbacks.INTERNAL_ERROR],
            _a[BeaconEvent.UNKNOWN] = [exports.defaultEventCallbacks.UNKNOWN],
            _a);
        this.overrideDefaults(eventsToOverride).catch(function (overrideError) {
            logger.error('constructor', overrideError);
        });
    }
    BeaconEventHandler.prototype.on = function (event, eventCallback) {
        return __awaiter(this, void 0, void 0, function () {
            var listeners;
            return __generator(this, function (_a) {
                listeners = this.callbackMap[event] || [];
                listeners.push(eventCallback);
                this.callbackMap[event] = listeners;
                return [2 /*return*/];
            });
        });
    };
    BeaconEventHandler.prototype.emit = function (event, data) {
        return __awaiter(this, void 0, void 0, function () {
            var listeners;
            var _this = this;
            return __generator(this, function (_a) {
                listeners = this.callbackMap[event];
                if (listeners && listeners.length > 0) {
                    listeners.forEach(function (listener) { return __awaiter(_this, void 0, void 0, function () {
                        var listenerError_1;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    _a.trys.push([0, 2, , 3]);
                                    return [4 /*yield*/, listener(data)];
                                case 1:
                                    _a.sent();
                                    return [3 /*break*/, 3];
                                case 2:
                                    listenerError_1 = _a.sent();
                                    logger.error("error handling event " + event, listenerError_1);
                                    return [3 /*break*/, 3];
                                case 3: return [2 /*return*/];
                            }
                        });
                    }); });
                }
                return [2 /*return*/];
            });
        });
    };
    BeaconEventHandler.prototype.overrideDefaults = function (eventsToOverride) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                Object.keys(eventsToOverride).forEach(function (untypedEvent) {
                    var eventType = untypedEvent;
                    var event = eventsToOverride[eventType];
                    if (event) {
                        _this.callbackMap[eventType] = [event.handler];
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    return BeaconEventHandler;
}());
exports.BeaconEventHandler = BeaconEventHandler;
//# sourceMappingURL=events.js.map