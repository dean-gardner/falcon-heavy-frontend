import * as sodium from 'libsodium-wrappers';
import { MatrixClientEvent, MatrixClientEventType, MatrixClientEventMessageContent } from './matrix-client/models/MatrixClientEvent';
import { P2PPairInfo } from '.';
export declare class P2PCommunicationClient {
    private readonly name;
    private readonly keyPair;
    readonly replicationCount: number;
    private readonly debug;
    private readonly clients;
    private readonly KNOWN_RELAY_SERVERS;
    private readonly activeListeners;
    constructor(name: string, keyPair: sodium.KeyPair, replicationCount: number, debug?: boolean);
    getHandshakeInfo(): Promise<P2PPairInfo>;
    getRelayServer(publicKeyHash?: string, nonce?: string): Promise<string>;
    start(): Promise<void>;
    listenForEncryptedMessage(senderPublicKey: string, messageCallback: (message: string) => void): Promise<void>;
    unsubscribeFromEncryptedMessage(senderPublicKey: string): Promise<void>;
    unsubscribeFromEncryptedMessages(): Promise<void>;
    sendMessage(recipientPublicKey: string, message: string): Promise<void>;
    listenForChannelOpening(messageCallback: (message: string) => void): Promise<void>;
    openChannel(recipientPublicKey: string, relayServer: string): Promise<void>;
    isTextMessage(content: MatrixClientEventMessageContent<any>): content is MatrixClientEventMessageContent<string>;
    isChannelOpenMessage(content: MatrixClientEventMessageContent<string>): Promise<boolean>;
    isSender(event: MatrixClientEvent<MatrixClientEventType.MESSAGE>, senderPublicKey: string): Promise<boolean>;
    getPublicKey(): Promise<string>;
    getPublicKeyHash(): Promise<string>;
    private getAbsoluteBigIntDifference;
    private createCryptoBox;
    private createCryptoBoxServer;
    private createCryptoBoxClient;
    private getRelevantRoom;
    private log;
}
