"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
var exposed_promise_1 = require("../../utils/exposed-promise");
var __1 = require("../..");
var events_1 = require("../../events");
var is_extension_installed_1 = require("../../utils/is-extension-installed");
var BeaconClient_1 = require("../beacon-client/BeaconClient");
var AccountManager_1 = require("../../managers/AccountManager");
var Client = /** @class */ (function (_super) {
    __extends(Client, _super);
    function Client(config) {
        var _this = _super.call(this, { name: config.name, storage: config.storage }) || this;
        _this.requestCounter = [];
        _this.rateLimit = 2;
        _this.rateLimitWindowInSeconds = 5;
        _this._transport = new exposed_promise_1.ExposedPromise();
        _this._isConnected = new exposed_promise_1.ExposedPromise();
        _this.events = new events_1.BeaconEventHandler(config.eventHandlers);
        _this.accountManager = new AccountManager_1.AccountManager(config.storage);
        _this.handleResponse = function (message, connectionInfo) {
            throw new Error("not overwritten" + JSON.stringify(message) + " - " + JSON.stringify(connectionInfo));
        };
        return _this;
    }
    Object.defineProperty(Client.prototype, "transport", {
        get: function () {
            return this._transport.promise;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "isConnected", {
        get: function () {
            return this._isConnected.promise;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Client.prototype, "ready", {
        get: function () {
            return this.transport.then(function () { return undefined; });
        },
        enumerable: false,
        configurable: true
    });
    Client.prototype.getAccounts = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.accountManager.getAccounts()];
            });
        });
    };
    Client.prototype.getAccount = function (accountIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.accountManager.getAccount(accountIdentifier)];
            });
        });
    };
    Client.prototype.removeAccount = function (accountIdentifier) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.accountManager.removeAccount(accountIdentifier)];
            });
        });
    };
    Client.prototype.removeAllAccounts = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.accountManager.removeAllAccounts()];
            });
        });
    };
    Client.prototype.addRequestAndCheckIfRateLimited = function () {
        return __awaiter(this, void 0, void 0, function () {
            var now;
            var _this = this;
            return __generator(this, function (_a) {
                now = new Date().getTime();
                this.requestCounter = this.requestCounter.filter(function (date) { return date + _this.rateLimitWindowInSeconds * 1000 > now; });
                this.requestCounter.push(now);
                return [2 /*return*/, this.requestCounter.length > this.rateLimit];
            });
        });
    };
    Client.prototype.init = function (isDapp, transport) {
        if (isDapp === void 0) { isDapp = true; }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(this._transport.status === exposed_promise_1.ExposedPromiseStatus.RESOLVED)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.transport];
                    case 1: return [2 /*return*/, (_a.sent()).type];
                    case 2:
                        if (!transport) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.setTransport(transport)]; // Let users define their own transport
                    case 3:
                        _a.sent(); // Let users define their own transport
                        return [2 /*return*/, transport.type];
                    case 4: return [2 /*return*/, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                            var keyPair, setTransport, setBeaconTransport, setBeaconTransportTimeout;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.keyPair]; // We wait for keypair here so the P2P Transport creation is not delayed and causing issues
                                    case 1:
                                        keyPair = _a.sent() // We wait for keypair here so the P2P Transport creation is not delayed and causing issues
                                        ;
                                        setTransport = function (newTransport) { return __awaiter(_this, void 0, void 0, function () {
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, this.setTransport(newTransport)];
                                                    case 1:
                                                        _a.sent();
                                                        resolve(newTransport.type);
                                                        return [2 /*return*/];
                                                }
                                            });
                                        }); };
                                        setBeaconTransport = function () { return __awaiter(_this, void 0, void 0, function () {
                                            var newTransport;
                                            return __generator(this, function (_a) {
                                                newTransport = new __1.P2PTransport(this.name, keyPair, this.storage, this.events, isDapp);
                                                return [2 /*return*/, setTransport(newTransport)];
                                            });
                                        }); };
                                        setBeaconTransportTimeout = setTimeout(setBeaconTransport, 200);
                                        return [2 /*return*/, is_extension_installed_1.isChromeExtensionInstalled.then(function (postMessageAvailable) { return __awaiter(_this, void 0, void 0, function () {
                                                return __generator(this, function (_a) {
                                                    if (postMessageAvailable) {
                                                        if (setBeaconTransportTimeout) {
                                                            clearTimeout(setBeaconTransportTimeout);
                                                        }
                                                        return [2 /*return*/, setTransport(new __1.PostMessageTransport(this.name))];
                                                    }
                                                    return [2 /*return*/];
                                                });
                                            }); })];
                                }
                            });
                        }); })];
                }
            });
        });
    };
    Client.prototype.getPeers = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transport];
                    case 1:
                        if (!((_a.sent()).type === __1.TransportType.P2P)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.transport];
                    case 2: return [2 /*return*/, (_a.sent()).getPeers()];
                    case 3: return [2 /*return*/, []];
                }
            });
        });
    };
    Client.prototype.addPeer = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transport];
                    case 1:
                        if (!((_a.sent()).type === __1.TransportType.P2P)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.transport];
                    case 2: return [2 /*return*/, (_a.sent()).addPeer(id)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Client.prototype._connect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var transport;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transport];
                    case 1:
                        transport = _a.sent();
                        if (!(transport.connectionStatus === __1.TransportStatus.NOT_CONNECTED)) return [3 /*break*/, 3];
                        return [4 /*yield*/, transport.connect()];
                    case 2:
                        _a.sent();
                        transport
                            .addListener(function (message, connectionInfo) { return __awaiter(_this, void 0, void 0, function () {
                            var deserializedMessage;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (!(typeof message === 'string')) return [3 /*break*/, 2];
                                        return [4 /*yield*/, new __1.Serializer().deserialize(message)];
                                    case 1:
                                        deserializedMessage = (_a.sent());
                                        this.handleResponse(deserializedMessage, connectionInfo);
                                        _a.label = 2;
                                    case 2: return [2 /*return*/];
                                }
                            });
                        }); })
                            .catch(function (error) { return console.log(error); });
                        this._isConnected.resolve(true);
                        return [3 /*break*/, 5];
                    case 3:
                        if (!(transport.connectionStatus === __1.TransportStatus.CONNECTING)) return [3 /*break*/, 5];
                        return [4 /*yield*/, transport.reconnect()];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, this._isConnected.promise];
                }
            });
        });
    };
    Client.prototype.setTransport = function (transport) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._transport.isSettled()) {
                            // If the promise has already been resolved we need to create a new one.
                            this._transport = exposed_promise_1.ExposedPromise.resolve(transport);
                        }
                        else {
                            this._transport.resolve(transport);
                        }
                        return [4 /*yield*/, this.events.emit(events_1.BeaconEvent.ACTIVE_TRANSPORT_SET, transport)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Client;
}(BeaconClient_1.BeaconClient));
exports.Client = Client;
//# sourceMappingURL=Client.js.map