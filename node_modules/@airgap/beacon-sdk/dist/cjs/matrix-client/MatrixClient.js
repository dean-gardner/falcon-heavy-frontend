"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatrixClient = void 0;
var MatrixClientStore_1 = require("./MatrixClientStore");
var MatrixHttpClient_1 = require("./MatrixHttpClient");
var MatrixRoom_1 = require("./models/MatrixRoom");
var MatrixRoomService_1 = require("./services/MatrixRoomService");
var MatrixUserService_1 = require("./services/MatrixUserService");
var MatrixEventService_1 = require("./services/MatrixEventService");
var MatrixClientEventEmitter_1 = require("./MatrixClientEventEmitter");
var MAX_POLLING_RETRIES = 3;
var MatrixClient = /** @class */ (function () {
    function MatrixClient(store, eventEmitter, userService, roomService, eventService) {
        var _this = this;
        this.store = store;
        this.eventEmitter = eventEmitter;
        this.userService = userService;
        this.roomService = roomService;
        this.eventService = eventService;
        this.store.onStateChanged(function (oldState, newState, stateChange) {
            _this.eventEmitter.onStateChanged(oldState, newState, stateChange);
        }, 'rooms');
    }
    MatrixClient.create = function (config) {
        var store = MatrixClientStore_1.MatrixClientStore.createLocal();
        var eventEmitter = new MatrixClientEventEmitter_1.MatrixClientEventEmitter();
        var httpClient = new MatrixHttpClient_1.MatrixHttpClient(config.baseUrl);
        var accountService = new MatrixUserService_1.MatrixUserService(httpClient);
        var roomService = new MatrixRoomService_1.MatrixRoomService(httpClient);
        var eventService = new MatrixEventService_1.MatrixEventService(httpClient);
        return new MatrixClient(store, eventEmitter, accountService, roomService, eventService);
    };
    Object.defineProperty(MatrixClient.prototype, "joinedRooms", {
        get: function () {
            return Object.values(this.store.get('rooms')).filter(function (room) { return room.status === MatrixRoom_1.MatrixRoomStatus.JOINED; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixClient.prototype, "invitedRooms", {
        get: function () {
            return Object.values(this.store.get('rooms')).filter(function (room) { return room.status === MatrixRoom_1.MatrixRoomStatus.INVITED; });
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MatrixClient.prototype, "leftRooms", {
        get: function () {
            return Object.values(this.store.get('rooms')).filter(function (room) { return room.status === MatrixRoom_1.MatrixRoomStatus.LEFT; });
        },
        enumerable: false,
        configurable: true
    });
    MatrixClient.prototype.start = function (user) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.userService.login(user.id, user.password, user.deviceId)];
                    case 1:
                        response = _a.sent();
                        this.store.update({
                            accessToken: response.access_token
                        });
                        return [2 /*return*/, new Promise(function (resolve, reject) {
                                _this.poll(0, function (pollingResponse) {
                                    if (!_this.store.get('isRunning')) {
                                        resolve();
                                    }
                                    _this.store.update({
                                        isRunning: true,
                                        syncToken: pollingResponse.next_batch,
                                        pollingTimeout: 30000,
                                        pollingRetries: 0,
                                        rooms: MatrixRoom_1.MatrixRoom.fromSync(pollingResponse.rooms)
                                    });
                                }, function (error) {
                                    if (!_this.store.get('isRunning')) {
                                        reject(error);
                                    }
                                    _this.store.update({
                                        isRunning: false,
                                        pollingRetries: _this.store.get('pollingRetries') + 1
                                    });
                                });
                            })];
                }
            });
        });
    };
    MatrixClient.prototype.subscribe = function (event, listener) {
        this.eventEmitter.on(event, listener);
    };
    MatrixClient.prototype.unsubscribe = function (event, listener) {
        if (listener) {
            this.eventEmitter.removeListener(event, listener);
        }
        else {
            this.eventEmitter.removeAllListeners(event);
        }
    };
    MatrixClient.prototype.getRoomById = function (id) {
        return this.store.getRoom(id);
    };
    MatrixClient.prototype.createTrustedPrivateRoom = function () {
        var members = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            members[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.requiresAuthorization('createRoom', function (accessToken) { return __awaiter(_this, void 0, void 0, function () {
                        var response;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, this.roomService.createRoom(accessToken, {
                                        invite: members,
                                        preset: 'trusted_private_chat',
                                        is_direct: true
                                    })];
                                case 1:
                                    response = _a.sent();
                                    return [2 /*return*/, response.room_id];
                            }
                        });
                    }); })];
            });
        });
    };
    MatrixClient.prototype.inviteToRooms = function (user) {
        var roomsOrIds = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            roomsOrIds[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.requiresAuthorization('invite', function (accessToken) {
                            return Promise.all(roomsOrIds.map(function (roomOrId) {
                                var room = _this.store.getRoom(roomOrId);
                                _this.roomService
                                    .inviteToRoom(accessToken, user, room)
                                    .catch(function (error) { return console.warn(error); });
                            }));
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MatrixClient.prototype.joinRooms = function () {
        var roomsOrIds = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            roomsOrIds[_i] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.requiresAuthorization('join', function (accessToken) {
                            return Promise.all(roomsOrIds.map(function (roomOrId) {
                                var room = _this.store.getRoom(roomOrId);
                                return _this.roomService.joinRoom(accessToken, room).catch(function (error) { return console.warn(error); });
                            }));
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MatrixClient.prototype.sendTextMessage = function (roomOrId, message) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.requiresAuthorization('send', function (accessToken) { return __awaiter(_this, void 0, void 0, function () {
                                var room, txnId;
                                return __generator(this, function (_a) {
                                    room = this.store.getRoom(roomOrId);
                                    txnId = this.createTxnId();
                                    return [2 /*return*/, this.eventService.sendMessage(accessToken, room, {
                                            msgtype: 'm.text',
                                            body: message
                                        }, txnId)];
                                });
                            }); })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_1 = _a.sent();
                        console.error(error_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    MatrixClient.prototype.poll = function (interval, onSyncSuccess, onSyncError) {
        var _this = this;
        var store = this.store;
        var sync = this.sync.bind(this);
        var pollSync = function () { return __awaiter(_this, void 0, void 0, function () {
            var continueSyncing, response, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        continueSyncing = false;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, 4, 5]);
                        return [4 /*yield*/, sync()];
                    case 2:
                        response = _a.sent();
                        onSyncSuccess(response);
                        continueSyncing = true;
                        return [3 /*break*/, 5];
                    case 3:
                        error_2 = _a.sent();
                        onSyncError(error_2);
                        continueSyncing = store.get('pollingRetries') < MAX_POLLING_RETRIES;
                        console.warn('Could not sync:', error_2);
                        if (continueSyncing) {
                            console.log('Retry syncing...');
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        if (continueSyncing) {
                            setTimeout(pollSync, interval);
                        }
                        else {
                            throw new Error("Max polling retries exeeded: " + MAX_POLLING_RETRIES);
                        }
                        return [7 /*endfinally*/];
                    case 5: return [2 /*return*/];
                }
            });
        }); };
        pollSync();
    };
    MatrixClient.prototype.sync = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.requiresAuthorization('sync', function (accessToken) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            return [2 /*return*/, this.eventService.sync(accessToken, {
                                    pollingTimeout: this.store.get('pollingTimeout'),
                                    syncToken: this.store.get('syncToken')
                                })];
                        });
                    }); })];
            });
        });
    };
    MatrixClient.prototype.requiresAuthorization = function (name, action) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.store.get('accessToken')) {
                    return [2 /*return*/, Promise.reject(name + " requires authorization but no access token has been provided.")];
                }
                return [2 /*return*/, action(this.store.get('accessToken'))];
            });
        });
    };
    MatrixClient.prototype.createTxnId = function () {
        var timestamp = new Date().getTime();
        var counter = this.store.get('txnNo');
        this.store.update({
            txnNo: counter + 1
        });
        return "m" + timestamp + "." + counter;
    };
    return MatrixClient;
}());
exports.MatrixClient = MatrixClient;
//# sourceMappingURL=MatrixClient.js.map