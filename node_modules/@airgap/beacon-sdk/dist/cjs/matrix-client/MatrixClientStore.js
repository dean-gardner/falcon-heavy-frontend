"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MatrixClientStore = void 0;
var utils_1 = require("../utils/utils");
var MatrixRoom_1 = require("./models/MatrixRoom");
var STORAGE_KEY = 'beacon:sdk-matrix-preserved-state';
var PRESERVED_FIELDS = ['syncToken', 'rooms'];
var MatrixClientStore = /** @class */ (function () {
    function MatrixClientStore(storage) {
        this.storage = storage;
        this.state = {
            isRunning: false,
            userId: undefined,
            deviceId: undefined,
            txnNo: 0,
            accessToken: undefined,
            syncToken: undefined,
            pollingTimeout: undefined,
            pollingRetries: 0,
            rooms: {}
        };
        this.onStateChangedListeners = new Map();
        this.initFromStorage();
    }
    MatrixClientStore.createLocal = function () {
        var localStorage = global.localStorage;
        return new MatrixClientStore(localStorage);
    };
    MatrixClientStore.prototype.get = function (key) {
        return this.state[key];
    };
    MatrixClientStore.prototype.getRoom = function (roomOrId) {
        var room = MatrixRoom_1.MatrixRoom.from(roomOrId, MatrixRoom_1.MatrixRoomStatus.UNKNOWN);
        return this.state.rooms[room.id] || room;
    };
    MatrixClientStore.prototype.update = function (stateUpdate) {
        var oldState = Object.assign({}, this.state);
        this.setState(stateUpdate);
        this.updateStorage(stateUpdate);
        this.notifyListeners(oldState, this.state, stateUpdate);
    };
    MatrixClientStore.prototype.onStateChanged = function (listener) {
        var _this = this;
        var subscribed = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            subscribed[_i - 1] = arguments[_i];
        }
        if (subscribed.length > 0) {
            subscribed.forEach(function (key) {
                _this.onStateChangedListeners.set(key, listener);
            });
        }
        else {
            this.onStateChangedListeners.set('all', listener);
        }
    };
    MatrixClientStore.prototype.initFromStorage = function () {
        if (this.storage) {
            var preserved = this.storage.getItem(STORAGE_KEY);
            this.setState(preserved ? JSON.parse(preserved) : {});
        }
    };
    MatrixClientStore.prototype.prepareData = function (toStore) {
        var requiresPreparation = ['rooms'];
        var toStoreCopy = requiresPreparation.some(function (key) { return toStore[key] !== undefined; })
            ? JSON.parse(JSON.stringify(toStore))
            : toStore;
        // there is no need for saving messages in a persistent storage
        Object.values(toStoreCopy.rooms || {}).forEach(function (room) {
            room.messages = [];
        });
        return toStoreCopy;
    };
    MatrixClientStore.prototype.updateStorage = function (stateUpdate) {
        var _this = this;
        var updatedCachedFields = Object.entries(stateUpdate).filter(function (_a) {
            var key = _a[0], value = _a[1];
            return PRESERVED_FIELDS.includes(key) && Boolean(value);
        });
        if (this.storage && updatedCachedFields.length > 0) {
            var filteredState_1 = {};
            PRESERVED_FIELDS.forEach(function (key) {
                filteredState_1[key] = _this.state[key];
            });
            this.storage.setItem(STORAGE_KEY, JSON.stringify(this.prepareData(filteredState_1)));
        }
    };
    MatrixClientStore.prototype.setState = function (partialState) {
        this.state = {
            isRunning: partialState.isRunning || this.state.isRunning,
            userId: partialState.userId || this.state.userId,
            deviceId: partialState.deviceId || this.state.deviceId,
            txnNo: partialState.txnNo || this.state.txnNo,
            accessToken: partialState.accessToken || this.state.accessToken,
            syncToken: partialState.syncToken || this.state.syncToken,
            pollingTimeout: partialState.pollingTimeout || this.state.pollingTimeout,
            pollingRetries: partialState.pollingRetries || this.state.pollingRetries,
            rooms: this.mergeRooms(this.state.rooms, partialState.rooms)
        };
    };
    MatrixClientStore.prototype.mergeRooms = function (oldRooms, _newRooms) {
        if (!_newRooms) {
            return oldRooms;
        }
        var newRooms = Array.isArray(_newRooms) ? _newRooms : Object.values(_newRooms);
        var merged = Object.assign({}, oldRooms);
        newRooms.forEach(function (newRoom) {
            merged[newRoom.id] = MatrixRoom_1.MatrixRoom.merge(newRoom, oldRooms[newRoom.id]);
        });
        return merged;
    };
    MatrixClientStore.prototype.notifyListeners = function (oldState, newState, stateChange) {
        var _this = this;
        var listenForAll = this.onStateChangedListeners.get('all');
        if (listenForAll) {
            listenForAll(oldState, newState, stateChange);
        }
        utils_1.keys(stateChange)
            .filter(function (key) { return stateChange[key] !== undefined; })
            .forEach(function (key) {
            var listener = _this.onStateChangedListeners.get(key);
            if (listener) {
                listener(oldState, newState, stateChange);
            }
        });
    };
    return MatrixClientStore;
}());
exports.MatrixClientStore = MatrixClientStore;
//# sourceMappingURL=MatrixClientStore.js.map