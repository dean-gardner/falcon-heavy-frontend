import { MatrixHttpClient } from '../MatrixHttpClient';
import { MatrixRoom } from '../models/MatrixRoom';
import { MatrixEventSendResponse } from '../models/api/MatrixEventSend';
import { MatrixSyncResponse } from '../models/api/MatrixSync';
import { MatrixStateEventMessageContent } from '../models/MatrixStateEvent';
interface MatrixScheduledEvent<T> {
    accessToken: string;
    room: MatrixRoom;
    type: MatrixEventType;
    content: any;
    txnId: string;
    onSuccess(response: T): void;
    onError(error: unknown): void;
}
declare type MatrixEventType = 'm.room.message';
export interface MatrixSyncOptions {
    syncToken?: string;
    pollingTimeout?: number;
}
export declare class MatrixEventService {
    private readonly httpClient;
    private readonly cachedPromises;
    constructor(httpClient: MatrixHttpClient);
    sync(accessToken: string, options?: MatrixSyncOptions): Promise<MatrixSyncResponse>;
    sendMessage(accessToken: string, room: MatrixRoom, content: MatrixStateEventMessageContent, txnId: string): Promise<MatrixEventSendResponse>;
    scheduleEvent(event: MatrixScheduledEvent<any>): void;
    sendEvent(scheduledEvent: MatrixScheduledEvent<any>): Promise<void>;
    private withCache;
}
export {};
